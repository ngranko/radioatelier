// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/object"
	"radioatelier/ent/objectuser"
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ObjectUserUpdate is the builder for updating ObjectUser entities.
type ObjectUserUpdate struct {
	config
	hooks    []Hook
	mutation *ObjectUserMutation
}

// Where appends a list predicates to the ObjectUserUpdate builder.
func (ouu *ObjectUserUpdate) Where(ps ...predicate.ObjectUser) *ObjectUserUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetUserID sets the "user_id" field.
func (ouu *ObjectUserUpdate) SetUserID(pu puuid.ID) *ObjectUserUpdate {
	ouu.mutation.SetUserID(pu)
	return ouu
}

// SetObjectID sets the "object_id" field.
func (ouu *ObjectUserUpdate) SetObjectID(pu puuid.ID) *ObjectUserUpdate {
	ouu.mutation.SetObjectID(pu)
	return ouu
}

// SetIsVisited sets the "is_visited" field.
func (ouu *ObjectUserUpdate) SetIsVisited(b bool) *ObjectUserUpdate {
	ouu.mutation.SetIsVisited(b)
	return ouu
}

// SetNillableIsVisited sets the "is_visited" field if the given value is not nil.
func (ouu *ObjectUserUpdate) SetNillableIsVisited(b *bool) *ObjectUserUpdate {
	if b != nil {
		ouu.SetIsVisited(*b)
	}
	return ouu
}

// SetLastVisit sets the "last_visit" field.
func (ouu *ObjectUserUpdate) SetLastVisit(t time.Time) *ObjectUserUpdate {
	ouu.mutation.SetLastVisit(t)
	return ouu
}

// SetNillableLastVisit sets the "last_visit" field if the given value is not nil.
func (ouu *ObjectUserUpdate) SetNillableLastVisit(t *time.Time) *ObjectUserUpdate {
	if t != nil {
		ouu.SetLastVisit(*t)
	}
	return ouu
}

// ClearLastVisit clears the value of the "last_visit" field.
func (ouu *ObjectUserUpdate) ClearLastVisit() *ObjectUserUpdate {
	ouu.mutation.ClearLastVisit()
	return ouu
}

// SetUser sets the "user" edge to the User entity.
func (ouu *ObjectUserUpdate) SetUser(u *User) *ObjectUserUpdate {
	return ouu.SetUserID(u.ID)
}

// SetObject sets the "object" edge to the Object entity.
func (ouu *ObjectUserUpdate) SetObject(o *Object) *ObjectUserUpdate {
	return ouu.SetObjectID(o.ID)
}

// Mutation returns the ObjectUserMutation object of the builder.
func (ouu *ObjectUserUpdate) Mutation() *ObjectUserMutation {
	return ouu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ouu *ObjectUserUpdate) ClearUser() *ObjectUserUpdate {
	ouu.mutation.ClearUser()
	return ouu
}

// ClearObject clears the "object" edge to the Object entity.
func (ouu *ObjectUserUpdate) ClearObject() *ObjectUserUpdate {
	ouu.mutation.ClearObject()
	return ouu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *ObjectUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ObjectUserMutation](ctx, ouu.sqlSave, ouu.mutation, ouu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *ObjectUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *ObjectUserUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *ObjectUserUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouu *ObjectUserUpdate) check() error {
	if _, ok := ouu.mutation.UserID(); ouu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ObjectUser.user"`)
	}
	if _, ok := ouu.mutation.ObjectID(); ouu.mutation.ObjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ObjectUser.object"`)
	}
	return nil
}

func (ouu *ObjectUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ouu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(objectuser.Table, objectuser.Columns, sqlgraph.NewFieldSpec(objectuser.FieldUserID, field.TypeString), sqlgraph.NewFieldSpec(objectuser.FieldObjectID, field.TypeString))
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.IsVisited(); ok {
		_spec.SetField(objectuser.FieldIsVisited, field.TypeBool, value)
	}
	if value, ok := ouu.mutation.LastVisit(); ok {
		_spec.SetField(objectuser.FieldLastVisit, field.TypeTime, value)
	}
	if ouu.mutation.LastVisitCleared() {
		_spec.ClearField(objectuser.FieldLastVisit, field.TypeTime)
	}
	if ouu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.UserTable,
			Columns: []string{objectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.UserTable,
			Columns: []string{objectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.ObjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.ObjectTable,
			Columns: []string{objectuser.ObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.ObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.ObjectTable,
			Columns: []string{objectuser.ObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{objectuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ouu.mutation.done = true
	return n, nil
}

// ObjectUserUpdateOne is the builder for updating a single ObjectUser entity.
type ObjectUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ObjectUserMutation
}

// SetUserID sets the "user_id" field.
func (ouuo *ObjectUserUpdateOne) SetUserID(pu puuid.ID) *ObjectUserUpdateOne {
	ouuo.mutation.SetUserID(pu)
	return ouuo
}

// SetObjectID sets the "object_id" field.
func (ouuo *ObjectUserUpdateOne) SetObjectID(pu puuid.ID) *ObjectUserUpdateOne {
	ouuo.mutation.SetObjectID(pu)
	return ouuo
}

// SetIsVisited sets the "is_visited" field.
func (ouuo *ObjectUserUpdateOne) SetIsVisited(b bool) *ObjectUserUpdateOne {
	ouuo.mutation.SetIsVisited(b)
	return ouuo
}

// SetNillableIsVisited sets the "is_visited" field if the given value is not nil.
func (ouuo *ObjectUserUpdateOne) SetNillableIsVisited(b *bool) *ObjectUserUpdateOne {
	if b != nil {
		ouuo.SetIsVisited(*b)
	}
	return ouuo
}

// SetLastVisit sets the "last_visit" field.
func (ouuo *ObjectUserUpdateOne) SetLastVisit(t time.Time) *ObjectUserUpdateOne {
	ouuo.mutation.SetLastVisit(t)
	return ouuo
}

// SetNillableLastVisit sets the "last_visit" field if the given value is not nil.
func (ouuo *ObjectUserUpdateOne) SetNillableLastVisit(t *time.Time) *ObjectUserUpdateOne {
	if t != nil {
		ouuo.SetLastVisit(*t)
	}
	return ouuo
}

// ClearLastVisit clears the value of the "last_visit" field.
func (ouuo *ObjectUserUpdateOne) ClearLastVisit() *ObjectUserUpdateOne {
	ouuo.mutation.ClearLastVisit()
	return ouuo
}

// SetUser sets the "user" edge to the User entity.
func (ouuo *ObjectUserUpdateOne) SetUser(u *User) *ObjectUserUpdateOne {
	return ouuo.SetUserID(u.ID)
}

// SetObject sets the "object" edge to the Object entity.
func (ouuo *ObjectUserUpdateOne) SetObject(o *Object) *ObjectUserUpdateOne {
	return ouuo.SetObjectID(o.ID)
}

// Mutation returns the ObjectUserMutation object of the builder.
func (ouuo *ObjectUserUpdateOne) Mutation() *ObjectUserMutation {
	return ouuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ouuo *ObjectUserUpdateOne) ClearUser() *ObjectUserUpdateOne {
	ouuo.mutation.ClearUser()
	return ouuo
}

// ClearObject clears the "object" edge to the Object entity.
func (ouuo *ObjectUserUpdateOne) ClearObject() *ObjectUserUpdateOne {
	ouuo.mutation.ClearObject()
	return ouuo
}

// Where appends a list predicates to the ObjectUserUpdate builder.
func (ouuo *ObjectUserUpdateOne) Where(ps ...predicate.ObjectUser) *ObjectUserUpdateOne {
	ouuo.mutation.Where(ps...)
	return ouuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *ObjectUserUpdateOne) Select(field string, fields ...string) *ObjectUserUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated ObjectUser entity.
func (ouuo *ObjectUserUpdateOne) Save(ctx context.Context) (*ObjectUser, error) {
	return withHooks[*ObjectUser, ObjectUserMutation](ctx, ouuo.sqlSave, ouuo.mutation, ouuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *ObjectUserUpdateOne) SaveX(ctx context.Context) *ObjectUser {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *ObjectUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *ObjectUserUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouuo *ObjectUserUpdateOne) check() error {
	if _, ok := ouuo.mutation.UserID(); ouuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ObjectUser.user"`)
	}
	if _, ok := ouuo.mutation.ObjectID(); ouuo.mutation.ObjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ObjectUser.object"`)
	}
	return nil
}

func (ouuo *ObjectUserUpdateOne) sqlSave(ctx context.Context) (_node *ObjectUser, err error) {
	if err := ouuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(objectuser.Table, objectuser.Columns, sqlgraph.NewFieldSpec(objectuser.FieldUserID, field.TypeString), sqlgraph.NewFieldSpec(objectuser.FieldObjectID, field.TypeString))
	if id, ok := ouuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "ObjectUser.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ouuo.mutation.ObjectID(); !ok {
		return nil, &ValidationError{Name: "object_id", err: errors.New(`ent: missing "ObjectUser.object_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !objectuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.IsVisited(); ok {
		_spec.SetField(objectuser.FieldIsVisited, field.TypeBool, value)
	}
	if value, ok := ouuo.mutation.LastVisit(); ok {
		_spec.SetField(objectuser.FieldLastVisit, field.TypeTime, value)
	}
	if ouuo.mutation.LastVisitCleared() {
		_spec.ClearField(objectuser.FieldLastVisit, field.TypeTime)
	}
	if ouuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.UserTable,
			Columns: []string{objectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.UserTable,
			Columns: []string{objectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.ObjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.ObjectTable,
			Columns: []string{objectuser.ObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.ObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   objectuser.ObjectTable,
			Columns: []string{objectuser.ObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ObjectUser{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{objectuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouuo.mutation.done = true
	return _node, nil
}
