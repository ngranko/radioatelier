// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/collection"
	"radioatelier/ent/object"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetLogin sets the "login" field.
func (uc *UserCreate) SetLogin(s string) *UserCreate {
	uc.mutation.SetLogin(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(s string) *UserCreate {
	uc.mutation.SetRole(s)
	return uc
}

// SetLastLogin sets the "last_login" field.
func (uc *UserCreate) SetLastLogin(t time.Time) *UserCreate {
	uc.mutation.SetLastLogin(t)
	return uc
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLogin(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLogin(*t)
	}
	return uc
}

// SetIsActive sets the "is_active" field.
func (uc *UserCreate) SetIsActive(b bool) *UserCreate {
	uc.mutation.SetIsActive(b)
	return uc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsActive(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsActive(*b)
	}
	return uc
}

// SetNotionID sets the "notion_id" field.
func (uc *UserCreate) SetNotionID(s string) *UserCreate {
	uc.mutation.SetNotionID(s)
	return uc
}

// SetNillableNotionID sets the "notion_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableNotionID(s *string) *UserCreate {
	if s != nil {
		uc.SetNotionID(*s)
	}
	return uc
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (uc *UserCreate) SetIsNotionSubject(b bool) *UserCreate {
	uc.mutation.SetIsNotionSubject(b)
	return uc
}

// SetNillableIsNotionSubject sets the "is_notion_subject" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsNotionSubject(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsNotionSubject(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(pu puuid.ID) *UserCreate {
	uc.mutation.SetID(pu)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(pu *puuid.ID) *UserCreate {
	if pu != nil {
		uc.SetID(*pu)
	}
	return uc
}

// AddCreatedObjectIDs adds the "created_objects" edge to the Object entity by IDs.
func (uc *UserCreate) AddCreatedObjectIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddCreatedObjectIDs(ids...)
	return uc
}

// AddCreatedObjects adds the "created_objects" edges to the Object entity.
func (uc *UserCreate) AddCreatedObjects(o ...*Object) *UserCreate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddCreatedObjectIDs(ids...)
}

// AddUpdatedObjectIDs adds the "updated_objects" edge to the Object entity by IDs.
func (uc *UserCreate) AddUpdatedObjectIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddUpdatedObjectIDs(ids...)
	return uc
}

// AddUpdatedObjects adds the "updated_objects" edges to the Object entity.
func (uc *UserCreate) AddUpdatedObjects(o ...*Object) *UserCreate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddUpdatedObjectIDs(ids...)
}

// AddDeletedObjectIDs adds the "deleted_objects" edge to the Object entity by IDs.
func (uc *UserCreate) AddDeletedObjectIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddDeletedObjectIDs(ids...)
	return uc
}

// AddDeletedObjects adds the "deleted_objects" edges to the Object entity.
func (uc *UserCreate) AddDeletedObjects(o ...*Object) *UserCreate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddDeletedObjectIDs(ids...)
}

// AddCreatedCollectionIDs adds the "created_collections" edge to the Collection entity by IDs.
func (uc *UserCreate) AddCreatedCollectionIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddCreatedCollectionIDs(ids...)
	return uc
}

// AddCreatedCollections adds the "created_collections" edges to the Collection entity.
func (uc *UserCreate) AddCreatedCollections(c ...*Collection) *UserCreate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCreatedCollectionIDs(ids...)
}

// AddUpdatedCollectionIDs adds the "updated_collections" edge to the Collection entity by IDs.
func (uc *UserCreate) AddUpdatedCollectionIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddUpdatedCollectionIDs(ids...)
	return uc
}

// AddUpdatedCollections adds the "updated_collections" edges to the Collection entity.
func (uc *UserCreate) AddUpdatedCollections(c ...*Collection) *UserCreate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddUpdatedCollectionIDs(ids...)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (uc *UserCreate) AddCollectionIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddCollectionIDs(ids...)
	return uc
}

// AddCollections adds the "collections" edges to the Collection entity.
func (uc *UserCreate) AddCollections(c ...*Collection) *UserCreate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCollectionIDs(ids...)
}

// AddObjectInfoIDs adds the "object_info" edge to the Object entity by IDs.
func (uc *UserCreate) AddObjectInfoIDs(ids ...puuid.ID) *UserCreate {
	uc.mutation.AddObjectInfoIDs(ids...)
	return uc
}

// AddObjectInfo adds the "object_info" edges to the Object entity.
func (uc *UserCreate) AddObjectInfo(o ...*Object) *UserCreate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddObjectInfoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.IsActive(); !ok {
		v := user.DefaultIsActive
		uc.mutation.SetIsActive(v)
	}
	if _, ok := uc.mutation.IsNotionSubject(); !ok {
		v := user.DefaultIsNotionSubject
		uc.mutation.SetIsNotionSubject(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`ent: missing required field "User.login"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if _, ok := uc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "User.is_active"`)}
	}
	if _, ok := uc.mutation.IsNotionSubject(); !ok {
		return &ValidationError{Name: "is_notion_subject", err: errors.New(`ent: missing required field "User.is_notion_subject"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*puuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		}
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.Login(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLogin,
		})
		_node.Login = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := uc.mutation.LastLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastLogin,
		})
		_node.LastLogin = &value
	}
	if value, ok := uc.mutation.IsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsActive,
		})
		_node.IsActive = value
	}
	if value, ok := uc.mutation.NotionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNotionID,
		})
		_node.NotionID = &value
	}
	if value, ok := uc.mutation.IsNotionSubject(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsNotionSubject,
		})
		_node.IsNotionSubject = value
	}
	if nodes := uc.mutation.CreatedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpdatedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DeletedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpdatedCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ObjectInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: uc.config, mutation: newObjectUserMutation(uc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetLogin sets the "login" field.
func (u *UserUpsert) SetLogin(v string) *UserUpsert {
	u.Set(user.FieldLogin, v)
	return u
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsert) UpdateLogin() *UserUpsert {
	u.SetExcluded(user.FieldLogin)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// SetRole sets the "role" field.
func (u *UserUpsert) SetRole(v string) *UserUpsert {
	u.Set(user.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsert) UpdateRole() *UserUpsert {
	u.SetExcluded(user.FieldRole)
	return u
}

// SetLastLogin sets the "last_login" field.
func (u *UserUpsert) SetLastLogin(v time.Time) *UserUpsert {
	u.Set(user.FieldLastLogin, v)
	return u
}

// UpdateLastLogin sets the "last_login" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLogin() *UserUpsert {
	u.SetExcluded(user.FieldLastLogin)
	return u
}

// ClearLastLogin clears the value of the "last_login" field.
func (u *UserUpsert) ClearLastLogin() *UserUpsert {
	u.SetNull(user.FieldLastLogin)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsert) SetIsActive(v bool) *UserUpsert {
	u.Set(user.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsActive() *UserUpsert {
	u.SetExcluded(user.FieldIsActive)
	return u
}

// SetNotionID sets the "notion_id" field.
func (u *UserUpsert) SetNotionID(v string) *UserUpsert {
	u.Set(user.FieldNotionID, v)
	return u
}

// UpdateNotionID sets the "notion_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateNotionID() *UserUpsert {
	u.SetExcluded(user.FieldNotionID)
	return u
}

// ClearNotionID clears the value of the "notion_id" field.
func (u *UserUpsert) ClearNotionID() *UserUpsert {
	u.SetNull(user.FieldNotionID)
	return u
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (u *UserUpsert) SetIsNotionSubject(v bool) *UserUpsert {
	u.Set(user.FieldIsNotionSubject, v)
	return u
}

// UpdateIsNotionSubject sets the "is_notion_subject" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsNotionSubject() *UserUpsert {
	u.SetExcluded(user.FieldIsNotionSubject)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.User.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetLogin sets the "login" field.
func (u *UserUpsertOne) SetLogin(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLogin()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertOne) SetRole(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRole() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetLastLogin sets the "last_login" field.
func (u *UserUpsertOne) SetLastLogin(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLogin(v)
	})
}

// UpdateLastLogin sets the "last_login" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLogin()
	})
}

// ClearLastLogin clears the value of the "last_login" field.
func (u *UserUpsertOne) ClearLastLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLogin()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsertOne) SetIsActive(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsActive() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActive()
	})
}

// SetNotionID sets the "notion_id" field.
func (u *UserUpsertOne) SetNotionID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNotionID(v)
	})
}

// UpdateNotionID sets the "notion_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNotionID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotionID()
	})
}

// ClearNotionID clears the value of the "notion_id" field.
func (u *UserUpsertOne) ClearNotionID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearNotionID()
	})
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (u *UserUpsertOne) SetIsNotionSubject(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsNotionSubject(v)
	})
}

// UpdateIsNotionSubject sets the "is_notion_subject" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsNotionSubject() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsNotionSubject()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id puuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) puuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetLogin sets the "login" field.
func (u *UserUpsertBulk) SetLogin(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLogin()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertBulk) SetRole(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRole() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetLastLogin sets the "last_login" field.
func (u *UserUpsertBulk) SetLastLogin(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLogin(v)
	})
}

// UpdateLastLogin sets the "last_login" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLogin()
	})
}

// ClearLastLogin clears the value of the "last_login" field.
func (u *UserUpsertBulk) ClearLastLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLogin()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsertBulk) SetIsActive(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsActive() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActive()
	})
}

// SetNotionID sets the "notion_id" field.
func (u *UserUpsertBulk) SetNotionID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNotionID(v)
	})
}

// UpdateNotionID sets the "notion_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNotionID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotionID()
	})
}

// ClearNotionID clears the value of the "notion_id" field.
func (u *UserUpsertBulk) ClearNotionID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearNotionID()
	})
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (u *UserUpsertBulk) SetIsNotionSubject(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsNotionSubject(v)
	})
}

// UpdateIsNotionSubject sets the "is_notion_subject" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsNotionSubject() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsNotionSubject()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
