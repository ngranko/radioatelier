// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/city"
	"radioatelier/ent/collection"
	"radioatelier/ent/object"
	"radioatelier/ent/objectuser"
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCity       = "City"
	TypeCollection = "Collection"
	TypeObject     = "Object"
	TypeObjectUser = "ObjectUser"
	TypeUser       = "User"
)

// CityMutation represents an operation that mutates the City nodes in the graph.
type CityMutation struct {
	config
	op             Op
	typ            string
	id             *puuid.ID
	name           *string
	country        *string
	clearedFields  map[string]struct{}
	objects        map[puuid.ID]struct{}
	removedobjects map[puuid.ID]struct{}
	clearedobjects bool
	done           bool
	oldValue       func(context.Context) (*City, error)
	predicates     []predicate.City
}

var _ ent.Mutation = (*CityMutation)(nil)

// cityOption allows management of the mutation configuration using functional options.
type cityOption func(*CityMutation)

// newCityMutation creates new mutation for the City entity.
func newCityMutation(c config, op Op, opts ...cityOption) *CityMutation {
	m := &CityMutation{
		config:        c,
		op:            op,
		typ:           TypeCity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCityID sets the ID field of the mutation.
func withCityID(id puuid.ID) cityOption {
	return func(m *CityMutation) {
		var (
			err   error
			once  sync.Once
			value *City
		)
		m.oldValue = func(ctx context.Context) (*City, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().City.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCity sets the old City of the mutation.
func withCity(node *City) cityOption {
	return func(m *CityMutation) {
		m.oldValue = func(context.Context) (*City, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of City entities.
func (m *CityMutation) SetID(id puuid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CityMutation) ID() (id puuid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CityMutation) IDs(ctx context.Context) ([]puuid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []puuid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().City.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CityMutation) ResetName() {
	m.name = nil
}

// SetCountry sets the "country" field.
func (m *CityMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *CityMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *CityMutation) ResetCountry() {
	m.country = nil
}

// AddObjectIDs adds the "objects" edge to the Object entity by ids.
func (m *CityMutation) AddObjectIDs(ids ...puuid.ID) {
	if m.objects == nil {
		m.objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.objects[ids[i]] = struct{}{}
	}
}

// ClearObjects clears the "objects" edge to the Object entity.
func (m *CityMutation) ClearObjects() {
	m.clearedobjects = true
}

// ObjectsCleared reports if the "objects" edge to the Object entity was cleared.
func (m *CityMutation) ObjectsCleared() bool {
	return m.clearedobjects
}

// RemoveObjectIDs removes the "objects" edge to the Object entity by IDs.
func (m *CityMutation) RemoveObjectIDs(ids ...puuid.ID) {
	if m.removedobjects == nil {
		m.removedobjects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.objects, ids[i])
		m.removedobjects[ids[i]] = struct{}{}
	}
}

// RemovedObjects returns the removed IDs of the "objects" edge to the Object entity.
func (m *CityMutation) RemovedObjectsIDs() (ids []puuid.ID) {
	for id := range m.removedobjects {
		ids = append(ids, id)
	}
	return
}

// ObjectsIDs returns the "objects" edge IDs in the mutation.
func (m *CityMutation) ObjectsIDs() (ids []puuid.ID) {
	for id := range m.objects {
		ids = append(ids, id)
	}
	return
}

// ResetObjects resets all changes to the "objects" edge.
func (m *CityMutation) ResetObjects() {
	m.objects = nil
	m.clearedobjects = false
	m.removedobjects = nil
}

// Where appends a list predicates to the CityMutation builder.
func (m *CityMutation) Where(ps ...predicate.City) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (City).
func (m *CityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CityMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, city.FieldName)
	}
	if m.country != nil {
		fields = append(fields, city.FieldCountry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case city.FieldName:
		return m.Name()
	case city.FieldCountry:
		return m.Country()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case city.FieldName:
		return m.OldName(ctx)
	case city.FieldCountry:
		return m.OldCountry(ctx)
	}
	return nil, fmt.Errorf("unknown City field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case city.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case city.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown City numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown City nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CityMutation) ResetField(name string) error {
	switch name {
	case city.FieldName:
		m.ResetName()
		return nil
	case city.FieldCountry:
		m.ResetCountry()
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.objects != nil {
		edges = append(edges, city.EdgeObjects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case city.EdgeObjects:
		ids := make([]ent.Value, 0, len(m.objects))
		for id := range m.objects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedobjects != nil {
		edges = append(edges, city.EdgeObjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case city.EdgeObjects:
		ids := make([]ent.Value, 0, len(m.removedobjects))
		for id := range m.removedobjects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedobjects {
		edges = append(edges, city.EdgeObjects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CityMutation) EdgeCleared(name string) bool {
	switch name {
	case city.EdgeObjects:
		return m.clearedobjects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown City unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CityMutation) ResetEdge(name string) error {
	switch name {
	case city.EdgeObjects:
		m.ResetObjects()
		return nil
	}
	return fmt.Errorf("unknown City edge %s", name)
}

// CollectionMutation represents an operation that mutates the Collection nodes in the graph.
type CollectionMutation struct {
	config
	op                Op
	typ               string
	id                *puuid.ID
	name              *string
	description       *string
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	created_by        *puuid.ID
	clearedcreated_by bool
	updated_by        *puuid.ID
	clearedupdated_by bool
	objects           map[puuid.ID]struct{}
	removedobjects    map[puuid.ID]struct{}
	clearedobjects    bool
	users             map[puuid.ID]struct{}
	removedusers      map[puuid.ID]struct{}
	clearedusers      bool
	done              bool
	oldValue          func(context.Context) (*Collection, error)
	predicates        []predicate.Collection
}

var _ ent.Mutation = (*CollectionMutation)(nil)

// collectionOption allows management of the mutation configuration using functional options.
type collectionOption func(*CollectionMutation)

// newCollectionMutation creates new mutation for the Collection entity.
func newCollectionMutation(c config, op Op, opts ...collectionOption) *CollectionMutation {
	m := &CollectionMutation{
		config:        c,
		op:            op,
		typ:           TypeCollection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollectionID sets the ID field of the mutation.
func withCollectionID(id puuid.ID) collectionOption {
	return func(m *CollectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Collection
		)
		m.oldValue = func(ctx context.Context) (*Collection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Collection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollection sets the old Collection of the mutation.
func withCollection(node *Collection) collectionOption {
	return func(m *CollectionMutation) {
		m.oldValue = func(context.Context) (*Collection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Collection entities.
func (m *CollectionMutation) SetID(id puuid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollectionMutation) ID() (id puuid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollectionMutation) IDs(ctx context.Context) ([]puuid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []puuid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Collection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CollectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CollectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CollectionMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CollectionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CollectionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CollectionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[collection.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CollectionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[collection.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CollectionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, collection.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *CollectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CollectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CollectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CollectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CollectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CollectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedByID sets the "created_by" edge to the User entity by id.
func (m *CollectionMutation) SetCreatedByID(id puuid.ID) {
	m.created_by = &id
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (m *CollectionMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the User entity was cleared.
func (m *CollectionMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// CreatedByID returns the "created_by" edge ID in the mutation.
func (m *CollectionMutation) CreatedByID() (id puuid.ID, exists bool) {
	if m.created_by != nil {
		return *m.created_by, true
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatedByID instead. It exists only for internal usage by the builders.
func (m *CollectionMutation) CreatedByIDs() (ids []puuid.ID) {
	if id := m.created_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *CollectionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by id.
func (m *CollectionMutation) SetUpdatedByID(id puuid.ID) {
	m.updated_by = &id
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (m *CollectionMutation) ClearUpdatedBy() {
	m.clearedupdated_by = true
}

// UpdatedByCleared reports if the "updated_by" edge to the User entity was cleared.
func (m *CollectionMutation) UpdatedByCleared() bool {
	return m.clearedupdated_by
}

// UpdatedByID returns the "updated_by" edge ID in the mutation.
func (m *CollectionMutation) UpdatedByID() (id puuid.ID, exists bool) {
	if m.updated_by != nil {
		return *m.updated_by, true
	}
	return
}

// UpdatedByIDs returns the "updated_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UpdatedByID instead. It exists only for internal usage by the builders.
func (m *CollectionMutation) UpdatedByIDs() (ids []puuid.ID) {
	if id := m.updated_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUpdatedBy resets all changes to the "updated_by" edge.
func (m *CollectionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.clearedupdated_by = false
}

// AddObjectIDs adds the "objects" edge to the Object entity by ids.
func (m *CollectionMutation) AddObjectIDs(ids ...puuid.ID) {
	if m.objects == nil {
		m.objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.objects[ids[i]] = struct{}{}
	}
}

// ClearObjects clears the "objects" edge to the Object entity.
func (m *CollectionMutation) ClearObjects() {
	m.clearedobjects = true
}

// ObjectsCleared reports if the "objects" edge to the Object entity was cleared.
func (m *CollectionMutation) ObjectsCleared() bool {
	return m.clearedobjects
}

// RemoveObjectIDs removes the "objects" edge to the Object entity by IDs.
func (m *CollectionMutation) RemoveObjectIDs(ids ...puuid.ID) {
	if m.removedobjects == nil {
		m.removedobjects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.objects, ids[i])
		m.removedobjects[ids[i]] = struct{}{}
	}
}

// RemovedObjects returns the removed IDs of the "objects" edge to the Object entity.
func (m *CollectionMutation) RemovedObjectsIDs() (ids []puuid.ID) {
	for id := range m.removedobjects {
		ids = append(ids, id)
	}
	return
}

// ObjectsIDs returns the "objects" edge IDs in the mutation.
func (m *CollectionMutation) ObjectsIDs() (ids []puuid.ID) {
	for id := range m.objects {
		ids = append(ids, id)
	}
	return
}

// ResetObjects resets all changes to the "objects" edge.
func (m *CollectionMutation) ResetObjects() {
	m.objects = nil
	m.clearedobjects = false
	m.removedobjects = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *CollectionMutation) AddUserIDs(ids ...puuid.ID) {
	if m.users == nil {
		m.users = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *CollectionMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *CollectionMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *CollectionMutation) RemoveUserIDs(ids ...puuid.ID) {
	if m.removedusers == nil {
		m.removedusers = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *CollectionMutation) RemovedUsersIDs() (ids []puuid.ID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *CollectionMutation) UsersIDs() (ids []puuid.ID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *CollectionMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the CollectionMutation builder.
func (m *CollectionMutation) Where(ps ...predicate.Collection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CollectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Collection).
func (m *CollectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollectionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, collection.FieldName)
	}
	if m.description != nil {
		fields = append(fields, collection.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, collection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, collection.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldName:
		return m.Name()
	case collection.FieldDescription:
		return m.Description()
	case collection.FieldCreatedAt:
		return m.CreatedAt()
	case collection.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collection.FieldName:
		return m.OldName(ctx)
	case collection.FieldDescription:
		return m.OldDescription(ctx)
	case collection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case collection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Collection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case collection.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case collection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case collection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Collection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollectionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(collection.FieldDescription) {
		fields = append(fields, collection.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollectionMutation) ClearField(name string) error {
	switch name {
	case collection.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Collection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollectionMutation) ResetField(name string) error {
	switch name {
	case collection.FieldName:
		m.ResetName()
		return nil
	case collection.FieldDescription:
		m.ResetDescription()
		return nil
	case collection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case collection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.created_by != nil {
		edges = append(edges, collection.EdgeCreatedBy)
	}
	if m.updated_by != nil {
		edges = append(edges, collection.EdgeUpdatedBy)
	}
	if m.objects != nil {
		edges = append(edges, collection.EdgeObjects)
	}
	if m.users != nil {
		edges = append(edges, collection.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeCreatedBy:
		if id := m.created_by; id != nil {
			return []ent.Value{*id}
		}
	case collection.EdgeUpdatedBy:
		if id := m.updated_by; id != nil {
			return []ent.Value{*id}
		}
	case collection.EdgeObjects:
		ids := make([]ent.Value, 0, len(m.objects))
		for id := range m.objects {
			ids = append(ids, id)
		}
		return ids
	case collection.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedobjects != nil {
		edges = append(edges, collection.EdgeObjects)
	}
	if m.removedusers != nil {
		edges = append(edges, collection.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeObjects:
		ids := make([]ent.Value, 0, len(m.removedobjects))
		for id := range m.removedobjects {
			ids = append(ids, id)
		}
		return ids
	case collection.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcreated_by {
		edges = append(edges, collection.EdgeCreatedBy)
	}
	if m.clearedupdated_by {
		edges = append(edges, collection.EdgeUpdatedBy)
	}
	if m.clearedobjects {
		edges = append(edges, collection.EdgeObjects)
	}
	if m.clearedusers {
		edges = append(edges, collection.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollectionMutation) EdgeCleared(name string) bool {
	switch name {
	case collection.EdgeCreatedBy:
		return m.clearedcreated_by
	case collection.EdgeUpdatedBy:
		return m.clearedupdated_by
	case collection.EdgeObjects:
		return m.clearedobjects
	case collection.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollectionMutation) ClearEdge(name string) error {
	switch name {
	case collection.EdgeCreatedBy:
		m.ClearCreatedBy()
		return nil
	case collection.EdgeUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Collection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollectionMutation) ResetEdge(name string) error {
	switch name {
	case collection.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	case collection.EdgeUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case collection.EdgeObjects:
		m.ResetObjects()
		return nil
	case collection.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Collection edge %s", name)
}

// ObjectMutation represents an operation that mutates the Object nodes in the graph.
type ObjectMutation struct {
	config
	op                 Op
	typ                string
	id                 *puuid.ID
	name               *string
	description        *string
	lat                *float64
	addlat             *float64
	lng                *float64
	addlng             *float64
	installed_period   *string
	is_removed         *bool
	removed_period     *string
	source             *string
	_type              *string
	tags               *string
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	last_sync          *time.Time
	notion_id          *string
	clearedFields      map[string]struct{}
	created_by         *puuid.ID
	clearedcreated_by  bool
	updated_by         *puuid.ID
	clearedupdated_by  bool
	deleted_by         *puuid.ID
	cleareddeleted_by  bool
	collections        map[puuid.ID]struct{}
	removedcollections map[puuid.ID]struct{}
	clearedcollections bool
	user_info          map[puuid.ID]struct{}
	removeduser_info   map[puuid.ID]struct{}
	cleareduser_info   bool
	city               *puuid.ID
	clearedcity        bool
	done               bool
	oldValue           func(context.Context) (*Object, error)
	predicates         []predicate.Object
}

var _ ent.Mutation = (*ObjectMutation)(nil)

// objectOption allows management of the mutation configuration using functional options.
type objectOption func(*ObjectMutation)

// newObjectMutation creates new mutation for the Object entity.
func newObjectMutation(c config, op Op, opts ...objectOption) *ObjectMutation {
	m := &ObjectMutation{
		config:        c,
		op:            op,
		typ:           TypeObject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withObjectID sets the ID field of the mutation.
func withObjectID(id puuid.ID) objectOption {
	return func(m *ObjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Object
		)
		m.oldValue = func(ctx context.Context) (*Object, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Object.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withObject sets the old Object of the mutation.
func withObject(node *Object) objectOption {
	return func(m *ObjectMutation) {
		m.oldValue = func(context.Context) (*Object, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ObjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ObjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Object entities.
func (m *ObjectMutation) SetID(id puuid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ObjectMutation) ID() (id puuid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ObjectMutation) IDs(ctx context.Context) ([]puuid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []puuid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Object.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ObjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ObjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ObjectMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ObjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ObjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ObjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[object.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ObjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[object.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ObjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, object.FieldDescription)
}

// SetLat sets the "lat" field.
func (m *ObjectMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *ObjectMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldLat(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *ObjectMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *ObjectMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ClearLat clears the value of the "lat" field.
func (m *ObjectMutation) ClearLat() {
	m.lat = nil
	m.addlat = nil
	m.clearedFields[object.FieldLat] = struct{}{}
}

// LatCleared returns if the "lat" field was cleared in this mutation.
func (m *ObjectMutation) LatCleared() bool {
	_, ok := m.clearedFields[object.FieldLat]
	return ok
}

// ResetLat resets all changes to the "lat" field.
func (m *ObjectMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
	delete(m.clearedFields, object.FieldLat)
}

// SetLng sets the "lng" field.
func (m *ObjectMutation) SetLng(f float64) {
	m.lng = &f
	m.addlng = nil
}

// Lng returns the value of the "lng" field in the mutation.
func (m *ObjectMutation) Lng() (r float64, exists bool) {
	v := m.lng
	if v == nil {
		return
	}
	return *v, true
}

// OldLng returns the old "lng" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldLng(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLng: %w", err)
	}
	return oldValue.Lng, nil
}

// AddLng adds f to the "lng" field.
func (m *ObjectMutation) AddLng(f float64) {
	if m.addlng != nil {
		*m.addlng += f
	} else {
		m.addlng = &f
	}
}

// AddedLng returns the value that was added to the "lng" field in this mutation.
func (m *ObjectMutation) AddedLng() (r float64, exists bool) {
	v := m.addlng
	if v == nil {
		return
	}
	return *v, true
}

// ClearLng clears the value of the "lng" field.
func (m *ObjectMutation) ClearLng() {
	m.lng = nil
	m.addlng = nil
	m.clearedFields[object.FieldLng] = struct{}{}
}

// LngCleared returns if the "lng" field was cleared in this mutation.
func (m *ObjectMutation) LngCleared() bool {
	_, ok := m.clearedFields[object.FieldLng]
	return ok
}

// ResetLng resets all changes to the "lng" field.
func (m *ObjectMutation) ResetLng() {
	m.lng = nil
	m.addlng = nil
	delete(m.clearedFields, object.FieldLng)
}

// SetInstalledPeriod sets the "installed_period" field.
func (m *ObjectMutation) SetInstalledPeriod(s string) {
	m.installed_period = &s
}

// InstalledPeriod returns the value of the "installed_period" field in the mutation.
func (m *ObjectMutation) InstalledPeriod() (r string, exists bool) {
	v := m.installed_period
	if v == nil {
		return
	}
	return *v, true
}

// OldInstalledPeriod returns the old "installed_period" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldInstalledPeriod(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstalledPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstalledPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstalledPeriod: %w", err)
	}
	return oldValue.InstalledPeriod, nil
}

// ClearInstalledPeriod clears the value of the "installed_period" field.
func (m *ObjectMutation) ClearInstalledPeriod() {
	m.installed_period = nil
	m.clearedFields[object.FieldInstalledPeriod] = struct{}{}
}

// InstalledPeriodCleared returns if the "installed_period" field was cleared in this mutation.
func (m *ObjectMutation) InstalledPeriodCleared() bool {
	_, ok := m.clearedFields[object.FieldInstalledPeriod]
	return ok
}

// ResetInstalledPeriod resets all changes to the "installed_period" field.
func (m *ObjectMutation) ResetInstalledPeriod() {
	m.installed_period = nil
	delete(m.clearedFields, object.FieldInstalledPeriod)
}

// SetIsRemoved sets the "is_removed" field.
func (m *ObjectMutation) SetIsRemoved(b bool) {
	m.is_removed = &b
}

// IsRemoved returns the value of the "is_removed" field in the mutation.
func (m *ObjectMutation) IsRemoved() (r bool, exists bool) {
	v := m.is_removed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRemoved returns the old "is_removed" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldIsRemoved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRemoved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRemoved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRemoved: %w", err)
	}
	return oldValue.IsRemoved, nil
}

// ResetIsRemoved resets all changes to the "is_removed" field.
func (m *ObjectMutation) ResetIsRemoved() {
	m.is_removed = nil
}

// SetRemovedPeriod sets the "removed_period" field.
func (m *ObjectMutation) SetRemovedPeriod(s string) {
	m.removed_period = &s
}

// RemovedPeriod returns the value of the "removed_period" field in the mutation.
func (m *ObjectMutation) RemovedPeriod() (r string, exists bool) {
	v := m.removed_period
	if v == nil {
		return
	}
	return *v, true
}

// OldRemovedPeriod returns the old "removed_period" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldRemovedPeriod(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemovedPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemovedPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemovedPeriod: %w", err)
	}
	return oldValue.RemovedPeriod, nil
}

// ClearRemovedPeriod clears the value of the "removed_period" field.
func (m *ObjectMutation) ClearRemovedPeriod() {
	m.removed_period = nil
	m.clearedFields[object.FieldRemovedPeriod] = struct{}{}
}

// RemovedPeriodCleared returns if the "removed_period" field was cleared in this mutation.
func (m *ObjectMutation) RemovedPeriodCleared() bool {
	_, ok := m.clearedFields[object.FieldRemovedPeriod]
	return ok
}

// ResetRemovedPeriod resets all changes to the "removed_period" field.
func (m *ObjectMutation) ResetRemovedPeriod() {
	m.removed_period = nil
	delete(m.clearedFields, object.FieldRemovedPeriod)
}

// SetSource sets the "source" field.
func (m *ObjectMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *ObjectMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldSource(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ClearSource clears the value of the "source" field.
func (m *ObjectMutation) ClearSource() {
	m.source = nil
	m.clearedFields[object.FieldSource] = struct{}{}
}

// SourceCleared returns if the "source" field was cleared in this mutation.
func (m *ObjectMutation) SourceCleared() bool {
	_, ok := m.clearedFields[object.FieldSource]
	return ok
}

// ResetSource resets all changes to the "source" field.
func (m *ObjectMutation) ResetSource() {
	m.source = nil
	delete(m.clearedFields, object.FieldSource)
}

// SetType sets the "type" field.
func (m *ObjectMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ObjectMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ObjectMutation) ResetType() {
	m._type = nil
}

// SetTags sets the "tags" field.
func (m *ObjectMutation) SetTags(s string) {
	m.tags = &s
}

// Tags returns the value of the "tags" field in the mutation.
func (m *ObjectMutation) Tags() (r string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldTags(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// ResetTags resets all changes to the "tags" field.
func (m *ObjectMutation) ResetTags() {
	m.tags = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ObjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ObjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ObjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ObjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ObjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ObjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ObjectMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ObjectMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ObjectMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[object.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ObjectMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[object.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ObjectMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, object.FieldDeletedAt)
}

// SetLastSync sets the "last_sync" field.
func (m *ObjectMutation) SetLastSync(t time.Time) {
	m.last_sync = &t
}

// LastSync returns the value of the "last_sync" field in the mutation.
func (m *ObjectMutation) LastSync() (r time.Time, exists bool) {
	v := m.last_sync
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSync returns the old "last_sync" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldLastSync(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSync is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSync requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSync: %w", err)
	}
	return oldValue.LastSync, nil
}

// ClearLastSync clears the value of the "last_sync" field.
func (m *ObjectMutation) ClearLastSync() {
	m.last_sync = nil
	m.clearedFields[object.FieldLastSync] = struct{}{}
}

// LastSyncCleared returns if the "last_sync" field was cleared in this mutation.
func (m *ObjectMutation) LastSyncCleared() bool {
	_, ok := m.clearedFields[object.FieldLastSync]
	return ok
}

// ResetLastSync resets all changes to the "last_sync" field.
func (m *ObjectMutation) ResetLastSync() {
	m.last_sync = nil
	delete(m.clearedFields, object.FieldLastSync)
}

// SetNotionID sets the "notion_id" field.
func (m *ObjectMutation) SetNotionID(s string) {
	m.notion_id = &s
}

// NotionID returns the value of the "notion_id" field in the mutation.
func (m *ObjectMutation) NotionID() (r string, exists bool) {
	v := m.notion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNotionID returns the old "notion_id" field's value of the Object entity.
// If the Object object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectMutation) OldNotionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotionID: %w", err)
	}
	return oldValue.NotionID, nil
}

// ClearNotionID clears the value of the "notion_id" field.
func (m *ObjectMutation) ClearNotionID() {
	m.notion_id = nil
	m.clearedFields[object.FieldNotionID] = struct{}{}
}

// NotionIDCleared returns if the "notion_id" field was cleared in this mutation.
func (m *ObjectMutation) NotionIDCleared() bool {
	_, ok := m.clearedFields[object.FieldNotionID]
	return ok
}

// ResetNotionID resets all changes to the "notion_id" field.
func (m *ObjectMutation) ResetNotionID() {
	m.notion_id = nil
	delete(m.clearedFields, object.FieldNotionID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by id.
func (m *ObjectMutation) SetCreatedByID(id puuid.ID) {
	m.created_by = &id
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (m *ObjectMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the User entity was cleared.
func (m *ObjectMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// CreatedByID returns the "created_by" edge ID in the mutation.
func (m *ObjectMutation) CreatedByID() (id puuid.ID, exists bool) {
	if m.created_by != nil {
		return *m.created_by, true
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatedByID instead. It exists only for internal usage by the builders.
func (m *ObjectMutation) CreatedByIDs() (ids []puuid.ID) {
	if id := m.created_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *ObjectMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by id.
func (m *ObjectMutation) SetUpdatedByID(id puuid.ID) {
	m.updated_by = &id
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (m *ObjectMutation) ClearUpdatedBy() {
	m.clearedupdated_by = true
}

// UpdatedByCleared reports if the "updated_by" edge to the User entity was cleared.
func (m *ObjectMutation) UpdatedByCleared() bool {
	return m.clearedupdated_by
}

// UpdatedByID returns the "updated_by" edge ID in the mutation.
func (m *ObjectMutation) UpdatedByID() (id puuid.ID, exists bool) {
	if m.updated_by != nil {
		return *m.updated_by, true
	}
	return
}

// UpdatedByIDs returns the "updated_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UpdatedByID instead. It exists only for internal usage by the builders.
func (m *ObjectMutation) UpdatedByIDs() (ids []puuid.ID) {
	if id := m.updated_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUpdatedBy resets all changes to the "updated_by" edge.
func (m *ObjectMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.clearedupdated_by = false
}

// SetDeletedByID sets the "deleted_by" edge to the User entity by id.
func (m *ObjectMutation) SetDeletedByID(id puuid.ID) {
	m.deleted_by = &id
}

// ClearDeletedBy clears the "deleted_by" edge to the User entity.
func (m *ObjectMutation) ClearDeletedBy() {
	m.cleareddeleted_by = true
}

// DeletedByCleared reports if the "deleted_by" edge to the User entity was cleared.
func (m *ObjectMutation) DeletedByCleared() bool {
	return m.cleareddeleted_by
}

// DeletedByID returns the "deleted_by" edge ID in the mutation.
func (m *ObjectMutation) DeletedByID() (id puuid.ID, exists bool) {
	if m.deleted_by != nil {
		return *m.deleted_by, true
	}
	return
}

// DeletedByIDs returns the "deleted_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeletedByID instead. It exists only for internal usage by the builders.
func (m *ObjectMutation) DeletedByIDs() (ids []puuid.ID) {
	if id := m.deleted_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDeletedBy resets all changes to the "deleted_by" edge.
func (m *ObjectMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.cleareddeleted_by = false
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by ids.
func (m *ObjectMutation) AddCollectionIDs(ids ...puuid.ID) {
	if m.collections == nil {
		m.collections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.collections[ids[i]] = struct{}{}
	}
}

// ClearCollections clears the "collections" edge to the Collection entity.
func (m *ObjectMutation) ClearCollections() {
	m.clearedcollections = true
}

// CollectionsCleared reports if the "collections" edge to the Collection entity was cleared.
func (m *ObjectMutation) CollectionsCleared() bool {
	return m.clearedcollections
}

// RemoveCollectionIDs removes the "collections" edge to the Collection entity by IDs.
func (m *ObjectMutation) RemoveCollectionIDs(ids ...puuid.ID) {
	if m.removedcollections == nil {
		m.removedcollections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.collections, ids[i])
		m.removedcollections[ids[i]] = struct{}{}
	}
}

// RemovedCollections returns the removed IDs of the "collections" edge to the Collection entity.
func (m *ObjectMutation) RemovedCollectionsIDs() (ids []puuid.ID) {
	for id := range m.removedcollections {
		ids = append(ids, id)
	}
	return
}

// CollectionsIDs returns the "collections" edge IDs in the mutation.
func (m *ObjectMutation) CollectionsIDs() (ids []puuid.ID) {
	for id := range m.collections {
		ids = append(ids, id)
	}
	return
}

// ResetCollections resets all changes to the "collections" edge.
func (m *ObjectMutation) ResetCollections() {
	m.collections = nil
	m.clearedcollections = false
	m.removedcollections = nil
}

// AddUserInfoIDs adds the "user_info" edge to the User entity by ids.
func (m *ObjectMutation) AddUserInfoIDs(ids ...puuid.ID) {
	if m.user_info == nil {
		m.user_info = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.user_info[ids[i]] = struct{}{}
	}
}

// ClearUserInfo clears the "user_info" edge to the User entity.
func (m *ObjectMutation) ClearUserInfo() {
	m.cleareduser_info = true
}

// UserInfoCleared reports if the "user_info" edge to the User entity was cleared.
func (m *ObjectMutation) UserInfoCleared() bool {
	return m.cleareduser_info
}

// RemoveUserInfoIDs removes the "user_info" edge to the User entity by IDs.
func (m *ObjectMutation) RemoveUserInfoIDs(ids ...puuid.ID) {
	if m.removeduser_info == nil {
		m.removeduser_info = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.user_info, ids[i])
		m.removeduser_info[ids[i]] = struct{}{}
	}
}

// RemovedUserInfo returns the removed IDs of the "user_info" edge to the User entity.
func (m *ObjectMutation) RemovedUserInfoIDs() (ids []puuid.ID) {
	for id := range m.removeduser_info {
		ids = append(ids, id)
	}
	return
}

// UserInfoIDs returns the "user_info" edge IDs in the mutation.
func (m *ObjectMutation) UserInfoIDs() (ids []puuid.ID) {
	for id := range m.user_info {
		ids = append(ids, id)
	}
	return
}

// ResetUserInfo resets all changes to the "user_info" edge.
func (m *ObjectMutation) ResetUserInfo() {
	m.user_info = nil
	m.cleareduser_info = false
	m.removeduser_info = nil
}

// SetCityID sets the "city" edge to the City entity by id.
func (m *ObjectMutation) SetCityID(id puuid.ID) {
	m.city = &id
}

// ClearCity clears the "city" edge to the City entity.
func (m *ObjectMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *ObjectMutation) CityCleared() bool {
	return m.clearedcity
}

// CityID returns the "city" edge ID in the mutation.
func (m *ObjectMutation) CityID() (id puuid.ID, exists bool) {
	if m.city != nil {
		return *m.city, true
	}
	return
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *ObjectMutation) CityIDs() (ids []puuid.ID) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *ObjectMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// Where appends a list predicates to the ObjectMutation builder.
func (m *ObjectMutation) Where(ps ...predicate.Object) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ObjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Object).
func (m *ObjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ObjectMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.name != nil {
		fields = append(fields, object.FieldName)
	}
	if m.description != nil {
		fields = append(fields, object.FieldDescription)
	}
	if m.lat != nil {
		fields = append(fields, object.FieldLat)
	}
	if m.lng != nil {
		fields = append(fields, object.FieldLng)
	}
	if m.installed_period != nil {
		fields = append(fields, object.FieldInstalledPeriod)
	}
	if m.is_removed != nil {
		fields = append(fields, object.FieldIsRemoved)
	}
	if m.removed_period != nil {
		fields = append(fields, object.FieldRemovedPeriod)
	}
	if m.source != nil {
		fields = append(fields, object.FieldSource)
	}
	if m._type != nil {
		fields = append(fields, object.FieldType)
	}
	if m.tags != nil {
		fields = append(fields, object.FieldTags)
	}
	if m.created_at != nil {
		fields = append(fields, object.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, object.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, object.FieldDeletedAt)
	}
	if m.last_sync != nil {
		fields = append(fields, object.FieldLastSync)
	}
	if m.notion_id != nil {
		fields = append(fields, object.FieldNotionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ObjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case object.FieldName:
		return m.Name()
	case object.FieldDescription:
		return m.Description()
	case object.FieldLat:
		return m.Lat()
	case object.FieldLng:
		return m.Lng()
	case object.FieldInstalledPeriod:
		return m.InstalledPeriod()
	case object.FieldIsRemoved:
		return m.IsRemoved()
	case object.FieldRemovedPeriod:
		return m.RemovedPeriod()
	case object.FieldSource:
		return m.Source()
	case object.FieldType:
		return m.GetType()
	case object.FieldTags:
		return m.Tags()
	case object.FieldCreatedAt:
		return m.CreatedAt()
	case object.FieldUpdatedAt:
		return m.UpdatedAt()
	case object.FieldDeletedAt:
		return m.DeletedAt()
	case object.FieldLastSync:
		return m.LastSync()
	case object.FieldNotionID:
		return m.NotionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ObjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case object.FieldName:
		return m.OldName(ctx)
	case object.FieldDescription:
		return m.OldDescription(ctx)
	case object.FieldLat:
		return m.OldLat(ctx)
	case object.FieldLng:
		return m.OldLng(ctx)
	case object.FieldInstalledPeriod:
		return m.OldInstalledPeriod(ctx)
	case object.FieldIsRemoved:
		return m.OldIsRemoved(ctx)
	case object.FieldRemovedPeriod:
		return m.OldRemovedPeriod(ctx)
	case object.FieldSource:
		return m.OldSource(ctx)
	case object.FieldType:
		return m.OldType(ctx)
	case object.FieldTags:
		return m.OldTags(ctx)
	case object.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case object.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case object.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case object.FieldLastSync:
		return m.OldLastSync(ctx)
	case object.FieldNotionID:
		return m.OldNotionID(ctx)
	}
	return nil, fmt.Errorf("unknown Object field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ObjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case object.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case object.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case object.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case object.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLng(v)
		return nil
	case object.FieldInstalledPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstalledPeriod(v)
		return nil
	case object.FieldIsRemoved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRemoved(v)
		return nil
	case object.FieldRemovedPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemovedPeriod(v)
		return nil
	case object.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case object.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case object.FieldTags:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case object.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case object.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case object.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case object.FieldLastSync:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSync(v)
		return nil
	case object.FieldNotionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotionID(v)
		return nil
	}
	return fmt.Errorf("unknown Object field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ObjectMutation) AddedFields() []string {
	var fields []string
	if m.addlat != nil {
		fields = append(fields, object.FieldLat)
	}
	if m.addlng != nil {
		fields = append(fields, object.FieldLng)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ObjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case object.FieldLat:
		return m.AddedLat()
	case object.FieldLng:
		return m.AddedLng()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ObjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case object.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	case object.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLng(v)
		return nil
	}
	return fmt.Errorf("unknown Object numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ObjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(object.FieldDescription) {
		fields = append(fields, object.FieldDescription)
	}
	if m.FieldCleared(object.FieldLat) {
		fields = append(fields, object.FieldLat)
	}
	if m.FieldCleared(object.FieldLng) {
		fields = append(fields, object.FieldLng)
	}
	if m.FieldCleared(object.FieldInstalledPeriod) {
		fields = append(fields, object.FieldInstalledPeriod)
	}
	if m.FieldCleared(object.FieldRemovedPeriod) {
		fields = append(fields, object.FieldRemovedPeriod)
	}
	if m.FieldCleared(object.FieldSource) {
		fields = append(fields, object.FieldSource)
	}
	if m.FieldCleared(object.FieldDeletedAt) {
		fields = append(fields, object.FieldDeletedAt)
	}
	if m.FieldCleared(object.FieldLastSync) {
		fields = append(fields, object.FieldLastSync)
	}
	if m.FieldCleared(object.FieldNotionID) {
		fields = append(fields, object.FieldNotionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ObjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ObjectMutation) ClearField(name string) error {
	switch name {
	case object.FieldDescription:
		m.ClearDescription()
		return nil
	case object.FieldLat:
		m.ClearLat()
		return nil
	case object.FieldLng:
		m.ClearLng()
		return nil
	case object.FieldInstalledPeriod:
		m.ClearInstalledPeriod()
		return nil
	case object.FieldRemovedPeriod:
		m.ClearRemovedPeriod()
		return nil
	case object.FieldSource:
		m.ClearSource()
		return nil
	case object.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case object.FieldLastSync:
		m.ClearLastSync()
		return nil
	case object.FieldNotionID:
		m.ClearNotionID()
		return nil
	}
	return fmt.Errorf("unknown Object nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ObjectMutation) ResetField(name string) error {
	switch name {
	case object.FieldName:
		m.ResetName()
		return nil
	case object.FieldDescription:
		m.ResetDescription()
		return nil
	case object.FieldLat:
		m.ResetLat()
		return nil
	case object.FieldLng:
		m.ResetLng()
		return nil
	case object.FieldInstalledPeriod:
		m.ResetInstalledPeriod()
		return nil
	case object.FieldIsRemoved:
		m.ResetIsRemoved()
		return nil
	case object.FieldRemovedPeriod:
		m.ResetRemovedPeriod()
		return nil
	case object.FieldSource:
		m.ResetSource()
		return nil
	case object.FieldType:
		m.ResetType()
		return nil
	case object.FieldTags:
		m.ResetTags()
		return nil
	case object.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case object.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case object.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case object.FieldLastSync:
		m.ResetLastSync()
		return nil
	case object.FieldNotionID:
		m.ResetNotionID()
		return nil
	}
	return fmt.Errorf("unknown Object field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ObjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.created_by != nil {
		edges = append(edges, object.EdgeCreatedBy)
	}
	if m.updated_by != nil {
		edges = append(edges, object.EdgeUpdatedBy)
	}
	if m.deleted_by != nil {
		edges = append(edges, object.EdgeDeletedBy)
	}
	if m.collections != nil {
		edges = append(edges, object.EdgeCollections)
	}
	if m.user_info != nil {
		edges = append(edges, object.EdgeUserInfo)
	}
	if m.city != nil {
		edges = append(edges, object.EdgeCity)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ObjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case object.EdgeCreatedBy:
		if id := m.created_by; id != nil {
			return []ent.Value{*id}
		}
	case object.EdgeUpdatedBy:
		if id := m.updated_by; id != nil {
			return []ent.Value{*id}
		}
	case object.EdgeDeletedBy:
		if id := m.deleted_by; id != nil {
			return []ent.Value{*id}
		}
	case object.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.collections))
		for id := range m.collections {
			ids = append(ids, id)
		}
		return ids
	case object.EdgeUserInfo:
		ids := make([]ent.Value, 0, len(m.user_info))
		for id := range m.user_info {
			ids = append(ids, id)
		}
		return ids
	case object.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ObjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedcollections != nil {
		edges = append(edges, object.EdgeCollections)
	}
	if m.removeduser_info != nil {
		edges = append(edges, object.EdgeUserInfo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ObjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case object.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.removedcollections))
		for id := range m.removedcollections {
			ids = append(ids, id)
		}
		return ids
	case object.EdgeUserInfo:
		ids := make([]ent.Value, 0, len(m.removeduser_info))
		for id := range m.removeduser_info {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ObjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedcreated_by {
		edges = append(edges, object.EdgeCreatedBy)
	}
	if m.clearedupdated_by {
		edges = append(edges, object.EdgeUpdatedBy)
	}
	if m.cleareddeleted_by {
		edges = append(edges, object.EdgeDeletedBy)
	}
	if m.clearedcollections {
		edges = append(edges, object.EdgeCollections)
	}
	if m.cleareduser_info {
		edges = append(edges, object.EdgeUserInfo)
	}
	if m.clearedcity {
		edges = append(edges, object.EdgeCity)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ObjectMutation) EdgeCleared(name string) bool {
	switch name {
	case object.EdgeCreatedBy:
		return m.clearedcreated_by
	case object.EdgeUpdatedBy:
		return m.clearedupdated_by
	case object.EdgeDeletedBy:
		return m.cleareddeleted_by
	case object.EdgeCollections:
		return m.clearedcollections
	case object.EdgeUserInfo:
		return m.cleareduser_info
	case object.EdgeCity:
		return m.clearedcity
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ObjectMutation) ClearEdge(name string) error {
	switch name {
	case object.EdgeCreatedBy:
		m.ClearCreatedBy()
		return nil
	case object.EdgeUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case object.EdgeDeletedBy:
		m.ClearDeletedBy()
		return nil
	case object.EdgeCity:
		m.ClearCity()
		return nil
	}
	return fmt.Errorf("unknown Object unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ObjectMutation) ResetEdge(name string) error {
	switch name {
	case object.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	case object.EdgeUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case object.EdgeDeletedBy:
		m.ResetDeletedBy()
		return nil
	case object.EdgeCollections:
		m.ResetCollections()
		return nil
	case object.EdgeUserInfo:
		m.ResetUserInfo()
		return nil
	case object.EdgeCity:
		m.ResetCity()
		return nil
	}
	return fmt.Errorf("unknown Object edge %s", name)
}

// ObjectUserMutation represents an operation that mutates the ObjectUser nodes in the graph.
type ObjectUserMutation struct {
	config
	op            Op
	typ           string
	is_visited    *bool
	last_visit    *time.Time
	clearedFields map[string]struct{}
	user          *puuid.ID
	cleareduser   bool
	object        *puuid.ID
	clearedobject bool
	done          bool
	oldValue      func(context.Context) (*ObjectUser, error)
	predicates    []predicate.ObjectUser
}

var _ ent.Mutation = (*ObjectUserMutation)(nil)

// objectuserOption allows management of the mutation configuration using functional options.
type objectuserOption func(*ObjectUserMutation)

// newObjectUserMutation creates new mutation for the ObjectUser entity.
func newObjectUserMutation(c config, op Op, opts ...objectuserOption) *ObjectUserMutation {
	m := &ObjectUserMutation{
		config:        c,
		op:            op,
		typ:           TypeObjectUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ObjectUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ObjectUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *ObjectUserMutation) SetUserID(pu puuid.ID) {
	m.user = &pu
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ObjectUserMutation) UserID() (r puuid.ID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ObjectUserMutation) ResetUserID() {
	m.user = nil
}

// SetObjectID sets the "object_id" field.
func (m *ObjectUserMutation) SetObjectID(pu puuid.ID) {
	m.object = &pu
}

// ObjectID returns the value of the "object_id" field in the mutation.
func (m *ObjectUserMutation) ObjectID() (r puuid.ID, exists bool) {
	v := m.object
	if v == nil {
		return
	}
	return *v, true
}

// ResetObjectID resets all changes to the "object_id" field.
func (m *ObjectUserMutation) ResetObjectID() {
	m.object = nil
}

// SetIsVisited sets the "is_visited" field.
func (m *ObjectUserMutation) SetIsVisited(b bool) {
	m.is_visited = &b
}

// IsVisited returns the value of the "is_visited" field in the mutation.
func (m *ObjectUserMutation) IsVisited() (r bool, exists bool) {
	v := m.is_visited
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsVisited resets all changes to the "is_visited" field.
func (m *ObjectUserMutation) ResetIsVisited() {
	m.is_visited = nil
}

// SetLastVisit sets the "last_visit" field.
func (m *ObjectUserMutation) SetLastVisit(t time.Time) {
	m.last_visit = &t
}

// LastVisit returns the value of the "last_visit" field in the mutation.
func (m *ObjectUserMutation) LastVisit() (r time.Time, exists bool) {
	v := m.last_visit
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastVisit clears the value of the "last_visit" field.
func (m *ObjectUserMutation) ClearLastVisit() {
	m.last_visit = nil
	m.clearedFields[objectuser.FieldLastVisit] = struct{}{}
}

// LastVisitCleared returns if the "last_visit" field was cleared in this mutation.
func (m *ObjectUserMutation) LastVisitCleared() bool {
	_, ok := m.clearedFields[objectuser.FieldLastVisit]
	return ok
}

// ResetLastVisit resets all changes to the "last_visit" field.
func (m *ObjectUserMutation) ResetLastVisit() {
	m.last_visit = nil
	delete(m.clearedFields, objectuser.FieldLastVisit)
}

// ClearUser clears the "user" edge to the User entity.
func (m *ObjectUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ObjectUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ObjectUserMutation) UserIDs() (ids []puuid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ObjectUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearObject clears the "object" edge to the Object entity.
func (m *ObjectUserMutation) ClearObject() {
	m.clearedobject = true
}

// ObjectCleared reports if the "object" edge to the Object entity was cleared.
func (m *ObjectUserMutation) ObjectCleared() bool {
	return m.clearedobject
}

// ObjectIDs returns the "object" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ObjectID instead. It exists only for internal usage by the builders.
func (m *ObjectUserMutation) ObjectIDs() (ids []puuid.ID) {
	if id := m.object; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetObject resets all changes to the "object" edge.
func (m *ObjectUserMutation) ResetObject() {
	m.object = nil
	m.clearedobject = false
}

// Where appends a list predicates to the ObjectUserMutation builder.
func (m *ObjectUserMutation) Where(ps ...predicate.ObjectUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ObjectUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ObjectUser).
func (m *ObjectUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ObjectUserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user != nil {
		fields = append(fields, objectuser.FieldUserID)
	}
	if m.object != nil {
		fields = append(fields, objectuser.FieldObjectID)
	}
	if m.is_visited != nil {
		fields = append(fields, objectuser.FieldIsVisited)
	}
	if m.last_visit != nil {
		fields = append(fields, objectuser.FieldLastVisit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ObjectUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case objectuser.FieldUserID:
		return m.UserID()
	case objectuser.FieldObjectID:
		return m.ObjectID()
	case objectuser.FieldIsVisited:
		return m.IsVisited()
	case objectuser.FieldLastVisit:
		return m.LastVisit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ObjectUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema ObjectUser does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ObjectUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case objectuser.FieldUserID:
		v, ok := value.(puuid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case objectuser.FieldObjectID:
		v, ok := value.(puuid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	case objectuser.FieldIsVisited:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsVisited(v)
		return nil
	case objectuser.FieldLastVisit:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastVisit(v)
		return nil
	}
	return fmt.Errorf("unknown ObjectUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ObjectUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ObjectUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ObjectUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ObjectUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ObjectUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(objectuser.FieldLastVisit) {
		fields = append(fields, objectuser.FieldLastVisit)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ObjectUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ObjectUserMutation) ClearField(name string) error {
	switch name {
	case objectuser.FieldLastVisit:
		m.ClearLastVisit()
		return nil
	}
	return fmt.Errorf("unknown ObjectUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ObjectUserMutation) ResetField(name string) error {
	switch name {
	case objectuser.FieldUserID:
		m.ResetUserID()
		return nil
	case objectuser.FieldObjectID:
		m.ResetObjectID()
		return nil
	case objectuser.FieldIsVisited:
		m.ResetIsVisited()
		return nil
	case objectuser.FieldLastVisit:
		m.ResetLastVisit()
		return nil
	}
	return fmt.Errorf("unknown ObjectUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ObjectUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, objectuser.EdgeUser)
	}
	if m.object != nil {
		edges = append(edges, objectuser.EdgeObject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ObjectUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case objectuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case objectuser.EdgeObject:
		if id := m.object; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ObjectUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ObjectUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ObjectUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, objectuser.EdgeUser)
	}
	if m.clearedobject {
		edges = append(edges, objectuser.EdgeObject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ObjectUserMutation) EdgeCleared(name string) bool {
	switch name {
	case objectuser.EdgeUser:
		return m.cleareduser
	case objectuser.EdgeObject:
		return m.clearedobject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ObjectUserMutation) ClearEdge(name string) error {
	switch name {
	case objectuser.EdgeUser:
		m.ClearUser()
		return nil
	case objectuser.EdgeObject:
		m.ClearObject()
		return nil
	}
	return fmt.Errorf("unknown ObjectUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ObjectUserMutation) ResetEdge(name string) error {
	switch name {
	case objectuser.EdgeUser:
		m.ResetUser()
		return nil
	case objectuser.EdgeObject:
		m.ResetObject()
		return nil
	}
	return fmt.Errorf("unknown ObjectUser edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *puuid.ID
	name                       *string
	email                      *string
	login                      *string
	password                   *string
	role                       *string
	last_login                 *time.Time
	is_active                  *bool
	notion_id                  *string
	is_notion_subject          *bool
	clearedFields              map[string]struct{}
	created_objects            map[puuid.ID]struct{}
	removedcreated_objects     map[puuid.ID]struct{}
	clearedcreated_objects     bool
	updated_objects            map[puuid.ID]struct{}
	removedupdated_objects     map[puuid.ID]struct{}
	clearedupdated_objects     bool
	deleted_objects            map[puuid.ID]struct{}
	removeddeleted_objects     map[puuid.ID]struct{}
	cleareddeleted_objects     bool
	created_collections        map[puuid.ID]struct{}
	removedcreated_collections map[puuid.ID]struct{}
	clearedcreated_collections bool
	updated_collections        map[puuid.ID]struct{}
	removedupdated_collections map[puuid.ID]struct{}
	clearedupdated_collections bool
	collections                map[puuid.ID]struct{}
	removedcollections         map[puuid.ID]struct{}
	clearedcollections         bool
	object_info                map[puuid.ID]struct{}
	removedobject_info         map[puuid.ID]struct{}
	clearedobject_info         bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id puuid.ID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id puuid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id puuid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]puuid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []puuid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetLastLogin sets the "last_login" field.
func (m *UserMutation) SetLastLogin(t time.Time) {
	m.last_login = &t
}

// LastLogin returns the value of the "last_login" field in the mutation.
func (m *UserMutation) LastLogin() (r time.Time, exists bool) {
	v := m.last_login
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLogin returns the old "last_login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLogin(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLogin: %w", err)
	}
	return oldValue.LastLogin, nil
}

// ClearLastLogin clears the value of the "last_login" field.
func (m *UserMutation) ClearLastLogin() {
	m.last_login = nil
	m.clearedFields[user.FieldLastLogin] = struct{}{}
}

// LastLoginCleared returns if the "last_login" field was cleared in this mutation.
func (m *UserMutation) LastLoginCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLogin]
	return ok
}

// ResetLastLogin resets all changes to the "last_login" field.
func (m *UserMutation) ResetLastLogin() {
	m.last_login = nil
	delete(m.clearedFields, user.FieldLastLogin)
}

// SetIsActive sets the "is_active" field.
func (m *UserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *UserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *UserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetNotionID sets the "notion_id" field.
func (m *UserMutation) SetNotionID(s string) {
	m.notion_id = &s
}

// NotionID returns the value of the "notion_id" field in the mutation.
func (m *UserMutation) NotionID() (r string, exists bool) {
	v := m.notion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNotionID returns the old "notion_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNotionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotionID: %w", err)
	}
	return oldValue.NotionID, nil
}

// ClearNotionID clears the value of the "notion_id" field.
func (m *UserMutation) ClearNotionID() {
	m.notion_id = nil
	m.clearedFields[user.FieldNotionID] = struct{}{}
}

// NotionIDCleared returns if the "notion_id" field was cleared in this mutation.
func (m *UserMutation) NotionIDCleared() bool {
	_, ok := m.clearedFields[user.FieldNotionID]
	return ok
}

// ResetNotionID resets all changes to the "notion_id" field.
func (m *UserMutation) ResetNotionID() {
	m.notion_id = nil
	delete(m.clearedFields, user.FieldNotionID)
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (m *UserMutation) SetIsNotionSubject(b bool) {
	m.is_notion_subject = &b
}

// IsNotionSubject returns the value of the "is_notion_subject" field in the mutation.
func (m *UserMutation) IsNotionSubject() (r bool, exists bool) {
	v := m.is_notion_subject
	if v == nil {
		return
	}
	return *v, true
}

// OldIsNotionSubject returns the old "is_notion_subject" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsNotionSubject(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsNotionSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsNotionSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsNotionSubject: %w", err)
	}
	return oldValue.IsNotionSubject, nil
}

// ResetIsNotionSubject resets all changes to the "is_notion_subject" field.
func (m *UserMutation) ResetIsNotionSubject() {
	m.is_notion_subject = nil
}

// AddCreatedObjectIDs adds the "created_objects" edge to the Object entity by ids.
func (m *UserMutation) AddCreatedObjectIDs(ids ...puuid.ID) {
	if m.created_objects == nil {
		m.created_objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.created_objects[ids[i]] = struct{}{}
	}
}

// ClearCreatedObjects clears the "created_objects" edge to the Object entity.
func (m *UserMutation) ClearCreatedObjects() {
	m.clearedcreated_objects = true
}

// CreatedObjectsCleared reports if the "created_objects" edge to the Object entity was cleared.
func (m *UserMutation) CreatedObjectsCleared() bool {
	return m.clearedcreated_objects
}

// RemoveCreatedObjectIDs removes the "created_objects" edge to the Object entity by IDs.
func (m *UserMutation) RemoveCreatedObjectIDs(ids ...puuid.ID) {
	if m.removedcreated_objects == nil {
		m.removedcreated_objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.created_objects, ids[i])
		m.removedcreated_objects[ids[i]] = struct{}{}
	}
}

// RemovedCreatedObjects returns the removed IDs of the "created_objects" edge to the Object entity.
func (m *UserMutation) RemovedCreatedObjectsIDs() (ids []puuid.ID) {
	for id := range m.removedcreated_objects {
		ids = append(ids, id)
	}
	return
}

// CreatedObjectsIDs returns the "created_objects" edge IDs in the mutation.
func (m *UserMutation) CreatedObjectsIDs() (ids []puuid.ID) {
	for id := range m.created_objects {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedObjects resets all changes to the "created_objects" edge.
func (m *UserMutation) ResetCreatedObjects() {
	m.created_objects = nil
	m.clearedcreated_objects = false
	m.removedcreated_objects = nil
}

// AddUpdatedObjectIDs adds the "updated_objects" edge to the Object entity by ids.
func (m *UserMutation) AddUpdatedObjectIDs(ids ...puuid.ID) {
	if m.updated_objects == nil {
		m.updated_objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.updated_objects[ids[i]] = struct{}{}
	}
}

// ClearUpdatedObjects clears the "updated_objects" edge to the Object entity.
func (m *UserMutation) ClearUpdatedObjects() {
	m.clearedupdated_objects = true
}

// UpdatedObjectsCleared reports if the "updated_objects" edge to the Object entity was cleared.
func (m *UserMutation) UpdatedObjectsCleared() bool {
	return m.clearedupdated_objects
}

// RemoveUpdatedObjectIDs removes the "updated_objects" edge to the Object entity by IDs.
func (m *UserMutation) RemoveUpdatedObjectIDs(ids ...puuid.ID) {
	if m.removedupdated_objects == nil {
		m.removedupdated_objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.updated_objects, ids[i])
		m.removedupdated_objects[ids[i]] = struct{}{}
	}
}

// RemovedUpdatedObjects returns the removed IDs of the "updated_objects" edge to the Object entity.
func (m *UserMutation) RemovedUpdatedObjectsIDs() (ids []puuid.ID) {
	for id := range m.removedupdated_objects {
		ids = append(ids, id)
	}
	return
}

// UpdatedObjectsIDs returns the "updated_objects" edge IDs in the mutation.
func (m *UserMutation) UpdatedObjectsIDs() (ids []puuid.ID) {
	for id := range m.updated_objects {
		ids = append(ids, id)
	}
	return
}

// ResetUpdatedObjects resets all changes to the "updated_objects" edge.
func (m *UserMutation) ResetUpdatedObjects() {
	m.updated_objects = nil
	m.clearedupdated_objects = false
	m.removedupdated_objects = nil
}

// AddDeletedObjectIDs adds the "deleted_objects" edge to the Object entity by ids.
func (m *UserMutation) AddDeletedObjectIDs(ids ...puuid.ID) {
	if m.deleted_objects == nil {
		m.deleted_objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.deleted_objects[ids[i]] = struct{}{}
	}
}

// ClearDeletedObjects clears the "deleted_objects" edge to the Object entity.
func (m *UserMutation) ClearDeletedObjects() {
	m.cleareddeleted_objects = true
}

// DeletedObjectsCleared reports if the "deleted_objects" edge to the Object entity was cleared.
func (m *UserMutation) DeletedObjectsCleared() bool {
	return m.cleareddeleted_objects
}

// RemoveDeletedObjectIDs removes the "deleted_objects" edge to the Object entity by IDs.
func (m *UserMutation) RemoveDeletedObjectIDs(ids ...puuid.ID) {
	if m.removeddeleted_objects == nil {
		m.removeddeleted_objects = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.deleted_objects, ids[i])
		m.removeddeleted_objects[ids[i]] = struct{}{}
	}
}

// RemovedDeletedObjects returns the removed IDs of the "deleted_objects" edge to the Object entity.
func (m *UserMutation) RemovedDeletedObjectsIDs() (ids []puuid.ID) {
	for id := range m.removeddeleted_objects {
		ids = append(ids, id)
	}
	return
}

// DeletedObjectsIDs returns the "deleted_objects" edge IDs in the mutation.
func (m *UserMutation) DeletedObjectsIDs() (ids []puuid.ID) {
	for id := range m.deleted_objects {
		ids = append(ids, id)
	}
	return
}

// ResetDeletedObjects resets all changes to the "deleted_objects" edge.
func (m *UserMutation) ResetDeletedObjects() {
	m.deleted_objects = nil
	m.cleareddeleted_objects = false
	m.removeddeleted_objects = nil
}

// AddCreatedCollectionIDs adds the "created_collections" edge to the Collection entity by ids.
func (m *UserMutation) AddCreatedCollectionIDs(ids ...puuid.ID) {
	if m.created_collections == nil {
		m.created_collections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.created_collections[ids[i]] = struct{}{}
	}
}

// ClearCreatedCollections clears the "created_collections" edge to the Collection entity.
func (m *UserMutation) ClearCreatedCollections() {
	m.clearedcreated_collections = true
}

// CreatedCollectionsCleared reports if the "created_collections" edge to the Collection entity was cleared.
func (m *UserMutation) CreatedCollectionsCleared() bool {
	return m.clearedcreated_collections
}

// RemoveCreatedCollectionIDs removes the "created_collections" edge to the Collection entity by IDs.
func (m *UserMutation) RemoveCreatedCollectionIDs(ids ...puuid.ID) {
	if m.removedcreated_collections == nil {
		m.removedcreated_collections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.created_collections, ids[i])
		m.removedcreated_collections[ids[i]] = struct{}{}
	}
}

// RemovedCreatedCollections returns the removed IDs of the "created_collections" edge to the Collection entity.
func (m *UserMutation) RemovedCreatedCollectionsIDs() (ids []puuid.ID) {
	for id := range m.removedcreated_collections {
		ids = append(ids, id)
	}
	return
}

// CreatedCollectionsIDs returns the "created_collections" edge IDs in the mutation.
func (m *UserMutation) CreatedCollectionsIDs() (ids []puuid.ID) {
	for id := range m.created_collections {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedCollections resets all changes to the "created_collections" edge.
func (m *UserMutation) ResetCreatedCollections() {
	m.created_collections = nil
	m.clearedcreated_collections = false
	m.removedcreated_collections = nil
}

// AddUpdatedCollectionIDs adds the "updated_collections" edge to the Collection entity by ids.
func (m *UserMutation) AddUpdatedCollectionIDs(ids ...puuid.ID) {
	if m.updated_collections == nil {
		m.updated_collections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.updated_collections[ids[i]] = struct{}{}
	}
}

// ClearUpdatedCollections clears the "updated_collections" edge to the Collection entity.
func (m *UserMutation) ClearUpdatedCollections() {
	m.clearedupdated_collections = true
}

// UpdatedCollectionsCleared reports if the "updated_collections" edge to the Collection entity was cleared.
func (m *UserMutation) UpdatedCollectionsCleared() bool {
	return m.clearedupdated_collections
}

// RemoveUpdatedCollectionIDs removes the "updated_collections" edge to the Collection entity by IDs.
func (m *UserMutation) RemoveUpdatedCollectionIDs(ids ...puuid.ID) {
	if m.removedupdated_collections == nil {
		m.removedupdated_collections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.updated_collections, ids[i])
		m.removedupdated_collections[ids[i]] = struct{}{}
	}
}

// RemovedUpdatedCollections returns the removed IDs of the "updated_collections" edge to the Collection entity.
func (m *UserMutation) RemovedUpdatedCollectionsIDs() (ids []puuid.ID) {
	for id := range m.removedupdated_collections {
		ids = append(ids, id)
	}
	return
}

// UpdatedCollectionsIDs returns the "updated_collections" edge IDs in the mutation.
func (m *UserMutation) UpdatedCollectionsIDs() (ids []puuid.ID) {
	for id := range m.updated_collections {
		ids = append(ids, id)
	}
	return
}

// ResetUpdatedCollections resets all changes to the "updated_collections" edge.
func (m *UserMutation) ResetUpdatedCollections() {
	m.updated_collections = nil
	m.clearedupdated_collections = false
	m.removedupdated_collections = nil
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by ids.
func (m *UserMutation) AddCollectionIDs(ids ...puuid.ID) {
	if m.collections == nil {
		m.collections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.collections[ids[i]] = struct{}{}
	}
}

// ClearCollections clears the "collections" edge to the Collection entity.
func (m *UserMutation) ClearCollections() {
	m.clearedcollections = true
}

// CollectionsCleared reports if the "collections" edge to the Collection entity was cleared.
func (m *UserMutation) CollectionsCleared() bool {
	return m.clearedcollections
}

// RemoveCollectionIDs removes the "collections" edge to the Collection entity by IDs.
func (m *UserMutation) RemoveCollectionIDs(ids ...puuid.ID) {
	if m.removedcollections == nil {
		m.removedcollections = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.collections, ids[i])
		m.removedcollections[ids[i]] = struct{}{}
	}
}

// RemovedCollections returns the removed IDs of the "collections" edge to the Collection entity.
func (m *UserMutation) RemovedCollectionsIDs() (ids []puuid.ID) {
	for id := range m.removedcollections {
		ids = append(ids, id)
	}
	return
}

// CollectionsIDs returns the "collections" edge IDs in the mutation.
func (m *UserMutation) CollectionsIDs() (ids []puuid.ID) {
	for id := range m.collections {
		ids = append(ids, id)
	}
	return
}

// ResetCollections resets all changes to the "collections" edge.
func (m *UserMutation) ResetCollections() {
	m.collections = nil
	m.clearedcollections = false
	m.removedcollections = nil
}

// AddObjectInfoIDs adds the "object_info" edge to the Object entity by ids.
func (m *UserMutation) AddObjectInfoIDs(ids ...puuid.ID) {
	if m.object_info == nil {
		m.object_info = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		m.object_info[ids[i]] = struct{}{}
	}
}

// ClearObjectInfo clears the "object_info" edge to the Object entity.
func (m *UserMutation) ClearObjectInfo() {
	m.clearedobject_info = true
}

// ObjectInfoCleared reports if the "object_info" edge to the Object entity was cleared.
func (m *UserMutation) ObjectInfoCleared() bool {
	return m.clearedobject_info
}

// RemoveObjectInfoIDs removes the "object_info" edge to the Object entity by IDs.
func (m *UserMutation) RemoveObjectInfoIDs(ids ...puuid.ID) {
	if m.removedobject_info == nil {
		m.removedobject_info = make(map[puuid.ID]struct{})
	}
	for i := range ids {
		delete(m.object_info, ids[i])
		m.removedobject_info[ids[i]] = struct{}{}
	}
}

// RemovedObjectInfo returns the removed IDs of the "object_info" edge to the Object entity.
func (m *UserMutation) RemovedObjectInfoIDs() (ids []puuid.ID) {
	for id := range m.removedobject_info {
		ids = append(ids, id)
	}
	return
}

// ObjectInfoIDs returns the "object_info" edge IDs in the mutation.
func (m *UserMutation) ObjectInfoIDs() (ids []puuid.ID) {
	for id := range m.object_info {
		ids = append(ids, id)
	}
	return
}

// ResetObjectInfo resets all changes to the "object_info" edge.
func (m *UserMutation) ResetObjectInfo() {
	m.object_info = nil
	m.clearedobject_info = false
	m.removedobject_info = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.last_login != nil {
		fields = append(fields, user.FieldLastLogin)
	}
	if m.is_active != nil {
		fields = append(fields, user.FieldIsActive)
	}
	if m.notion_id != nil {
		fields = append(fields, user.FieldNotionID)
	}
	if m.is_notion_subject != nil {
		fields = append(fields, user.FieldIsNotionSubject)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldLogin:
		return m.Login()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	case user.FieldLastLogin:
		return m.LastLogin()
	case user.FieldIsActive:
		return m.IsActive()
	case user.FieldNotionID:
		return m.NotionID()
	case user.FieldIsNotionSubject:
		return m.IsNotionSubject()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldLastLogin:
		return m.OldLastLogin(ctx)
	case user.FieldIsActive:
		return m.OldIsActive(ctx)
	case user.FieldNotionID:
		return m.OldNotionID(ctx)
	case user.FieldIsNotionSubject:
		return m.OldIsNotionSubject(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldLastLogin:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLogin(v)
		return nil
	case user.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case user.FieldNotionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotionID(v)
		return nil
	case user.FieldIsNotionSubject:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsNotionSubject(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldLastLogin) {
		fields = append(fields, user.FieldLastLogin)
	}
	if m.FieldCleared(user.FieldNotionID) {
		fields = append(fields, user.FieldNotionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldLastLogin:
		m.ClearLastLogin()
		return nil
	case user.FieldNotionID:
		m.ClearNotionID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldLastLogin:
		m.ResetLastLogin()
		return nil
	case user.FieldIsActive:
		m.ResetIsActive()
		return nil
	case user.FieldNotionID:
		m.ResetNotionID()
		return nil
	case user.FieldIsNotionSubject:
		m.ResetIsNotionSubject()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.created_objects != nil {
		edges = append(edges, user.EdgeCreatedObjects)
	}
	if m.updated_objects != nil {
		edges = append(edges, user.EdgeUpdatedObjects)
	}
	if m.deleted_objects != nil {
		edges = append(edges, user.EdgeDeletedObjects)
	}
	if m.created_collections != nil {
		edges = append(edges, user.EdgeCreatedCollections)
	}
	if m.updated_collections != nil {
		edges = append(edges, user.EdgeUpdatedCollections)
	}
	if m.collections != nil {
		edges = append(edges, user.EdgeCollections)
	}
	if m.object_info != nil {
		edges = append(edges, user.EdgeObjectInfo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreatedObjects:
		ids := make([]ent.Value, 0, len(m.created_objects))
		for id := range m.created_objects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUpdatedObjects:
		ids := make([]ent.Value, 0, len(m.updated_objects))
		for id := range m.updated_objects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeletedObjects:
		ids := make([]ent.Value, 0, len(m.deleted_objects))
		for id := range m.deleted_objects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedCollections:
		ids := make([]ent.Value, 0, len(m.created_collections))
		for id := range m.created_collections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUpdatedCollections:
		ids := make([]ent.Value, 0, len(m.updated_collections))
		for id := range m.updated_collections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.collections))
		for id := range m.collections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeObjectInfo:
		ids := make([]ent.Value, 0, len(m.object_info))
		for id := range m.object_info {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedcreated_objects != nil {
		edges = append(edges, user.EdgeCreatedObjects)
	}
	if m.removedupdated_objects != nil {
		edges = append(edges, user.EdgeUpdatedObjects)
	}
	if m.removeddeleted_objects != nil {
		edges = append(edges, user.EdgeDeletedObjects)
	}
	if m.removedcreated_collections != nil {
		edges = append(edges, user.EdgeCreatedCollections)
	}
	if m.removedupdated_collections != nil {
		edges = append(edges, user.EdgeUpdatedCollections)
	}
	if m.removedcollections != nil {
		edges = append(edges, user.EdgeCollections)
	}
	if m.removedobject_info != nil {
		edges = append(edges, user.EdgeObjectInfo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreatedObjects:
		ids := make([]ent.Value, 0, len(m.removedcreated_objects))
		for id := range m.removedcreated_objects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUpdatedObjects:
		ids := make([]ent.Value, 0, len(m.removedupdated_objects))
		for id := range m.removedupdated_objects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeletedObjects:
		ids := make([]ent.Value, 0, len(m.removeddeleted_objects))
		for id := range m.removeddeleted_objects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedCollections:
		ids := make([]ent.Value, 0, len(m.removedcreated_collections))
		for id := range m.removedcreated_collections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUpdatedCollections:
		ids := make([]ent.Value, 0, len(m.removedupdated_collections))
		for id := range m.removedupdated_collections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.removedcollections))
		for id := range m.removedcollections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeObjectInfo:
		ids := make([]ent.Value, 0, len(m.removedobject_info))
		for id := range m.removedobject_info {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedcreated_objects {
		edges = append(edges, user.EdgeCreatedObjects)
	}
	if m.clearedupdated_objects {
		edges = append(edges, user.EdgeUpdatedObjects)
	}
	if m.cleareddeleted_objects {
		edges = append(edges, user.EdgeDeletedObjects)
	}
	if m.clearedcreated_collections {
		edges = append(edges, user.EdgeCreatedCollections)
	}
	if m.clearedupdated_collections {
		edges = append(edges, user.EdgeUpdatedCollections)
	}
	if m.clearedcollections {
		edges = append(edges, user.EdgeCollections)
	}
	if m.clearedobject_info {
		edges = append(edges, user.EdgeObjectInfo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCreatedObjects:
		return m.clearedcreated_objects
	case user.EdgeUpdatedObjects:
		return m.clearedupdated_objects
	case user.EdgeDeletedObjects:
		return m.cleareddeleted_objects
	case user.EdgeCreatedCollections:
		return m.clearedcreated_collections
	case user.EdgeUpdatedCollections:
		return m.clearedupdated_collections
	case user.EdgeCollections:
		return m.clearedcollections
	case user.EdgeObjectInfo:
		return m.clearedobject_info
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCreatedObjects:
		m.ResetCreatedObjects()
		return nil
	case user.EdgeUpdatedObjects:
		m.ResetUpdatedObjects()
		return nil
	case user.EdgeDeletedObjects:
		m.ResetDeletedObjects()
		return nil
	case user.EdgeCreatedCollections:
		m.ResetCreatedCollections()
		return nil
	case user.EdgeUpdatedCollections:
		m.ResetUpdatedCollections()
		return nil
	case user.EdgeCollections:
		m.ResetCollections()
		return nil
	case user.EdgeObjectInfo:
		m.ResetObjectInfo()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
