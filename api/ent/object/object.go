// Code generated by ent, DO NOT EDIT.

package object

import (
	"radioatelier/ent/schema/puuid"
	"time"
)

const (
	// Label holds the string label denoting the object type in the database.
	Label = "object"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldInstalledPeriod holds the string denoting the installed_period field in the database.
	FieldInstalledPeriod = "installed_period"
	// FieldIsRemoved holds the string denoting the is_removed field in the database.
	FieldIsRemoved = "is_removed"
	// FieldRemovedPeriod holds the string denoting the removed_period field in the database.
	FieldRemovedPeriod = "removed_period"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldLastSync holds the string denoting the last_sync field in the database.
	FieldLastSync = "last_sync"
	// FieldNotionID holds the string denoting the notion_id field in the database.
	FieldNotionID = "notion_id"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeUpdatedBy holds the string denoting the updated_by edge name in mutations.
	EdgeUpdatedBy = "updated_by"
	// EdgeDeletedBy holds the string denoting the deleted_by edge name in mutations.
	EdgeDeletedBy = "deleted_by"
	// EdgeCollections holds the string denoting the collections edge name in mutations.
	EdgeCollections = "collections"
	// EdgeUserInfo holds the string denoting the user_info edge name in mutations.
	EdgeUserInfo = "user_info"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeObjectUser holds the string denoting the object_user edge name in mutations.
	EdgeObjectUser = "object_user"
	// Table holds the table name of the object in the database.
	Table = "objects"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "objects"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "created_by"
	// UpdatedByTable is the table that holds the updated_by relation/edge.
	UpdatedByTable = "objects"
	// UpdatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdatedByInverseTable = "users"
	// UpdatedByColumn is the table column denoting the updated_by relation/edge.
	UpdatedByColumn = "updated_by"
	// DeletedByTable is the table that holds the deleted_by relation/edge.
	DeletedByTable = "objects"
	// DeletedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DeletedByInverseTable = "users"
	// DeletedByColumn is the table column denoting the deleted_by relation/edge.
	DeletedByColumn = "deleted_by"
	// CollectionsTable is the table that holds the collections relation/edge. The primary key declared below.
	CollectionsTable = "object_collections"
	// CollectionsInverseTable is the table name for the Collection entity.
	// It exists in this package in order to avoid circular dependency with the "collection" package.
	CollectionsInverseTable = "collections"
	// UserInfoTable is the table that holds the user_info relation/edge. The primary key declared below.
	UserInfoTable = "object_users"
	// UserInfoInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInfoInverseTable = "users"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "objects"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// ObjectUserTable is the table that holds the object_user relation/edge.
	ObjectUserTable = "object_users"
	// ObjectUserInverseTable is the table name for the ObjectUser entity.
	// It exists in this package in order to avoid circular dependency with the "objectuser" package.
	ObjectUserInverseTable = "object_users"
	// ObjectUserColumn is the table column denoting the object_user relation/edge.
	ObjectUserColumn = "object_id"
)

// Columns holds all SQL columns for object fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddress,
	FieldDescription,
	FieldLat,
	FieldLng,
	FieldInstalledPeriod,
	FieldIsRemoved,
	FieldRemovedPeriod,
	FieldSource,
	FieldType,
	FieldTags,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldLastSync,
	FieldNotionID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "objects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"city_id",
	"created_by",
	"updated_by",
	"deleted_by",
}

var (
	// CollectionsPrimaryKey and CollectionsColumn2 are the table columns denoting the
	// primary key for the collections relation (M2M).
	CollectionsPrimaryKey = []string{"object_id", "collection_id"}
	// UserInfoPrimaryKey and UserInfoColumn2 are the table columns denoting the
	// primary key for the user_info relation (M2M).
	UserInfoPrimaryKey = []string{"user_id", "object_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsRemoved holds the default value on creation for the "is_removed" field.
	DefaultIsRemoved bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() puuid.ID
)
