// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/city"
	"radioatelier/ent/object"
	"radioatelier/ent/schema/puuid"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityCreate is the builder for creating a City entity.
type CityCreate struct {
	config
	mutation *CityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (cc *CityCreate) SetName(s string) *CityCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCountry sets the "country" field.
func (cc *CityCreate) SetCountry(s string) *CityCreate {
	cc.mutation.SetCountry(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CityCreate) SetID(pu puuid.ID) *CityCreate {
	cc.mutation.SetID(pu)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CityCreate) SetNillableID(pu *puuid.ID) *CityCreate {
	if pu != nil {
		cc.SetID(*pu)
	}
	return cc
}

// AddObjectIDs adds the "objects" edge to the Object entity by IDs.
func (cc *CityCreate) AddObjectIDs(ids ...puuid.ID) *CityCreate {
	cc.mutation.AddObjectIDs(ids...)
	return cc
}

// AddObjects adds the "objects" edges to the Object entity.
func (cc *CityCreate) AddObjects(o ...*Object) *CityCreate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddObjectIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cc *CityCreate) Mutation() *CityMutation {
	return cc.mutation
}

// Save creates the City in the database.
func (cc *CityCreate) Save(ctx context.Context) (*City, error) {
	cc.defaults()
	return withHooks[*City, CityMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CityCreate) SaveX(ctx context.Context) *City {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CityCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := city.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CityCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "City.name"`)}
	}
	if _, ok := cc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "City.country"`)}
	}
	return nil
}

func (cc *CityCreate) sqlSave(ctx context.Context) (*City, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*puuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CityCreate) createSpec() (*City, *sqlgraph.CreateSpec) {
	var (
		_node = &City{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(city.Table, sqlgraph.NewFieldSpec(city.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Country(); ok {
		_spec.SetField(city.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if nodes := cc.mutation.ObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ObjectsTable,
			Columns: []string{city.ObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.City.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CityUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cc *CityCreate) OnConflict(opts ...sql.ConflictOption) *CityUpsertOne {
	cc.conflict = opts
	return &CityUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CityCreate) OnConflictColumns(columns ...string) *CityUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CityUpsertOne{
		create: cc,
	}
}

type (
	// CityUpsertOne is the builder for "upsert"-ing
	//  one City node.
	CityUpsertOne struct {
		create *CityCreate
	}

	// CityUpsert is the "OnConflict" setter.
	CityUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *CityUpsert) SetName(v string) *CityUpsert {
	u.Set(city.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityUpsert) UpdateName() *CityUpsert {
	u.SetExcluded(city.FieldName)
	return u
}

// SetCountry sets the "country" field.
func (u *CityUpsert) SetCountry(v string) *CityUpsert {
	u.Set(city.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *CityUpsert) UpdateCountry() *CityUpsert {
	u.SetExcluded(city.FieldCountry)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(city.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CityUpsertOne) UpdateNewValues() *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(city.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.City.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CityUpsertOne) Ignore() *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CityUpsertOne) DoNothing() *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CityCreate.OnConflict
// documentation for more info.
func (u *CityUpsertOne) Update(set func(*CityUpsert)) *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CityUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CityUpsertOne) SetName(v string) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateName() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateName()
	})
}

// SetCountry sets the "country" field.
func (u *CityUpsertOne) SetCountry(v string) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateCountry() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateCountry()
	})
}

// Exec executes the query.
func (u *CityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CityUpsertOne) ID(ctx context.Context) (id puuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CityUpsertOne.ID is not supported by MySQL driver. Use CityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CityUpsertOne) IDX(ctx context.Context) puuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CityCreateBulk is the builder for creating many City entities in bulk.
type CityCreateBulk struct {
	config
	builders []*CityCreate
	conflict []sql.ConflictOption
}

// Save creates the City entities in the database.
func (ccb *CityCreateBulk) Save(ctx context.Context) ([]*City, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*City, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CityCreateBulk) SaveX(ctx context.Context) []*City {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.City.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CityUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ccb *CityCreateBulk) OnConflict(opts ...sql.ConflictOption) *CityUpsertBulk {
	ccb.conflict = opts
	return &CityUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CityCreateBulk) OnConflictColumns(columns ...string) *CityUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CityUpsertBulk{
		create: ccb,
	}
}

// CityUpsertBulk is the builder for "upsert"-ing
// a bulk of City nodes.
type CityUpsertBulk struct {
	create *CityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(city.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CityUpsertBulk) UpdateNewValues() *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(city.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CityUpsertBulk) Ignore() *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CityUpsertBulk) DoNothing() *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CityCreateBulk.OnConflict
// documentation for more info.
func (u *CityUpsertBulk) Update(set func(*CityUpsert)) *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CityUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CityUpsertBulk) SetName(v string) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateName() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateName()
	})
}

// SetCountry sets the "country" field.
func (u *CityUpsertBulk) SetCountry(v string) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateCountry() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateCountry()
	})
}

// Exec executes the query.
func (u *CityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
