// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/city"
	"radioatelier/ent/collection"
	"radioatelier/ent/object"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ObjectCreate is the builder for creating a Object entity.
type ObjectCreate struct {
	config
	mutation *ObjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (oc *ObjectCreate) SetName(s string) *ObjectCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetDescription sets the "description" field.
func (oc *ObjectCreate) SetDescription(s string) *ObjectCreate {
	oc.mutation.SetDescription(s)
	return oc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableDescription(s *string) *ObjectCreate {
	if s != nil {
		oc.SetDescription(*s)
	}
	return oc
}

// SetLat sets the "lat" field.
func (oc *ObjectCreate) SetLat(f float64) *ObjectCreate {
	oc.mutation.SetLat(f)
	return oc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableLat(f *float64) *ObjectCreate {
	if f != nil {
		oc.SetLat(*f)
	}
	return oc
}

// SetLng sets the "lng" field.
func (oc *ObjectCreate) SetLng(f float64) *ObjectCreate {
	oc.mutation.SetLng(f)
	return oc
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableLng(f *float64) *ObjectCreate {
	if f != nil {
		oc.SetLng(*f)
	}
	return oc
}

// SetInstalledPeriod sets the "installed_period" field.
func (oc *ObjectCreate) SetInstalledPeriod(s string) *ObjectCreate {
	oc.mutation.SetInstalledPeriod(s)
	return oc
}

// SetNillableInstalledPeriod sets the "installed_period" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableInstalledPeriod(s *string) *ObjectCreate {
	if s != nil {
		oc.SetInstalledPeriod(*s)
	}
	return oc
}

// SetIsRemoved sets the "is_removed" field.
func (oc *ObjectCreate) SetIsRemoved(b bool) *ObjectCreate {
	oc.mutation.SetIsRemoved(b)
	return oc
}

// SetNillableIsRemoved sets the "is_removed" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableIsRemoved(b *bool) *ObjectCreate {
	if b != nil {
		oc.SetIsRemoved(*b)
	}
	return oc
}

// SetRemovedPeriod sets the "removed_period" field.
func (oc *ObjectCreate) SetRemovedPeriod(s string) *ObjectCreate {
	oc.mutation.SetRemovedPeriod(s)
	return oc
}

// SetNillableRemovedPeriod sets the "removed_period" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableRemovedPeriod(s *string) *ObjectCreate {
	if s != nil {
		oc.SetRemovedPeriod(*s)
	}
	return oc
}

// SetSource sets the "source" field.
func (oc *ObjectCreate) SetSource(s string) *ObjectCreate {
	oc.mutation.SetSource(s)
	return oc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableSource(s *string) *ObjectCreate {
	if s != nil {
		oc.SetSource(*s)
	}
	return oc
}

// SetType sets the "type" field.
func (oc *ObjectCreate) SetType(s string) *ObjectCreate {
	oc.mutation.SetType(s)
	return oc
}

// SetTags sets the "tags" field.
func (oc *ObjectCreate) SetTags(s string) *ObjectCreate {
	oc.mutation.SetTags(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *ObjectCreate) SetCreatedAt(t time.Time) *ObjectCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableCreatedAt(t *time.Time) *ObjectCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *ObjectCreate) SetUpdatedAt(t time.Time) *ObjectCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableUpdatedAt(t *time.Time) *ObjectCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *ObjectCreate) SetDeletedAt(t time.Time) *ObjectCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableDeletedAt(t *time.Time) *ObjectCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetLastSync sets the "last_sync" field.
func (oc *ObjectCreate) SetLastSync(t time.Time) *ObjectCreate {
	oc.mutation.SetLastSync(t)
	return oc
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableLastSync(t *time.Time) *ObjectCreate {
	if t != nil {
		oc.SetLastSync(*t)
	}
	return oc
}

// SetNotionID sets the "notion_id" field.
func (oc *ObjectCreate) SetNotionID(s string) *ObjectCreate {
	oc.mutation.SetNotionID(s)
	return oc
}

// SetNillableNotionID sets the "notion_id" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableNotionID(s *string) *ObjectCreate {
	if s != nil {
		oc.SetNotionID(*s)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *ObjectCreate) SetID(pu puuid.ID) *ObjectCreate {
	oc.mutation.SetID(pu)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableID(pu *puuid.ID) *ObjectCreate {
	if pu != nil {
		oc.SetID(*pu)
	}
	return oc
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (oc *ObjectCreate) SetCreatedByID(id puuid.ID) *ObjectCreate {
	oc.mutation.SetCreatedByID(id)
	return oc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (oc *ObjectCreate) SetCreatedBy(u *User) *ObjectCreate {
	return oc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (oc *ObjectCreate) SetUpdatedByID(id puuid.ID) *ObjectCreate {
	oc.mutation.SetUpdatedByID(id)
	return oc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (oc *ObjectCreate) SetUpdatedBy(u *User) *ObjectCreate {
	return oc.SetUpdatedByID(u.ID)
}

// SetDeletedByID sets the "deleted_by" edge to the User entity by ID.
func (oc *ObjectCreate) SetDeletedByID(id puuid.ID) *ObjectCreate {
	oc.mutation.SetDeletedByID(id)
	return oc
}

// SetNillableDeletedByID sets the "deleted_by" edge to the User entity by ID if the given value is not nil.
func (oc *ObjectCreate) SetNillableDeletedByID(id *puuid.ID) *ObjectCreate {
	if id != nil {
		oc = oc.SetDeletedByID(*id)
	}
	return oc
}

// SetDeletedBy sets the "deleted_by" edge to the User entity.
func (oc *ObjectCreate) SetDeletedBy(u *User) *ObjectCreate {
	return oc.SetDeletedByID(u.ID)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (oc *ObjectCreate) AddCollectionIDs(ids ...puuid.ID) *ObjectCreate {
	oc.mutation.AddCollectionIDs(ids...)
	return oc
}

// AddCollections adds the "collections" edges to the Collection entity.
func (oc *ObjectCreate) AddCollections(c ...*Collection) *ObjectCreate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddCollectionIDs(ids...)
}

// AddUserInfoIDs adds the "user_info" edge to the User entity by IDs.
func (oc *ObjectCreate) AddUserInfoIDs(ids ...puuid.ID) *ObjectCreate {
	oc.mutation.AddUserInfoIDs(ids...)
	return oc
}

// AddUserInfo adds the "user_info" edges to the User entity.
func (oc *ObjectCreate) AddUserInfo(u ...*User) *ObjectCreate {
	ids := make([]puuid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserInfoIDs(ids...)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (oc *ObjectCreate) SetCityID(id puuid.ID) *ObjectCreate {
	oc.mutation.SetCityID(id)
	return oc
}

// SetCity sets the "city" edge to the City entity.
func (oc *ObjectCreate) SetCity(c *City) *ObjectCreate {
	return oc.SetCityID(c.ID)
}

// Mutation returns the ObjectMutation object of the builder.
func (oc *ObjectCreate) Mutation() *ObjectMutation {
	return oc.mutation
}

// Save creates the Object in the database.
func (oc *ObjectCreate) Save(ctx context.Context) (*Object, error) {
	var (
		err  error
		node *Object
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Object)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ObjectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *ObjectCreate) SaveX(ctx context.Context) *Object {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *ObjectCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *ObjectCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *ObjectCreate) defaults() {
	if _, ok := oc.mutation.IsRemoved(); !ok {
		v := object.DefaultIsRemoved
		oc.mutation.SetIsRemoved(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := object.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := object.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := object.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *ObjectCreate) check() error {
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Object.name"`)}
	}
	if _, ok := oc.mutation.IsRemoved(); !ok {
		return &ValidationError{Name: "is_removed", err: errors.New(`ent: missing required field "Object.is_removed"`)}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Object.type"`)}
	}
	if _, ok := oc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Object.tags"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Object.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Object.updated_at"`)}
	}
	if _, ok := oc.mutation.CreatedByID(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required edge "Object.created_by"`)}
	}
	if _, ok := oc.mutation.UpdatedByID(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required edge "Object.updated_by"`)}
	}
	if _, ok := oc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Object.city"`)}
	}
	return nil
}

func (oc *ObjectCreate) sqlSave(ctx context.Context) (*Object, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*puuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (oc *ObjectCreate) createSpec() (*Object, *sqlgraph.CreateSpec) {
	var (
		_node = &Object{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: object.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: object.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldName,
		})
		_node.Name = value
	}
	if value, ok := oc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := oc.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: object.FieldLat,
		})
		_node.Lat = &value
	}
	if value, ok := oc.mutation.Lng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: object.FieldLng,
		})
		_node.Lng = &value
	}
	if value, ok := oc.mutation.InstalledPeriod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldInstalledPeriod,
		})
		_node.InstalledPeriod = &value
	}
	if value, ok := oc.mutation.IsRemoved(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: object.FieldIsRemoved,
		})
		_node.IsRemoved = value
	}
	if value, ok := oc.mutation.RemovedPeriod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldRemovedPeriod,
		})
		_node.RemovedPeriod = &value
	}
	if value, ok := oc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldSource,
		})
		_node.Source = &value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldType,
		})
		_node.Type = value
	}
	if value, ok := oc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: object.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: object.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: object.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := oc.mutation.LastSync(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: object.FieldLastSync,
		})
		_node.LastSync = &value
	}
	if value, ok := oc.mutation.NotionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldNotionID,
		})
		_node.NotionID = &value
	}
	if nodes := oc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CreatedByTable,
			Columns: []string{object.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.UpdatedByTable,
			Columns: []string{object.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.DeletedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.DeletedByTable,
			Columns: []string{object.DeletedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deleted_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UserInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: oc.config, mutation: newObjectUserMutation(oc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CityTable,
			Columns: []string{object.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.city_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Object.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ObjectUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (oc *ObjectCreate) OnConflict(opts ...sql.ConflictOption) *ObjectUpsertOne {
	oc.conflict = opts
	return &ObjectUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Object.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oc *ObjectCreate) OnConflictColumns(columns ...string) *ObjectUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &ObjectUpsertOne{
		create: oc,
	}
}

type (
	// ObjectUpsertOne is the builder for "upsert"-ing
	//  one Object node.
	ObjectUpsertOne struct {
		create *ObjectCreate
	}

	// ObjectUpsert is the "OnConflict" setter.
	ObjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ObjectUpsert) SetName(v string) *ObjectUpsert {
	u.Set(object.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateName() *ObjectUpsert {
	u.SetExcluded(object.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ObjectUpsert) SetDescription(v string) *ObjectUpsert {
	u.Set(object.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateDescription() *ObjectUpsert {
	u.SetExcluded(object.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ObjectUpsert) ClearDescription() *ObjectUpsert {
	u.SetNull(object.FieldDescription)
	return u
}

// SetLat sets the "lat" field.
func (u *ObjectUpsert) SetLat(v float64) *ObjectUpsert {
	u.Set(object.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateLat() *ObjectUpsert {
	u.SetExcluded(object.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *ObjectUpsert) AddLat(v float64) *ObjectUpsert {
	u.Add(object.FieldLat, v)
	return u
}

// ClearLat clears the value of the "lat" field.
func (u *ObjectUpsert) ClearLat() *ObjectUpsert {
	u.SetNull(object.FieldLat)
	return u
}

// SetLng sets the "lng" field.
func (u *ObjectUpsert) SetLng(v float64) *ObjectUpsert {
	u.Set(object.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateLng() *ObjectUpsert {
	u.SetExcluded(object.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *ObjectUpsert) AddLng(v float64) *ObjectUpsert {
	u.Add(object.FieldLng, v)
	return u
}

// ClearLng clears the value of the "lng" field.
func (u *ObjectUpsert) ClearLng() *ObjectUpsert {
	u.SetNull(object.FieldLng)
	return u
}

// SetInstalledPeriod sets the "installed_period" field.
func (u *ObjectUpsert) SetInstalledPeriod(v string) *ObjectUpsert {
	u.Set(object.FieldInstalledPeriod, v)
	return u
}

// UpdateInstalledPeriod sets the "installed_period" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateInstalledPeriod() *ObjectUpsert {
	u.SetExcluded(object.FieldInstalledPeriod)
	return u
}

// ClearInstalledPeriod clears the value of the "installed_period" field.
func (u *ObjectUpsert) ClearInstalledPeriod() *ObjectUpsert {
	u.SetNull(object.FieldInstalledPeriod)
	return u
}

// SetIsRemoved sets the "is_removed" field.
func (u *ObjectUpsert) SetIsRemoved(v bool) *ObjectUpsert {
	u.Set(object.FieldIsRemoved, v)
	return u
}

// UpdateIsRemoved sets the "is_removed" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateIsRemoved() *ObjectUpsert {
	u.SetExcluded(object.FieldIsRemoved)
	return u
}

// SetRemovedPeriod sets the "removed_period" field.
func (u *ObjectUpsert) SetRemovedPeriod(v string) *ObjectUpsert {
	u.Set(object.FieldRemovedPeriod, v)
	return u
}

// UpdateRemovedPeriod sets the "removed_period" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateRemovedPeriod() *ObjectUpsert {
	u.SetExcluded(object.FieldRemovedPeriod)
	return u
}

// ClearRemovedPeriod clears the value of the "removed_period" field.
func (u *ObjectUpsert) ClearRemovedPeriod() *ObjectUpsert {
	u.SetNull(object.FieldRemovedPeriod)
	return u
}

// SetSource sets the "source" field.
func (u *ObjectUpsert) SetSource(v string) *ObjectUpsert {
	u.Set(object.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateSource() *ObjectUpsert {
	u.SetExcluded(object.FieldSource)
	return u
}

// ClearSource clears the value of the "source" field.
func (u *ObjectUpsert) ClearSource() *ObjectUpsert {
	u.SetNull(object.FieldSource)
	return u
}

// SetType sets the "type" field.
func (u *ObjectUpsert) SetType(v string) *ObjectUpsert {
	u.Set(object.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateType() *ObjectUpsert {
	u.SetExcluded(object.FieldType)
	return u
}

// SetTags sets the "tags" field.
func (u *ObjectUpsert) SetTags(v string) *ObjectUpsert {
	u.Set(object.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateTags() *ObjectUpsert {
	u.SetExcluded(object.FieldTags)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ObjectUpsert) SetCreatedAt(v time.Time) *ObjectUpsert {
	u.Set(object.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateCreatedAt() *ObjectUpsert {
	u.SetExcluded(object.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ObjectUpsert) SetUpdatedAt(v time.Time) *ObjectUpsert {
	u.Set(object.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateUpdatedAt() *ObjectUpsert {
	u.SetExcluded(object.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ObjectUpsert) SetDeletedAt(v time.Time) *ObjectUpsert {
	u.Set(object.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateDeletedAt() *ObjectUpsert {
	u.SetExcluded(object.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ObjectUpsert) ClearDeletedAt() *ObjectUpsert {
	u.SetNull(object.FieldDeletedAt)
	return u
}

// SetLastSync sets the "last_sync" field.
func (u *ObjectUpsert) SetLastSync(v time.Time) *ObjectUpsert {
	u.Set(object.FieldLastSync, v)
	return u
}

// UpdateLastSync sets the "last_sync" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateLastSync() *ObjectUpsert {
	u.SetExcluded(object.FieldLastSync)
	return u
}

// ClearLastSync clears the value of the "last_sync" field.
func (u *ObjectUpsert) ClearLastSync() *ObjectUpsert {
	u.SetNull(object.FieldLastSync)
	return u
}

// SetNotionID sets the "notion_id" field.
func (u *ObjectUpsert) SetNotionID(v string) *ObjectUpsert {
	u.Set(object.FieldNotionID, v)
	return u
}

// UpdateNotionID sets the "notion_id" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateNotionID() *ObjectUpsert {
	u.SetExcluded(object.FieldNotionID)
	return u
}

// ClearNotionID clears the value of the "notion_id" field.
func (u *ObjectUpsert) ClearNotionID() *ObjectUpsert {
	u.SetNull(object.FieldNotionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Object.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(object.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ObjectUpsertOne) UpdateNewValues() *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(object.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(object.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ObjectUpsertOne) Ignore() *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ObjectUpsertOne) DoNothing() *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ObjectCreate.OnConflict
// documentation for more info.
func (u *ObjectUpsertOne) Update(set func(*ObjectUpsert)) *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ObjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ObjectUpsertOne) SetName(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateName() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ObjectUpsertOne) SetDescription(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateDescription() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ObjectUpsertOne) ClearDescription() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearDescription()
	})
}

// SetLat sets the "lat" field.
func (u *ObjectUpsertOne) SetLat(v float64) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *ObjectUpsertOne) AddLat(v float64) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateLat() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *ObjectUpsertOne) ClearLat() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearLat()
	})
}

// SetLng sets the "lng" field.
func (u *ObjectUpsertOne) SetLng(v float64) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *ObjectUpsertOne) AddLng(v float64) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateLng() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *ObjectUpsertOne) ClearLng() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearLng()
	})
}

// SetInstalledPeriod sets the "installed_period" field.
func (u *ObjectUpsertOne) SetInstalledPeriod(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetInstalledPeriod(v)
	})
}

// UpdateInstalledPeriod sets the "installed_period" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateInstalledPeriod() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateInstalledPeriod()
	})
}

// ClearInstalledPeriod clears the value of the "installed_period" field.
func (u *ObjectUpsertOne) ClearInstalledPeriod() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearInstalledPeriod()
	})
}

// SetIsRemoved sets the "is_removed" field.
func (u *ObjectUpsertOne) SetIsRemoved(v bool) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetIsRemoved(v)
	})
}

// UpdateIsRemoved sets the "is_removed" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateIsRemoved() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateIsRemoved()
	})
}

// SetRemovedPeriod sets the "removed_period" field.
func (u *ObjectUpsertOne) SetRemovedPeriod(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetRemovedPeriod(v)
	})
}

// UpdateRemovedPeriod sets the "removed_period" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateRemovedPeriod() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateRemovedPeriod()
	})
}

// ClearRemovedPeriod clears the value of the "removed_period" field.
func (u *ObjectUpsertOne) ClearRemovedPeriod() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearRemovedPeriod()
	})
}

// SetSource sets the "source" field.
func (u *ObjectUpsertOne) SetSource(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateSource() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ObjectUpsertOne) ClearSource() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearSource()
	})
}

// SetType sets the "type" field.
func (u *ObjectUpsertOne) SetType(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateType() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateType()
	})
}

// SetTags sets the "tags" field.
func (u *ObjectUpsertOne) SetTags(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateTags() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateTags()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ObjectUpsertOne) SetCreatedAt(v time.Time) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateCreatedAt() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ObjectUpsertOne) SetUpdatedAt(v time.Time) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateUpdatedAt() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ObjectUpsertOne) SetDeletedAt(v time.Time) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateDeletedAt() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ObjectUpsertOne) ClearDeletedAt() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastSync sets the "last_sync" field.
func (u *ObjectUpsertOne) SetLastSync(v time.Time) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetLastSync(v)
	})
}

// UpdateLastSync sets the "last_sync" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateLastSync() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateLastSync()
	})
}

// ClearLastSync clears the value of the "last_sync" field.
func (u *ObjectUpsertOne) ClearLastSync() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearLastSync()
	})
}

// SetNotionID sets the "notion_id" field.
func (u *ObjectUpsertOne) SetNotionID(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetNotionID(v)
	})
}

// UpdateNotionID sets the "notion_id" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateNotionID() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateNotionID()
	})
}

// ClearNotionID clears the value of the "notion_id" field.
func (u *ObjectUpsertOne) ClearNotionID() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearNotionID()
	})
}

// Exec executes the query.
func (u *ObjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ObjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ObjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ObjectUpsertOne) ID(ctx context.Context) (id puuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ObjectUpsertOne.ID is not supported by MySQL driver. Use ObjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ObjectUpsertOne) IDX(ctx context.Context) puuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ObjectCreateBulk is the builder for creating many Object entities in bulk.
type ObjectCreateBulk struct {
	config
	builders []*ObjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Object entities in the database.
func (ocb *ObjectCreateBulk) Save(ctx context.Context) ([]*Object, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Object, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ObjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *ObjectCreateBulk) SaveX(ctx context.Context) []*Object {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *ObjectCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *ObjectCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Object.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ObjectUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (ocb *ObjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ObjectUpsertBulk {
	ocb.conflict = opts
	return &ObjectUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Object.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ocb *ObjectCreateBulk) OnConflictColumns(columns ...string) *ObjectUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &ObjectUpsertBulk{
		create: ocb,
	}
}

// ObjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Object nodes.
type ObjectUpsertBulk struct {
	create *ObjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Object.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(object.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ObjectUpsertBulk) UpdateNewValues() *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(object.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(object.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Object.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ObjectUpsertBulk) Ignore() *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ObjectUpsertBulk) DoNothing() *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ObjectCreateBulk.OnConflict
// documentation for more info.
func (u *ObjectUpsertBulk) Update(set func(*ObjectUpsert)) *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ObjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ObjectUpsertBulk) SetName(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateName() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ObjectUpsertBulk) SetDescription(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateDescription() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ObjectUpsertBulk) ClearDescription() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearDescription()
	})
}

// SetLat sets the "lat" field.
func (u *ObjectUpsertBulk) SetLat(v float64) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *ObjectUpsertBulk) AddLat(v float64) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateLat() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *ObjectUpsertBulk) ClearLat() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearLat()
	})
}

// SetLng sets the "lng" field.
func (u *ObjectUpsertBulk) SetLng(v float64) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *ObjectUpsertBulk) AddLng(v float64) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateLng() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *ObjectUpsertBulk) ClearLng() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearLng()
	})
}

// SetInstalledPeriod sets the "installed_period" field.
func (u *ObjectUpsertBulk) SetInstalledPeriod(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetInstalledPeriod(v)
	})
}

// UpdateInstalledPeriod sets the "installed_period" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateInstalledPeriod() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateInstalledPeriod()
	})
}

// ClearInstalledPeriod clears the value of the "installed_period" field.
func (u *ObjectUpsertBulk) ClearInstalledPeriod() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearInstalledPeriod()
	})
}

// SetIsRemoved sets the "is_removed" field.
func (u *ObjectUpsertBulk) SetIsRemoved(v bool) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetIsRemoved(v)
	})
}

// UpdateIsRemoved sets the "is_removed" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateIsRemoved() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateIsRemoved()
	})
}

// SetRemovedPeriod sets the "removed_period" field.
func (u *ObjectUpsertBulk) SetRemovedPeriod(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetRemovedPeriod(v)
	})
}

// UpdateRemovedPeriod sets the "removed_period" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateRemovedPeriod() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateRemovedPeriod()
	})
}

// ClearRemovedPeriod clears the value of the "removed_period" field.
func (u *ObjectUpsertBulk) ClearRemovedPeriod() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearRemovedPeriod()
	})
}

// SetSource sets the "source" field.
func (u *ObjectUpsertBulk) SetSource(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateSource() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ObjectUpsertBulk) ClearSource() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearSource()
	})
}

// SetType sets the "type" field.
func (u *ObjectUpsertBulk) SetType(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateType() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateType()
	})
}

// SetTags sets the "tags" field.
func (u *ObjectUpsertBulk) SetTags(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateTags() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateTags()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ObjectUpsertBulk) SetCreatedAt(v time.Time) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateCreatedAt() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ObjectUpsertBulk) SetUpdatedAt(v time.Time) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateUpdatedAt() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ObjectUpsertBulk) SetDeletedAt(v time.Time) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateDeletedAt() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ObjectUpsertBulk) ClearDeletedAt() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastSync sets the "last_sync" field.
func (u *ObjectUpsertBulk) SetLastSync(v time.Time) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetLastSync(v)
	})
}

// UpdateLastSync sets the "last_sync" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateLastSync() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateLastSync()
	})
}

// ClearLastSync clears the value of the "last_sync" field.
func (u *ObjectUpsertBulk) ClearLastSync() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearLastSync()
	})
}

// SetNotionID sets the "notion_id" field.
func (u *ObjectUpsertBulk) SetNotionID(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetNotionID(v)
	})
}

// UpdateNotionID sets the "notion_id" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateNotionID() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateNotionID()
	})
}

// ClearNotionID clears the value of the "notion_id" field.
func (u *ObjectUpsertBulk) ClearNotionID() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearNotionID()
	})
}

// Exec executes the query.
func (u *ObjectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ObjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ObjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ObjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
