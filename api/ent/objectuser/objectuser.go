// Code generated by ent, DO NOT EDIT.

package objectuser

const (
	// Label holds the string label denoting the objectuser type in the database.
	Label = "object_user"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldObjectID holds the string denoting the object_id field in the database.
	FieldObjectID = "object_id"
	// FieldIsVisited holds the string denoting the is_visited field in the database.
	FieldIsVisited = "is_visited"
	// FieldLastVisit holds the string denoting the last_visit field in the database.
	FieldLastVisit = "last_visit"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeObject holds the string denoting the object edge name in mutations.
	EdgeObject = "object"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// ObjectFieldID holds the string denoting the ID field of the Object.
	ObjectFieldID = "id"
	// Table holds the table name of the objectuser in the database.
	Table = "object_users"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "object_users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ObjectTable is the table that holds the object relation/edge.
	ObjectTable = "object_users"
	// ObjectInverseTable is the table name for the Object entity.
	// It exists in this package in order to avoid circular dependency with the "object" package.
	ObjectInverseTable = "objects"
	// ObjectColumn is the table column denoting the object relation/edge.
	ObjectColumn = "object_id"
)

// Columns holds all SQL columns for objectuser fields.
var Columns = []string{
	FieldUserID,
	FieldObjectID,
	FieldIsVisited,
	FieldLastVisit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsVisited holds the default value on creation for the "is_visited" field.
	DefaultIsVisited bool
)
