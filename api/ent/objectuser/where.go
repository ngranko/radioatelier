// Code generated by ent, DO NOT EDIT.

package objectuser

import (
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ObjectID applies equality check predicate on the "object_id" field. It's identical to ObjectIDEQ.
func ObjectID(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// IsVisited applies equality check predicate on the "is_visited" field. It's identical to IsVisitedEQ.
func IsVisited(v bool) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVisited), v))
	})
}

// LastVisit applies equality check predicate on the "last_visit" field. It's identical to LastVisitEQ.
func LastVisit(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastVisit), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...puuid.ID) predicate.ObjectUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ObjectUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...puuid.ID) predicate.ObjectUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ObjectUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), vc))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), vc))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), vc))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), vc))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), vc))
	})
}

// ObjectIDEQ applies the EQ predicate on the "object_id" field.
func ObjectIDEQ(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDNEQ applies the NEQ predicate on the "object_id" field.
func ObjectIDNEQ(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDIn applies the In predicate on the "object_id" field.
func ObjectIDIn(vs ...puuid.ID) predicate.ObjectUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ObjectUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObjectID), v...))
	})
}

// ObjectIDNotIn applies the NotIn predicate on the "object_id" field.
func ObjectIDNotIn(vs ...puuid.ID) predicate.ObjectUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ObjectUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObjectID), v...))
	})
}

// ObjectIDGT applies the GT predicate on the "object_id" field.
func ObjectIDGT(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectID), v))
	})
}

// ObjectIDGTE applies the GTE predicate on the "object_id" field.
func ObjectIDGTE(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDLT applies the LT predicate on the "object_id" field.
func ObjectIDLT(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectID), v))
	})
}

// ObjectIDLTE applies the LTE predicate on the "object_id" field.
func ObjectIDLTE(v puuid.ID) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDContains applies the Contains predicate on the "object_id" field.
func ObjectIDContains(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldObjectID), vc))
	})
}

// ObjectIDHasPrefix applies the HasPrefix predicate on the "object_id" field.
func ObjectIDHasPrefix(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldObjectID), vc))
	})
}

// ObjectIDHasSuffix applies the HasSuffix predicate on the "object_id" field.
func ObjectIDHasSuffix(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldObjectID), vc))
	})
}

// ObjectIDEqualFold applies the EqualFold predicate on the "object_id" field.
func ObjectIDEqualFold(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldObjectID), vc))
	})
}

// ObjectIDContainsFold applies the ContainsFold predicate on the "object_id" field.
func ObjectIDContainsFold(v puuid.ID) predicate.ObjectUser {
	vc := string(v)
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldObjectID), vc))
	})
}

// IsVisitedEQ applies the EQ predicate on the "is_visited" field.
func IsVisitedEQ(v bool) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVisited), v))
	})
}

// IsVisitedNEQ applies the NEQ predicate on the "is_visited" field.
func IsVisitedNEQ(v bool) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsVisited), v))
	})
}

// LastVisitEQ applies the EQ predicate on the "last_visit" field.
func LastVisitEQ(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastVisit), v))
	})
}

// LastVisitNEQ applies the NEQ predicate on the "last_visit" field.
func LastVisitNEQ(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastVisit), v))
	})
}

// LastVisitIn applies the In predicate on the "last_visit" field.
func LastVisitIn(vs ...time.Time) predicate.ObjectUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ObjectUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastVisit), v...))
	})
}

// LastVisitNotIn applies the NotIn predicate on the "last_visit" field.
func LastVisitNotIn(vs ...time.Time) predicate.ObjectUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ObjectUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastVisit), v...))
	})
}

// LastVisitGT applies the GT predicate on the "last_visit" field.
func LastVisitGT(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastVisit), v))
	})
}

// LastVisitGTE applies the GTE predicate on the "last_visit" field.
func LastVisitGTE(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastVisit), v))
	})
}

// LastVisitLT applies the LT predicate on the "last_visit" field.
func LastVisitLT(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastVisit), v))
	})
}

// LastVisitLTE applies the LTE predicate on the "last_visit" field.
func LastVisitLTE(v time.Time) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastVisit), v))
	})
}

// LastVisitIsNil applies the IsNil predicate on the "last_visit" field.
func LastVisitIsNil() predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastVisit)))
	})
}

// LastVisitNotNil applies the NotNil predicate on the "last_visit" field.
func LastVisitNotNil() predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastVisit)))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasObject applies the HasEdge predicate on the "object" edge.
func HasObject() predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ObjectColumn),
			sqlgraph.To(ObjectInverseTable, ObjectFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ObjectTable, ObjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasObjectWith applies the HasEdge predicate on the "object" edge with a given conditions (other predicates).
func HasObjectWith(preds ...predicate.Object) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ObjectColumn),
			sqlgraph.To(ObjectInverseTable, ObjectFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ObjectTable, ObjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ObjectUser) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ObjectUser) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ObjectUser) predicate.ObjectUser {
	return predicate.ObjectUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
