// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID puuid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Login holds the value of the "login" field.
	Login string `json:"login,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin *time.Time `json:"last_login,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// NotionID holds the value of the "notion_id" field.
	NotionID *string `json:"notion_id,omitempty"`
	// IsNotionSubject holds the value of the "is_notion_subject" field.
	IsNotionSubject bool `json:"is_notion_subject,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// CreatedObjects holds the value of the created_objects edge.
	CreatedObjects []*Object `json:"created_objects,omitempty"`
	// UpdatedObjects holds the value of the updated_objects edge.
	UpdatedObjects []*Object `json:"updated_objects,omitempty"`
	// DeletedObjects holds the value of the deleted_objects edge.
	DeletedObjects []*Object `json:"deleted_objects,omitempty"`
	// CreatedCollections holds the value of the created_collections edge.
	CreatedCollections []*Collection `json:"created_collections,omitempty"`
	// UpdatedCollections holds the value of the updated_collections edge.
	UpdatedCollections []*Collection `json:"updated_collections,omitempty"`
	// Collections holds the value of the collections edge.
	Collections []*Collection `json:"collections,omitempty"`
	// ObjectInfo holds the value of the object_info edge.
	ObjectInfo []*Object `json:"object_info,omitempty"`
	// ObjectUser holds the value of the object_user edge.
	ObjectUser []*ObjectUser `json:"object_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [7]*int
}

// CreatedObjectsOrErr returns the CreatedObjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedObjectsOrErr() ([]*Object, error) {
	if e.loadedTypes[0] {
		return e.CreatedObjects, nil
	}
	return nil, &NotLoadedError{edge: "created_objects"}
}

// UpdatedObjectsOrErr returns the UpdatedObjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UpdatedObjectsOrErr() ([]*Object, error) {
	if e.loadedTypes[1] {
		return e.UpdatedObjects, nil
	}
	return nil, &NotLoadedError{edge: "updated_objects"}
}

// DeletedObjectsOrErr returns the DeletedObjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DeletedObjectsOrErr() ([]*Object, error) {
	if e.loadedTypes[2] {
		return e.DeletedObjects, nil
	}
	return nil, &NotLoadedError{edge: "deleted_objects"}
}

// CreatedCollectionsOrErr returns the CreatedCollections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedCollectionsOrErr() ([]*Collection, error) {
	if e.loadedTypes[3] {
		return e.CreatedCollections, nil
	}
	return nil, &NotLoadedError{edge: "created_collections"}
}

// UpdatedCollectionsOrErr returns the UpdatedCollections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UpdatedCollectionsOrErr() ([]*Collection, error) {
	if e.loadedTypes[4] {
		return e.UpdatedCollections, nil
	}
	return nil, &NotLoadedError{edge: "updated_collections"}
}

// CollectionsOrErr returns the Collections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CollectionsOrErr() ([]*Collection, error) {
	if e.loadedTypes[5] {
		return e.Collections, nil
	}
	return nil, &NotLoadedError{edge: "collections"}
}

// ObjectInfoOrErr returns the ObjectInfo value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ObjectInfoOrErr() ([]*Object, error) {
	if e.loadedTypes[6] {
		return e.ObjectInfo, nil
	}
	return nil, &NotLoadedError{edge: "object_info"}
}

// ObjectUserOrErr returns the ObjectUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ObjectUserOrErr() ([]*ObjectUser, error) {
	if e.loadedTypes[7] {
		return e.ObjectUser, nil
	}
	return nil, &NotLoadedError{edge: "object_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(puuid.ID)
		case user.FieldIsActive, user.FieldIsNotionSubject:
			values[i] = new(sql.NullBool)
		case user.FieldName, user.FieldEmail, user.FieldLogin, user.FieldPassword, user.FieldRole, user.FieldNotionID:
			values[i] = new(sql.NullString)
		case user.FieldLastLogin:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*puuid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login", values[i])
			} else if value.Valid {
				u.Login = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = value.String
			}
		case user.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				u.LastLogin = new(time.Time)
				*u.LastLogin = value.Time
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				u.IsActive = value.Bool
			}
		case user.FieldNotionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notion_id", values[i])
			} else if value.Valid {
				u.NotionID = new(string)
				*u.NotionID = value.String
			}
		case user.FieldIsNotionSubject:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_notion_subject", values[i])
			} else if value.Valid {
				u.IsNotionSubject = value.Bool
			}
		}
	}
	return nil
}

// QueryCreatedObjects queries the "created_objects" edge of the User entity.
func (u *User) QueryCreatedObjects() *ObjectQuery {
	return (&UserClient{config: u.config}).QueryCreatedObjects(u)
}

// QueryUpdatedObjects queries the "updated_objects" edge of the User entity.
func (u *User) QueryUpdatedObjects() *ObjectQuery {
	return (&UserClient{config: u.config}).QueryUpdatedObjects(u)
}

// QueryDeletedObjects queries the "deleted_objects" edge of the User entity.
func (u *User) QueryDeletedObjects() *ObjectQuery {
	return (&UserClient{config: u.config}).QueryDeletedObjects(u)
}

// QueryCreatedCollections queries the "created_collections" edge of the User entity.
func (u *User) QueryCreatedCollections() *CollectionQuery {
	return (&UserClient{config: u.config}).QueryCreatedCollections(u)
}

// QueryUpdatedCollections queries the "updated_collections" edge of the User entity.
func (u *User) QueryUpdatedCollections() *CollectionQuery {
	return (&UserClient{config: u.config}).QueryUpdatedCollections(u)
}

// QueryCollections queries the "collections" edge of the User entity.
func (u *User) QueryCollections() *CollectionQuery {
	return (&UserClient{config: u.config}).QueryCollections(u)
}

// QueryObjectInfo queries the "object_info" edge of the User entity.
func (u *User) QueryObjectInfo() *ObjectQuery {
	return (&UserClient{config: u.config}).QueryObjectInfo(u)
}

// QueryObjectUser queries the "object_user" edge of the User entity.
func (u *User) QueryObjectUser() *ObjectUserQuery {
	return (&UserClient{config: u.config}).QueryObjectUser(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("login=")
	builder.WriteString(u.Login)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(u.Role)
	builder.WriteString(", ")
	if v := u.LastLogin; v != nil {
		builder.WriteString("last_login=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActive))
	builder.WriteString(", ")
	if v := u.NotionID; v != nil {
		builder.WriteString("notion_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_notion_subject=")
	builder.WriteString(fmt.Sprintf("%v", u.IsNotionSubject))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
