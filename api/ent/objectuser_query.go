// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"radioatelier/ent/object"
	"radioatelier/ent/objectuser"
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ObjectUserQuery is the builder for querying ObjectUser entities.
type ObjectUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ObjectUser
	// eager-loading edges.
	withUser   *UserQuery
	withObject *ObjectQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*ObjectUser) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ObjectUserQuery builder.
func (ouq *ObjectUserQuery) Where(ps ...predicate.ObjectUser) *ObjectUserQuery {
	ouq.predicates = append(ouq.predicates, ps...)
	return ouq
}

// Limit adds a limit step to the query.
func (ouq *ObjectUserQuery) Limit(limit int) *ObjectUserQuery {
	ouq.limit = &limit
	return ouq
}

// Offset adds an offset step to the query.
func (ouq *ObjectUserQuery) Offset(offset int) *ObjectUserQuery {
	ouq.offset = &offset
	return ouq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ouq *ObjectUserQuery) Unique(unique bool) *ObjectUserQuery {
	ouq.unique = &unique
	return ouq
}

// Order adds an order step to the query.
func (ouq *ObjectUserQuery) Order(o ...OrderFunc) *ObjectUserQuery {
	ouq.order = append(ouq.order, o...)
	return ouq
}

// QueryUser chains the current query on the "user" edge.
func (ouq *ObjectUserQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(objectuser.Table, objectuser.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, objectuser.UserTable, objectuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryObject chains the current query on the "object" edge.
func (ouq *ObjectUserQuery) QueryObject() *ObjectQuery {
	query := &ObjectQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(objectuser.Table, objectuser.ObjectColumn, selector),
			sqlgraph.To(object.Table, object.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, objectuser.ObjectTable, objectuser.ObjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ObjectUser entity from the query.
// Returns a *NotFoundError when no ObjectUser was found.
func (ouq *ObjectUserQuery) First(ctx context.Context) (*ObjectUser, error) {
	nodes, err := ouq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{objectuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ouq *ObjectUserQuery) FirstX(ctx context.Context) *ObjectUser {
	node, err := ouq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single ObjectUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ObjectUser entity is found.
// Returns a *NotFoundError when no ObjectUser entities are found.
func (ouq *ObjectUserQuery) Only(ctx context.Context) (*ObjectUser, error) {
	nodes, err := ouq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{objectuser.Label}
	default:
		return nil, &NotSingularError{objectuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ouq *ObjectUserQuery) OnlyX(ctx context.Context) *ObjectUser {
	node, err := ouq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of ObjectUsers.
func (ouq *ObjectUserQuery) All(ctx context.Context) ([]*ObjectUser, error) {
	if err := ouq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ouq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ouq *ObjectUserQuery) AllX(ctx context.Context) []*ObjectUser {
	nodes, err := ouq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ouq *ObjectUserQuery) Count(ctx context.Context) (int, error) {
	if err := ouq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ouq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ouq *ObjectUserQuery) CountX(ctx context.Context) int {
	count, err := ouq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ouq *ObjectUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := ouq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ouq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ouq *ObjectUserQuery) ExistX(ctx context.Context) bool {
	exist, err := ouq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ObjectUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ouq *ObjectUserQuery) Clone() *ObjectUserQuery {
	if ouq == nil {
		return nil
	}
	return &ObjectUserQuery{
		config:     ouq.config,
		limit:      ouq.limit,
		offset:     ouq.offset,
		order:      append([]OrderFunc{}, ouq.order...),
		predicates: append([]predicate.ObjectUser{}, ouq.predicates...),
		withUser:   ouq.withUser.Clone(),
		withObject: ouq.withObject.Clone(),
		// clone intermediate query.
		sql:    ouq.sql.Clone(),
		path:   ouq.path,
		unique: ouq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *ObjectUserQuery) WithUser(opts ...func(*UserQuery)) *ObjectUserQuery {
	query := &UserQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withUser = query
	return ouq
}

// WithObject tells the query-builder to eager-load the nodes that are connected to
// the "object" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *ObjectUserQuery) WithObject(opts ...func(*ObjectQuery)) *ObjectUserQuery {
	query := &ObjectQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withObject = query
	return ouq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID puuid.ID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ObjectUser.Query().
//		GroupBy(objectuser.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ouq *ObjectUserQuery) GroupBy(field string, fields ...string) *ObjectUserGroupBy {
	grbuild := &ObjectUserGroupBy{config: ouq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ouq.sqlQuery(ctx), nil
	}
	grbuild.label = objectuser.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID puuid.ID `json:"user_id,omitempty"`
//	}
//
//	client.ObjectUser.Query().
//		Select(objectuser.FieldUserID).
//		Scan(ctx, &v)
//
func (ouq *ObjectUserQuery) Select(fields ...string) *ObjectUserSelect {
	ouq.fields = append(ouq.fields, fields...)
	selbuild := &ObjectUserSelect{ObjectUserQuery: ouq}
	selbuild.label = objectuser.Label
	selbuild.flds, selbuild.scan = &ouq.fields, selbuild.Scan
	return selbuild
}

func (ouq *ObjectUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ouq.fields {
		if !objectuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ouq.path != nil {
		prev, err := ouq.path(ctx)
		if err != nil {
			return err
		}
		ouq.sql = prev
	}
	return nil
}

func (ouq *ObjectUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ObjectUser, error) {
	var (
		nodes       = []*ObjectUser{}
		_spec       = ouq.querySpec()
		loadedTypes = [2]bool{
			ouq.withUser != nil,
			ouq.withObject != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ObjectUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ObjectUser{config: ouq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ouq.modifiers) > 0 {
		_spec.Modifiers = ouq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ouq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ouq.withUser; query != nil {
		ids := make([]puuid.ID, 0, len(nodes))
		nodeids := make(map[puuid.ID][]*ObjectUser)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := ouq.withObject; query != nil {
		ids := make([]puuid.ID, 0, len(nodes))
		nodeids := make(map[puuid.ID][]*ObjectUser)
		for i := range nodes {
			fk := nodes[i].ObjectID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(object.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "object_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Object = n
			}
		}
	}

	for i := range ouq.loadTotal {
		if err := ouq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ouq *ObjectUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ouq.querySpec()
	if len(ouq.modifiers) > 0 {
		_spec.Modifiers = ouq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ouq.driver, _spec)
}

func (ouq *ObjectUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ouq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ouq *ObjectUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   objectuser.Table,
			Columns: objectuser.Columns,
		},
		From:   ouq.sql,
		Unique: true,
	}
	if unique := ouq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ouq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := ouq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ouq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ouq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ouq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ouq *ObjectUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ouq.driver.Dialect())
	t1 := builder.Table(objectuser.Table)
	columns := ouq.fields
	if len(columns) == 0 {
		columns = objectuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ouq.sql != nil {
		selector = ouq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ouq.unique != nil && *ouq.unique {
		selector.Distinct()
	}
	for _, p := range ouq.predicates {
		p(selector)
	}
	for _, p := range ouq.order {
		p(selector)
	}
	if offset := ouq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ouq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ObjectUserGroupBy is the group-by builder for ObjectUser entities.
type ObjectUserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ougb *ObjectUserGroupBy) Aggregate(fns ...AggregateFunc) *ObjectUserGroupBy {
	ougb.fns = append(ougb.fns, fns...)
	return ougb
}

// Scan applies the group-by query and scans the result into the given value.
func (ougb *ObjectUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ougb.path(ctx)
	if err != nil {
		return err
	}
	ougb.sql = query
	return ougb.sqlScan(ctx, v)
}

func (ougb *ObjectUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ougb.fields {
		if !objectuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ougb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ougb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ougb *ObjectUserGroupBy) sqlQuery() *sql.Selector {
	selector := ougb.sql.Select()
	aggregation := make([]string, 0, len(ougb.fns))
	for _, fn := range ougb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ougb.fields)+len(ougb.fns))
		for _, f := range ougb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ougb.fields...)...)
}

// ObjectUserSelect is the builder for selecting fields of ObjectUser entities.
type ObjectUserSelect struct {
	*ObjectUserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ous *ObjectUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ous.prepareQuery(ctx); err != nil {
		return err
	}
	ous.sql = ous.ObjectUserQuery.sqlQuery(ctx)
	return ous.sqlScan(ctx, v)
}

func (ous *ObjectUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ous.sql.Query()
	if err := ous.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
