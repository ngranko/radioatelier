// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"radioatelier/ent/city"
	"radioatelier/ent/collection"
	"radioatelier/ent/object"
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"time"
)

// CityWhereInput represents a where input for filtering City queries.
type CityWhereInput struct {
	Predicates []predicate.City  `json:"-"`
	Not        *CityWhereInput   `json:"not,omitempty"`
	Or         []*CityWhereInput `json:"or,omitempty"`
	And        []*CityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *puuid.ID  `json:"id,omitempty"`
	IDNEQ   *puuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []puuid.ID `json:"idIn,omitempty"`
	IDNotIn []puuid.ID `json:"idNotIn,omitempty"`
	IDGT    *puuid.ID  `json:"idGT,omitempty"`
	IDGTE   *puuid.ID  `json:"idGTE,omitempty"`
	IDLT    *puuid.ID  `json:"idLT,omitempty"`
	IDLTE   *puuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "country" field predicates.
	Country             *string  `json:"country,omitempty"`
	CountryNEQ          *string  `json:"countryNEQ,omitempty"`
	CountryIn           []string `json:"countryIn,omitempty"`
	CountryNotIn        []string `json:"countryNotIn,omitempty"`
	CountryGT           *string  `json:"countryGT,omitempty"`
	CountryGTE          *string  `json:"countryGTE,omitempty"`
	CountryLT           *string  `json:"countryLT,omitempty"`
	CountryLTE          *string  `json:"countryLTE,omitempty"`
	CountryContains     *string  `json:"countryContains,omitempty"`
	CountryHasPrefix    *string  `json:"countryHasPrefix,omitempty"`
	CountryHasSuffix    *string  `json:"countryHasSuffix,omitempty"`
	CountryEqualFold    *string  `json:"countryEqualFold,omitempty"`
	CountryContainsFold *string  `json:"countryContainsFold,omitempty"`

	// "objects" edge predicates.
	HasObjects     *bool               `json:"hasObjects,omitempty"`
	HasObjectsWith []*ObjectWhereInput `json:"hasObjectsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CityWhereInput) AddPredicates(predicates ...predicate.City) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CityWhereInput filter on the CityQuery builder.
func (i *CityWhereInput) Filter(q *CityQuery) (*CityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCityWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCityWhereInput is returned in case the CityWhereInput is empty.
var ErrEmptyCityWhereInput = errors.New("ent: empty predicate CityWhereInput")

// P returns a predicate for filtering cities.
// An error is returned if the input is empty or invalid.
func (i *CityWhereInput) P() (predicate.City, error) {
	var predicates []predicate.City
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, city.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.City, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, city.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.City, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, city.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, city.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, city.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, city.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, city.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, city.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, city.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, city.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, city.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, city.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, city.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, city.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, city.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, city.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, city.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, city.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, city.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, city.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, city.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, city.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, city.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, city.NameContainsFold(*i.NameContainsFold))
	}
	if i.Country != nil {
		predicates = append(predicates, city.CountryEQ(*i.Country))
	}
	if i.CountryNEQ != nil {
		predicates = append(predicates, city.CountryNEQ(*i.CountryNEQ))
	}
	if len(i.CountryIn) > 0 {
		predicates = append(predicates, city.CountryIn(i.CountryIn...))
	}
	if len(i.CountryNotIn) > 0 {
		predicates = append(predicates, city.CountryNotIn(i.CountryNotIn...))
	}
	if i.CountryGT != nil {
		predicates = append(predicates, city.CountryGT(*i.CountryGT))
	}
	if i.CountryGTE != nil {
		predicates = append(predicates, city.CountryGTE(*i.CountryGTE))
	}
	if i.CountryLT != nil {
		predicates = append(predicates, city.CountryLT(*i.CountryLT))
	}
	if i.CountryLTE != nil {
		predicates = append(predicates, city.CountryLTE(*i.CountryLTE))
	}
	if i.CountryContains != nil {
		predicates = append(predicates, city.CountryContains(*i.CountryContains))
	}
	if i.CountryHasPrefix != nil {
		predicates = append(predicates, city.CountryHasPrefix(*i.CountryHasPrefix))
	}
	if i.CountryHasSuffix != nil {
		predicates = append(predicates, city.CountryHasSuffix(*i.CountryHasSuffix))
	}
	if i.CountryEqualFold != nil {
		predicates = append(predicates, city.CountryEqualFold(*i.CountryEqualFold))
	}
	if i.CountryContainsFold != nil {
		predicates = append(predicates, city.CountryContainsFold(*i.CountryContainsFold))
	}

	if i.HasObjects != nil {
		p := city.HasObjects()
		if !*i.HasObjects {
			p = city.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasObjectsWith) > 0 {
		with := make([]predicate.Object, 0, len(i.HasObjectsWith))
		for _, w := range i.HasObjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasObjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, city.HasObjectsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCityWhereInput
	case 1:
		return predicates[0], nil
	default:
		return city.And(predicates...), nil
	}
}

// CollectionWhereInput represents a where input for filtering Collection queries.
type CollectionWhereInput struct {
	Predicates []predicate.Collection  `json:"-"`
	Not        *CollectionWhereInput   `json:"not,omitempty"`
	Or         []*CollectionWhereInput `json:"or,omitempty"`
	And        []*CollectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *puuid.ID  `json:"id,omitempty"`
	IDNEQ   *puuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []puuid.ID `json:"idIn,omitempty"`
	IDNotIn []puuid.ID `json:"idNotIn,omitempty"`
	IDGT    *puuid.ID  `json:"idGT,omitempty"`
	IDGTE   *puuid.ID  `json:"idGTE,omitempty"`
	IDLT    *puuid.ID  `json:"idLT,omitempty"`
	IDLTE   *puuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_by" edge predicates.
	HasCreatedBy     *bool             `json:"hasCreatedBy,omitempty"`
	HasCreatedByWith []*UserWhereInput `json:"hasCreatedByWith,omitempty"`

	// "updated_by" edge predicates.
	HasUpdatedBy     *bool             `json:"hasUpdatedBy,omitempty"`
	HasUpdatedByWith []*UserWhereInput `json:"hasUpdatedByWith,omitempty"`

	// "objects" edge predicates.
	HasObjects     *bool               `json:"hasObjects,omitempty"`
	HasObjectsWith []*ObjectWhereInput `json:"hasObjectsWith,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CollectionWhereInput) AddPredicates(predicates ...predicate.Collection) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CollectionWhereInput filter on the CollectionQuery builder.
func (i *CollectionWhereInput) Filter(q *CollectionQuery) (*CollectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCollectionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCollectionWhereInput is returned in case the CollectionWhereInput is empty.
var ErrEmptyCollectionWhereInput = errors.New("ent: empty predicate CollectionWhereInput")

// P returns a predicate for filtering collections.
// An error is returned if the input is empty or invalid.
func (i *CollectionWhereInput) P() (predicate.Collection, error) {
	var predicates []predicate.Collection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, collection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Collection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, collection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Collection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, collection.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, collection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, collection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, collection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, collection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, collection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, collection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, collection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, collection.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, collection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, collection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, collection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, collection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, collection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, collection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, collection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, collection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, collection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, collection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, collection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, collection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, collection.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, collection.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, collection.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, collection.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, collection.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, collection.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, collection.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, collection.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, collection.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, collection.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, collection.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, collection.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, collection.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, collection.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, collection.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, collection.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, collection.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, collection.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, collection.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, collection.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, collection.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, collection.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, collection.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, collection.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, collection.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, collection.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, collection.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, collection.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, collection.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, collection.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, collection.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, collection.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasCreatedBy != nil {
		p := collection.HasCreatedBy()
		if !*i.HasCreatedBy {
			p = collection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasCreatedByWith))
		for _, w := range i.HasCreatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, collection.HasCreatedByWith(with...))
	}
	if i.HasUpdatedBy != nil {
		p := collection.HasUpdatedBy()
		if !*i.HasUpdatedBy {
			p = collection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUpdatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUpdatedByWith))
		for _, w := range i.HasUpdatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUpdatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, collection.HasUpdatedByWith(with...))
	}
	if i.HasObjects != nil {
		p := collection.HasObjects()
		if !*i.HasObjects {
			p = collection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasObjectsWith) > 0 {
		with := make([]predicate.Object, 0, len(i.HasObjectsWith))
		for _, w := range i.HasObjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasObjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, collection.HasObjectsWith(with...))
	}
	if i.HasUsers != nil {
		p := collection.HasUsers()
		if !*i.HasUsers {
			p = collection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, collection.HasUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCollectionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return collection.And(predicates...), nil
	}
}

// ObjectWhereInput represents a where input for filtering Object queries.
type ObjectWhereInput struct {
	Predicates []predicate.Object  `json:"-"`
	Not        *ObjectWhereInput   `json:"not,omitempty"`
	Or         []*ObjectWhereInput `json:"or,omitempty"`
	And        []*ObjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *puuid.ID  `json:"id,omitempty"`
	IDNEQ   *puuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []puuid.ID `json:"idIn,omitempty"`
	IDNotIn []puuid.ID `json:"idNotIn,omitempty"`
	IDGT    *puuid.ID  `json:"idGT,omitempty"`
	IDGTE   *puuid.ID  `json:"idGTE,omitempty"`
	IDLT    *puuid.ID  `json:"idLT,omitempty"`
	IDLTE   *puuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "address" field predicates.
	Address             *string  `json:"address,omitempty"`
	AddressNEQ          *string  `json:"addressNEQ,omitempty"`
	AddressIn           []string `json:"addressIn,omitempty"`
	AddressNotIn        []string `json:"addressNotIn,omitempty"`
	AddressGT           *string  `json:"addressGT,omitempty"`
	AddressGTE          *string  `json:"addressGTE,omitempty"`
	AddressLT           *string  `json:"addressLT,omitempty"`
	AddressLTE          *string  `json:"addressLTE,omitempty"`
	AddressContains     *string  `json:"addressContains,omitempty"`
	AddressHasPrefix    *string  `json:"addressHasPrefix,omitempty"`
	AddressHasSuffix    *string  `json:"addressHasSuffix,omitempty"`
	AddressIsNil        bool     `json:"addressIsNil,omitempty"`
	AddressNotNil       bool     `json:"addressNotNil,omitempty"`
	AddressEqualFold    *string  `json:"addressEqualFold,omitempty"`
	AddressContainsFold *string  `json:"addressContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "lat" field predicates.
	Lat       *float64  `json:"lat,omitempty"`
	LatNEQ    *float64  `json:"latNEQ,omitempty"`
	LatIn     []float64 `json:"latIn,omitempty"`
	LatNotIn  []float64 `json:"latNotIn,omitempty"`
	LatGT     *float64  `json:"latGT,omitempty"`
	LatGTE    *float64  `json:"latGTE,omitempty"`
	LatLT     *float64  `json:"latLT,omitempty"`
	LatLTE    *float64  `json:"latLTE,omitempty"`
	LatIsNil  bool      `json:"latIsNil,omitempty"`
	LatNotNil bool      `json:"latNotNil,omitempty"`

	// "lng" field predicates.
	Lng       *float64  `json:"lng,omitempty"`
	LngNEQ    *float64  `json:"lngNEQ,omitempty"`
	LngIn     []float64 `json:"lngIn,omitempty"`
	LngNotIn  []float64 `json:"lngNotIn,omitempty"`
	LngGT     *float64  `json:"lngGT,omitempty"`
	LngGTE    *float64  `json:"lngGTE,omitempty"`
	LngLT     *float64  `json:"lngLT,omitempty"`
	LngLTE    *float64  `json:"lngLTE,omitempty"`
	LngIsNil  bool      `json:"lngIsNil,omitempty"`
	LngNotNil bool      `json:"lngNotNil,omitempty"`

	// "installed_period" field predicates.
	InstalledPeriod             *string  `json:"installedPeriod,omitempty"`
	InstalledPeriodNEQ          *string  `json:"installedPeriodNEQ,omitempty"`
	InstalledPeriodIn           []string `json:"installedPeriodIn,omitempty"`
	InstalledPeriodNotIn        []string `json:"installedPeriodNotIn,omitempty"`
	InstalledPeriodGT           *string  `json:"installedPeriodGT,omitempty"`
	InstalledPeriodGTE          *string  `json:"installedPeriodGTE,omitempty"`
	InstalledPeriodLT           *string  `json:"installedPeriodLT,omitempty"`
	InstalledPeriodLTE          *string  `json:"installedPeriodLTE,omitempty"`
	InstalledPeriodContains     *string  `json:"installedPeriodContains,omitempty"`
	InstalledPeriodHasPrefix    *string  `json:"installedPeriodHasPrefix,omitempty"`
	InstalledPeriodHasSuffix    *string  `json:"installedPeriodHasSuffix,omitempty"`
	InstalledPeriodIsNil        bool     `json:"installedPeriodIsNil,omitempty"`
	InstalledPeriodNotNil       bool     `json:"installedPeriodNotNil,omitempty"`
	InstalledPeriodEqualFold    *string  `json:"installedPeriodEqualFold,omitempty"`
	InstalledPeriodContainsFold *string  `json:"installedPeriodContainsFold,omitempty"`

	// "is_removed" field predicates.
	IsRemoved    *bool `json:"isRemoved,omitempty"`
	IsRemovedNEQ *bool `json:"isRemovedNEQ,omitempty"`

	// "removed_period" field predicates.
	RemovedPeriod             *string  `json:"removedPeriod,omitempty"`
	RemovedPeriodNEQ          *string  `json:"removedPeriodNEQ,omitempty"`
	RemovedPeriodIn           []string `json:"removedPeriodIn,omitempty"`
	RemovedPeriodNotIn        []string `json:"removedPeriodNotIn,omitempty"`
	RemovedPeriodGT           *string  `json:"removedPeriodGT,omitempty"`
	RemovedPeriodGTE          *string  `json:"removedPeriodGTE,omitempty"`
	RemovedPeriodLT           *string  `json:"removedPeriodLT,omitempty"`
	RemovedPeriodLTE          *string  `json:"removedPeriodLTE,omitempty"`
	RemovedPeriodContains     *string  `json:"removedPeriodContains,omitempty"`
	RemovedPeriodHasPrefix    *string  `json:"removedPeriodHasPrefix,omitempty"`
	RemovedPeriodHasSuffix    *string  `json:"removedPeriodHasSuffix,omitempty"`
	RemovedPeriodIsNil        bool     `json:"removedPeriodIsNil,omitempty"`
	RemovedPeriodNotNil       bool     `json:"removedPeriodNotNil,omitempty"`
	RemovedPeriodEqualFold    *string  `json:"removedPeriodEqualFold,omitempty"`
	RemovedPeriodContainsFold *string  `json:"removedPeriodContainsFold,omitempty"`

	// "source" field predicates.
	Source             *string  `json:"source,omitempty"`
	SourceNEQ          *string  `json:"sourceNEQ,omitempty"`
	SourceIn           []string `json:"sourceIn,omitempty"`
	SourceNotIn        []string `json:"sourceNotIn,omitempty"`
	SourceGT           *string  `json:"sourceGT,omitempty"`
	SourceGTE          *string  `json:"sourceGTE,omitempty"`
	SourceLT           *string  `json:"sourceLT,omitempty"`
	SourceLTE          *string  `json:"sourceLTE,omitempty"`
	SourceContains     *string  `json:"sourceContains,omitempty"`
	SourceHasPrefix    *string  `json:"sourceHasPrefix,omitempty"`
	SourceHasSuffix    *string  `json:"sourceHasSuffix,omitempty"`
	SourceIsNil        bool     `json:"sourceIsNil,omitempty"`
	SourceNotNil       bool     `json:"sourceNotNil,omitempty"`
	SourceEqualFold    *string  `json:"sourceEqualFold,omitempty"`
	SourceContainsFold *string  `json:"sourceContainsFold,omitempty"`

	// "type" field predicates.
	Type             *string  `json:"type,omitempty"`
	TypeNEQ          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGT           *string  `json:"typeGT,omitempty"`
	TypeGTE          *string  `json:"typeGTE,omitempty"`
	TypeLT           *string  `json:"typeLT,omitempty"`
	TypeLTE          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`

	// "tags" field predicates.
	Tags             *string  `json:"tags,omitempty"`
	TagsNEQ          *string  `json:"tagsNEQ,omitempty"`
	TagsIn           []string `json:"tagsIn,omitempty"`
	TagsNotIn        []string `json:"tagsNotIn,omitempty"`
	TagsGT           *string  `json:"tagsGT,omitempty"`
	TagsGTE          *string  `json:"tagsGTE,omitempty"`
	TagsLT           *string  `json:"tagsLT,omitempty"`
	TagsLTE          *string  `json:"tagsLTE,omitempty"`
	TagsContains     *string  `json:"tagsContains,omitempty"`
	TagsHasPrefix    *string  `json:"tagsHasPrefix,omitempty"`
	TagsHasSuffix    *string  `json:"tagsHasSuffix,omitempty"`
	TagsEqualFold    *string  `json:"tagsEqualFold,omitempty"`
	TagsContainsFold *string  `json:"tagsContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "last_sync" field predicates.
	LastSync       *time.Time  `json:"lastSync,omitempty"`
	LastSyncNEQ    *time.Time  `json:"lastSyncNEQ,omitempty"`
	LastSyncIn     []time.Time `json:"lastSyncIn,omitempty"`
	LastSyncNotIn  []time.Time `json:"lastSyncNotIn,omitempty"`
	LastSyncGT     *time.Time  `json:"lastSyncGT,omitempty"`
	LastSyncGTE    *time.Time  `json:"lastSyncGTE,omitempty"`
	LastSyncLT     *time.Time  `json:"lastSyncLT,omitempty"`
	LastSyncLTE    *time.Time  `json:"lastSyncLTE,omitempty"`
	LastSyncIsNil  bool        `json:"lastSyncIsNil,omitempty"`
	LastSyncNotNil bool        `json:"lastSyncNotNil,omitempty"`

	// "notion_id" field predicates.
	NotionID             *string  `json:"notionID,omitempty"`
	NotionIDNEQ          *string  `json:"notionIDNEQ,omitempty"`
	NotionIDIn           []string `json:"notionIDIn,omitempty"`
	NotionIDNotIn        []string `json:"notionIDNotIn,omitempty"`
	NotionIDGT           *string  `json:"notionIDGT,omitempty"`
	NotionIDGTE          *string  `json:"notionIDGTE,omitempty"`
	NotionIDLT           *string  `json:"notionIDLT,omitempty"`
	NotionIDLTE          *string  `json:"notionIDLTE,omitempty"`
	NotionIDContains     *string  `json:"notionIDContains,omitempty"`
	NotionIDHasPrefix    *string  `json:"notionIDHasPrefix,omitempty"`
	NotionIDHasSuffix    *string  `json:"notionIDHasSuffix,omitempty"`
	NotionIDIsNil        bool     `json:"notionIDIsNil,omitempty"`
	NotionIDNotNil       bool     `json:"notionIDNotNil,omitempty"`
	NotionIDEqualFold    *string  `json:"notionIDEqualFold,omitempty"`
	NotionIDContainsFold *string  `json:"notionIDContainsFold,omitempty"`

	// "created_by" edge predicates.
	HasCreatedBy     *bool             `json:"hasCreatedBy,omitempty"`
	HasCreatedByWith []*UserWhereInput `json:"hasCreatedByWith,omitempty"`

	// "updated_by" edge predicates.
	HasUpdatedBy     *bool             `json:"hasUpdatedBy,omitempty"`
	HasUpdatedByWith []*UserWhereInput `json:"hasUpdatedByWith,omitempty"`

	// "deleted_by" edge predicates.
	HasDeletedBy     *bool             `json:"hasDeletedBy,omitempty"`
	HasDeletedByWith []*UserWhereInput `json:"hasDeletedByWith,omitempty"`

	// "collections" edge predicates.
	HasCollections     *bool                   `json:"hasCollections,omitempty"`
	HasCollectionsWith []*CollectionWhereInput `json:"hasCollectionsWith,omitempty"`

	// "user_info" edge predicates.
	HasUserInfo     *bool             `json:"hasUserInfo,omitempty"`
	HasUserInfoWith []*UserWhereInput `json:"hasUserInfoWith,omitempty"`

	// "city" edge predicates.
	HasCity     *bool             `json:"hasCity,omitempty"`
	HasCityWith []*CityWhereInput `json:"hasCityWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ObjectWhereInput) AddPredicates(predicates ...predicate.Object) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ObjectWhereInput filter on the ObjectQuery builder.
func (i *ObjectWhereInput) Filter(q *ObjectQuery) (*ObjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyObjectWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyObjectWhereInput is returned in case the ObjectWhereInput is empty.
var ErrEmptyObjectWhereInput = errors.New("ent: empty predicate ObjectWhereInput")

// P returns a predicate for filtering objects.
// An error is returned if the input is empty or invalid.
func (i *ObjectWhereInput) P() (predicate.Object, error) {
	var predicates []predicate.Object
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, object.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Object, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, object.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Object, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, object.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, object.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, object.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, object.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, object.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, object.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, object.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, object.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, object.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, object.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, object.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, object.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, object.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, object.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, object.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, object.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, object.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, object.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, object.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, object.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, object.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, object.NameContainsFold(*i.NameContainsFold))
	}
	if i.Address != nil {
		predicates = append(predicates, object.AddressEQ(*i.Address))
	}
	if i.AddressNEQ != nil {
		predicates = append(predicates, object.AddressNEQ(*i.AddressNEQ))
	}
	if len(i.AddressIn) > 0 {
		predicates = append(predicates, object.AddressIn(i.AddressIn...))
	}
	if len(i.AddressNotIn) > 0 {
		predicates = append(predicates, object.AddressNotIn(i.AddressNotIn...))
	}
	if i.AddressGT != nil {
		predicates = append(predicates, object.AddressGT(*i.AddressGT))
	}
	if i.AddressGTE != nil {
		predicates = append(predicates, object.AddressGTE(*i.AddressGTE))
	}
	if i.AddressLT != nil {
		predicates = append(predicates, object.AddressLT(*i.AddressLT))
	}
	if i.AddressLTE != nil {
		predicates = append(predicates, object.AddressLTE(*i.AddressLTE))
	}
	if i.AddressContains != nil {
		predicates = append(predicates, object.AddressContains(*i.AddressContains))
	}
	if i.AddressHasPrefix != nil {
		predicates = append(predicates, object.AddressHasPrefix(*i.AddressHasPrefix))
	}
	if i.AddressHasSuffix != nil {
		predicates = append(predicates, object.AddressHasSuffix(*i.AddressHasSuffix))
	}
	if i.AddressIsNil {
		predicates = append(predicates, object.AddressIsNil())
	}
	if i.AddressNotNil {
		predicates = append(predicates, object.AddressNotNil())
	}
	if i.AddressEqualFold != nil {
		predicates = append(predicates, object.AddressEqualFold(*i.AddressEqualFold))
	}
	if i.AddressContainsFold != nil {
		predicates = append(predicates, object.AddressContainsFold(*i.AddressContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, object.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, object.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, object.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, object.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, object.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, object.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, object.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, object.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, object.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, object.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, object.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, object.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, object.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, object.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, object.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Lat != nil {
		predicates = append(predicates, object.LatEQ(*i.Lat))
	}
	if i.LatNEQ != nil {
		predicates = append(predicates, object.LatNEQ(*i.LatNEQ))
	}
	if len(i.LatIn) > 0 {
		predicates = append(predicates, object.LatIn(i.LatIn...))
	}
	if len(i.LatNotIn) > 0 {
		predicates = append(predicates, object.LatNotIn(i.LatNotIn...))
	}
	if i.LatGT != nil {
		predicates = append(predicates, object.LatGT(*i.LatGT))
	}
	if i.LatGTE != nil {
		predicates = append(predicates, object.LatGTE(*i.LatGTE))
	}
	if i.LatLT != nil {
		predicates = append(predicates, object.LatLT(*i.LatLT))
	}
	if i.LatLTE != nil {
		predicates = append(predicates, object.LatLTE(*i.LatLTE))
	}
	if i.LatIsNil {
		predicates = append(predicates, object.LatIsNil())
	}
	if i.LatNotNil {
		predicates = append(predicates, object.LatNotNil())
	}
	if i.Lng != nil {
		predicates = append(predicates, object.LngEQ(*i.Lng))
	}
	if i.LngNEQ != nil {
		predicates = append(predicates, object.LngNEQ(*i.LngNEQ))
	}
	if len(i.LngIn) > 0 {
		predicates = append(predicates, object.LngIn(i.LngIn...))
	}
	if len(i.LngNotIn) > 0 {
		predicates = append(predicates, object.LngNotIn(i.LngNotIn...))
	}
	if i.LngGT != nil {
		predicates = append(predicates, object.LngGT(*i.LngGT))
	}
	if i.LngGTE != nil {
		predicates = append(predicates, object.LngGTE(*i.LngGTE))
	}
	if i.LngLT != nil {
		predicates = append(predicates, object.LngLT(*i.LngLT))
	}
	if i.LngLTE != nil {
		predicates = append(predicates, object.LngLTE(*i.LngLTE))
	}
	if i.LngIsNil {
		predicates = append(predicates, object.LngIsNil())
	}
	if i.LngNotNil {
		predicates = append(predicates, object.LngNotNil())
	}
	if i.InstalledPeriod != nil {
		predicates = append(predicates, object.InstalledPeriodEQ(*i.InstalledPeriod))
	}
	if i.InstalledPeriodNEQ != nil {
		predicates = append(predicates, object.InstalledPeriodNEQ(*i.InstalledPeriodNEQ))
	}
	if len(i.InstalledPeriodIn) > 0 {
		predicates = append(predicates, object.InstalledPeriodIn(i.InstalledPeriodIn...))
	}
	if len(i.InstalledPeriodNotIn) > 0 {
		predicates = append(predicates, object.InstalledPeriodNotIn(i.InstalledPeriodNotIn...))
	}
	if i.InstalledPeriodGT != nil {
		predicates = append(predicates, object.InstalledPeriodGT(*i.InstalledPeriodGT))
	}
	if i.InstalledPeriodGTE != nil {
		predicates = append(predicates, object.InstalledPeriodGTE(*i.InstalledPeriodGTE))
	}
	if i.InstalledPeriodLT != nil {
		predicates = append(predicates, object.InstalledPeriodLT(*i.InstalledPeriodLT))
	}
	if i.InstalledPeriodLTE != nil {
		predicates = append(predicates, object.InstalledPeriodLTE(*i.InstalledPeriodLTE))
	}
	if i.InstalledPeriodContains != nil {
		predicates = append(predicates, object.InstalledPeriodContains(*i.InstalledPeriodContains))
	}
	if i.InstalledPeriodHasPrefix != nil {
		predicates = append(predicates, object.InstalledPeriodHasPrefix(*i.InstalledPeriodHasPrefix))
	}
	if i.InstalledPeriodHasSuffix != nil {
		predicates = append(predicates, object.InstalledPeriodHasSuffix(*i.InstalledPeriodHasSuffix))
	}
	if i.InstalledPeriodIsNil {
		predicates = append(predicates, object.InstalledPeriodIsNil())
	}
	if i.InstalledPeriodNotNil {
		predicates = append(predicates, object.InstalledPeriodNotNil())
	}
	if i.InstalledPeriodEqualFold != nil {
		predicates = append(predicates, object.InstalledPeriodEqualFold(*i.InstalledPeriodEqualFold))
	}
	if i.InstalledPeriodContainsFold != nil {
		predicates = append(predicates, object.InstalledPeriodContainsFold(*i.InstalledPeriodContainsFold))
	}
	if i.IsRemoved != nil {
		predicates = append(predicates, object.IsRemovedEQ(*i.IsRemoved))
	}
	if i.IsRemovedNEQ != nil {
		predicates = append(predicates, object.IsRemovedNEQ(*i.IsRemovedNEQ))
	}
	if i.RemovedPeriod != nil {
		predicates = append(predicates, object.RemovedPeriodEQ(*i.RemovedPeriod))
	}
	if i.RemovedPeriodNEQ != nil {
		predicates = append(predicates, object.RemovedPeriodNEQ(*i.RemovedPeriodNEQ))
	}
	if len(i.RemovedPeriodIn) > 0 {
		predicates = append(predicates, object.RemovedPeriodIn(i.RemovedPeriodIn...))
	}
	if len(i.RemovedPeriodNotIn) > 0 {
		predicates = append(predicates, object.RemovedPeriodNotIn(i.RemovedPeriodNotIn...))
	}
	if i.RemovedPeriodGT != nil {
		predicates = append(predicates, object.RemovedPeriodGT(*i.RemovedPeriodGT))
	}
	if i.RemovedPeriodGTE != nil {
		predicates = append(predicates, object.RemovedPeriodGTE(*i.RemovedPeriodGTE))
	}
	if i.RemovedPeriodLT != nil {
		predicates = append(predicates, object.RemovedPeriodLT(*i.RemovedPeriodLT))
	}
	if i.RemovedPeriodLTE != nil {
		predicates = append(predicates, object.RemovedPeriodLTE(*i.RemovedPeriodLTE))
	}
	if i.RemovedPeriodContains != nil {
		predicates = append(predicates, object.RemovedPeriodContains(*i.RemovedPeriodContains))
	}
	if i.RemovedPeriodHasPrefix != nil {
		predicates = append(predicates, object.RemovedPeriodHasPrefix(*i.RemovedPeriodHasPrefix))
	}
	if i.RemovedPeriodHasSuffix != nil {
		predicates = append(predicates, object.RemovedPeriodHasSuffix(*i.RemovedPeriodHasSuffix))
	}
	if i.RemovedPeriodIsNil {
		predicates = append(predicates, object.RemovedPeriodIsNil())
	}
	if i.RemovedPeriodNotNil {
		predicates = append(predicates, object.RemovedPeriodNotNil())
	}
	if i.RemovedPeriodEqualFold != nil {
		predicates = append(predicates, object.RemovedPeriodEqualFold(*i.RemovedPeriodEqualFold))
	}
	if i.RemovedPeriodContainsFold != nil {
		predicates = append(predicates, object.RemovedPeriodContainsFold(*i.RemovedPeriodContainsFold))
	}
	if i.Source != nil {
		predicates = append(predicates, object.SourceEQ(*i.Source))
	}
	if i.SourceNEQ != nil {
		predicates = append(predicates, object.SourceNEQ(*i.SourceNEQ))
	}
	if len(i.SourceIn) > 0 {
		predicates = append(predicates, object.SourceIn(i.SourceIn...))
	}
	if len(i.SourceNotIn) > 0 {
		predicates = append(predicates, object.SourceNotIn(i.SourceNotIn...))
	}
	if i.SourceGT != nil {
		predicates = append(predicates, object.SourceGT(*i.SourceGT))
	}
	if i.SourceGTE != nil {
		predicates = append(predicates, object.SourceGTE(*i.SourceGTE))
	}
	if i.SourceLT != nil {
		predicates = append(predicates, object.SourceLT(*i.SourceLT))
	}
	if i.SourceLTE != nil {
		predicates = append(predicates, object.SourceLTE(*i.SourceLTE))
	}
	if i.SourceContains != nil {
		predicates = append(predicates, object.SourceContains(*i.SourceContains))
	}
	if i.SourceHasPrefix != nil {
		predicates = append(predicates, object.SourceHasPrefix(*i.SourceHasPrefix))
	}
	if i.SourceHasSuffix != nil {
		predicates = append(predicates, object.SourceHasSuffix(*i.SourceHasSuffix))
	}
	if i.SourceIsNil {
		predicates = append(predicates, object.SourceIsNil())
	}
	if i.SourceNotNil {
		predicates = append(predicates, object.SourceNotNil())
	}
	if i.SourceEqualFold != nil {
		predicates = append(predicates, object.SourceEqualFold(*i.SourceEqualFold))
	}
	if i.SourceContainsFold != nil {
		predicates = append(predicates, object.SourceContainsFold(*i.SourceContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, object.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, object.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, object.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, object.TypeNotIn(i.TypeNotIn...))
	}
	if i.TypeGT != nil {
		predicates = append(predicates, object.TypeGT(*i.TypeGT))
	}
	if i.TypeGTE != nil {
		predicates = append(predicates, object.TypeGTE(*i.TypeGTE))
	}
	if i.TypeLT != nil {
		predicates = append(predicates, object.TypeLT(*i.TypeLT))
	}
	if i.TypeLTE != nil {
		predicates = append(predicates, object.TypeLTE(*i.TypeLTE))
	}
	if i.TypeContains != nil {
		predicates = append(predicates, object.TypeContains(*i.TypeContains))
	}
	if i.TypeHasPrefix != nil {
		predicates = append(predicates, object.TypeHasPrefix(*i.TypeHasPrefix))
	}
	if i.TypeHasSuffix != nil {
		predicates = append(predicates, object.TypeHasSuffix(*i.TypeHasSuffix))
	}
	if i.TypeEqualFold != nil {
		predicates = append(predicates, object.TypeEqualFold(*i.TypeEqualFold))
	}
	if i.TypeContainsFold != nil {
		predicates = append(predicates, object.TypeContainsFold(*i.TypeContainsFold))
	}
	if i.Tags != nil {
		predicates = append(predicates, object.TagsEQ(*i.Tags))
	}
	if i.TagsNEQ != nil {
		predicates = append(predicates, object.TagsNEQ(*i.TagsNEQ))
	}
	if len(i.TagsIn) > 0 {
		predicates = append(predicates, object.TagsIn(i.TagsIn...))
	}
	if len(i.TagsNotIn) > 0 {
		predicates = append(predicates, object.TagsNotIn(i.TagsNotIn...))
	}
	if i.TagsGT != nil {
		predicates = append(predicates, object.TagsGT(*i.TagsGT))
	}
	if i.TagsGTE != nil {
		predicates = append(predicates, object.TagsGTE(*i.TagsGTE))
	}
	if i.TagsLT != nil {
		predicates = append(predicates, object.TagsLT(*i.TagsLT))
	}
	if i.TagsLTE != nil {
		predicates = append(predicates, object.TagsLTE(*i.TagsLTE))
	}
	if i.TagsContains != nil {
		predicates = append(predicates, object.TagsContains(*i.TagsContains))
	}
	if i.TagsHasPrefix != nil {
		predicates = append(predicates, object.TagsHasPrefix(*i.TagsHasPrefix))
	}
	if i.TagsHasSuffix != nil {
		predicates = append(predicates, object.TagsHasSuffix(*i.TagsHasSuffix))
	}
	if i.TagsEqualFold != nil {
		predicates = append(predicates, object.TagsEqualFold(*i.TagsEqualFold))
	}
	if i.TagsContainsFold != nil {
		predicates = append(predicates, object.TagsContainsFold(*i.TagsContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, object.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, object.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, object.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, object.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, object.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, object.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, object.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, object.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, object.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, object.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, object.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, object.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, object.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, object.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, object.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, object.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, object.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, object.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, object.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, object.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, object.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, object.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, object.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, object.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, object.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, object.DeletedAtNotNil())
	}
	if i.LastSync != nil {
		predicates = append(predicates, object.LastSyncEQ(*i.LastSync))
	}
	if i.LastSyncNEQ != nil {
		predicates = append(predicates, object.LastSyncNEQ(*i.LastSyncNEQ))
	}
	if len(i.LastSyncIn) > 0 {
		predicates = append(predicates, object.LastSyncIn(i.LastSyncIn...))
	}
	if len(i.LastSyncNotIn) > 0 {
		predicates = append(predicates, object.LastSyncNotIn(i.LastSyncNotIn...))
	}
	if i.LastSyncGT != nil {
		predicates = append(predicates, object.LastSyncGT(*i.LastSyncGT))
	}
	if i.LastSyncGTE != nil {
		predicates = append(predicates, object.LastSyncGTE(*i.LastSyncGTE))
	}
	if i.LastSyncLT != nil {
		predicates = append(predicates, object.LastSyncLT(*i.LastSyncLT))
	}
	if i.LastSyncLTE != nil {
		predicates = append(predicates, object.LastSyncLTE(*i.LastSyncLTE))
	}
	if i.LastSyncIsNil {
		predicates = append(predicates, object.LastSyncIsNil())
	}
	if i.LastSyncNotNil {
		predicates = append(predicates, object.LastSyncNotNil())
	}
	if i.NotionID != nil {
		predicates = append(predicates, object.NotionIDEQ(*i.NotionID))
	}
	if i.NotionIDNEQ != nil {
		predicates = append(predicates, object.NotionIDNEQ(*i.NotionIDNEQ))
	}
	if len(i.NotionIDIn) > 0 {
		predicates = append(predicates, object.NotionIDIn(i.NotionIDIn...))
	}
	if len(i.NotionIDNotIn) > 0 {
		predicates = append(predicates, object.NotionIDNotIn(i.NotionIDNotIn...))
	}
	if i.NotionIDGT != nil {
		predicates = append(predicates, object.NotionIDGT(*i.NotionIDGT))
	}
	if i.NotionIDGTE != nil {
		predicates = append(predicates, object.NotionIDGTE(*i.NotionIDGTE))
	}
	if i.NotionIDLT != nil {
		predicates = append(predicates, object.NotionIDLT(*i.NotionIDLT))
	}
	if i.NotionIDLTE != nil {
		predicates = append(predicates, object.NotionIDLTE(*i.NotionIDLTE))
	}
	if i.NotionIDContains != nil {
		predicates = append(predicates, object.NotionIDContains(*i.NotionIDContains))
	}
	if i.NotionIDHasPrefix != nil {
		predicates = append(predicates, object.NotionIDHasPrefix(*i.NotionIDHasPrefix))
	}
	if i.NotionIDHasSuffix != nil {
		predicates = append(predicates, object.NotionIDHasSuffix(*i.NotionIDHasSuffix))
	}
	if i.NotionIDIsNil {
		predicates = append(predicates, object.NotionIDIsNil())
	}
	if i.NotionIDNotNil {
		predicates = append(predicates, object.NotionIDNotNil())
	}
	if i.NotionIDEqualFold != nil {
		predicates = append(predicates, object.NotionIDEqualFold(*i.NotionIDEqualFold))
	}
	if i.NotionIDContainsFold != nil {
		predicates = append(predicates, object.NotionIDContainsFold(*i.NotionIDContainsFold))
	}

	if i.HasCreatedBy != nil {
		p := object.HasCreatedBy()
		if !*i.HasCreatedBy {
			p = object.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasCreatedByWith))
		for _, w := range i.HasCreatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, object.HasCreatedByWith(with...))
	}
	if i.HasUpdatedBy != nil {
		p := object.HasUpdatedBy()
		if !*i.HasUpdatedBy {
			p = object.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUpdatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUpdatedByWith))
		for _, w := range i.HasUpdatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUpdatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, object.HasUpdatedByWith(with...))
	}
	if i.HasDeletedBy != nil {
		p := object.HasDeletedBy()
		if !*i.HasDeletedBy {
			p = object.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDeletedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasDeletedByWith))
		for _, w := range i.HasDeletedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDeletedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, object.HasDeletedByWith(with...))
	}
	if i.HasCollections != nil {
		p := object.HasCollections()
		if !*i.HasCollections {
			p = object.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCollectionsWith) > 0 {
		with := make([]predicate.Collection, 0, len(i.HasCollectionsWith))
		for _, w := range i.HasCollectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCollectionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, object.HasCollectionsWith(with...))
	}
	if i.HasUserInfo != nil {
		p := object.HasUserInfo()
		if !*i.HasUserInfo {
			p = object.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserInfoWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserInfoWith))
		for _, w := range i.HasUserInfoWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserInfoWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, object.HasUserInfoWith(with...))
	}
	if i.HasCity != nil {
		p := object.HasCity()
		if !*i.HasCity {
			p = object.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCityWith) > 0 {
		with := make([]predicate.City, 0, len(i.HasCityWith))
		for _, w := range i.HasCityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, object.HasCityWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyObjectWhereInput
	case 1:
		return predicates[0], nil
	default:
		return object.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *puuid.ID  `json:"id,omitempty"`
	IDNEQ   *puuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []puuid.ID `json:"idIn,omitempty"`
	IDNotIn []puuid.ID `json:"idNotIn,omitempty"`
	IDGT    *puuid.ID  `json:"idGT,omitempty"`
	IDGTE   *puuid.ID  `json:"idGTE,omitempty"`
	IDLT    *puuid.ID  `json:"idLT,omitempty"`
	IDLTE   *puuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "login" field predicates.
	Login             *string  `json:"login,omitempty"`
	LoginNEQ          *string  `json:"loginNEQ,omitempty"`
	LoginIn           []string `json:"loginIn,omitempty"`
	LoginNotIn        []string `json:"loginNotIn,omitempty"`
	LoginGT           *string  `json:"loginGT,omitempty"`
	LoginGTE          *string  `json:"loginGTE,omitempty"`
	LoginLT           *string  `json:"loginLT,omitempty"`
	LoginLTE          *string  `json:"loginLTE,omitempty"`
	LoginContains     *string  `json:"loginContains,omitempty"`
	LoginHasPrefix    *string  `json:"loginHasPrefix,omitempty"`
	LoginHasSuffix    *string  `json:"loginHasSuffix,omitempty"`
	LoginEqualFold    *string  `json:"loginEqualFold,omitempty"`
	LoginContainsFold *string  `json:"loginContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "last_login" field predicates.
	LastLogin       *time.Time  `json:"lastLogin,omitempty"`
	LastLoginNEQ    *time.Time  `json:"lastLoginNEQ,omitempty"`
	LastLoginIn     []time.Time `json:"lastLoginIn,omitempty"`
	LastLoginNotIn  []time.Time `json:"lastLoginNotIn,omitempty"`
	LastLoginGT     *time.Time  `json:"lastLoginGT,omitempty"`
	LastLoginGTE    *time.Time  `json:"lastLoginGTE,omitempty"`
	LastLoginLT     *time.Time  `json:"lastLoginLT,omitempty"`
	LastLoginLTE    *time.Time  `json:"lastLoginLTE,omitempty"`
	LastLoginIsNil  bool        `json:"lastLoginIsNil,omitempty"`
	LastLoginNotNil bool        `json:"lastLoginNotNil,omitempty"`

	// "is_active" field predicates.
	IsActive    *bool `json:"isActive,omitempty"`
	IsActiveNEQ *bool `json:"isActiveNEQ,omitempty"`

	// "notion_id" field predicates.
	NotionID             *string  `json:"notionID,omitempty"`
	NotionIDNEQ          *string  `json:"notionIDNEQ,omitempty"`
	NotionIDIn           []string `json:"notionIDIn,omitempty"`
	NotionIDNotIn        []string `json:"notionIDNotIn,omitempty"`
	NotionIDGT           *string  `json:"notionIDGT,omitempty"`
	NotionIDGTE          *string  `json:"notionIDGTE,omitempty"`
	NotionIDLT           *string  `json:"notionIDLT,omitempty"`
	NotionIDLTE          *string  `json:"notionIDLTE,omitempty"`
	NotionIDContains     *string  `json:"notionIDContains,omitempty"`
	NotionIDHasPrefix    *string  `json:"notionIDHasPrefix,omitempty"`
	NotionIDHasSuffix    *string  `json:"notionIDHasSuffix,omitempty"`
	NotionIDIsNil        bool     `json:"notionIDIsNil,omitempty"`
	NotionIDNotNil       bool     `json:"notionIDNotNil,omitempty"`
	NotionIDEqualFold    *string  `json:"notionIDEqualFold,omitempty"`
	NotionIDContainsFold *string  `json:"notionIDContainsFold,omitempty"`

	// "is_notion_subject" field predicates.
	IsNotionSubject    *bool `json:"isNotionSubject,omitempty"`
	IsNotionSubjectNEQ *bool `json:"isNotionSubjectNEQ,omitempty"`

	// "created_objects" edge predicates.
	HasCreatedObjects     *bool               `json:"hasCreatedObjects,omitempty"`
	HasCreatedObjectsWith []*ObjectWhereInput `json:"hasCreatedObjectsWith,omitempty"`

	// "updated_objects" edge predicates.
	HasUpdatedObjects     *bool               `json:"hasUpdatedObjects,omitempty"`
	HasUpdatedObjectsWith []*ObjectWhereInput `json:"hasUpdatedObjectsWith,omitempty"`

	// "deleted_objects" edge predicates.
	HasDeletedObjects     *bool               `json:"hasDeletedObjects,omitempty"`
	HasDeletedObjectsWith []*ObjectWhereInput `json:"hasDeletedObjectsWith,omitempty"`

	// "created_collections" edge predicates.
	HasCreatedCollections     *bool                   `json:"hasCreatedCollections,omitempty"`
	HasCreatedCollectionsWith []*CollectionWhereInput `json:"hasCreatedCollectionsWith,omitempty"`

	// "updated_collections" edge predicates.
	HasUpdatedCollections     *bool                   `json:"hasUpdatedCollections,omitempty"`
	HasUpdatedCollectionsWith []*CollectionWhereInput `json:"hasUpdatedCollectionsWith,omitempty"`

	// "collections" edge predicates.
	HasCollections     *bool                   `json:"hasCollections,omitempty"`
	HasCollectionsWith []*CollectionWhereInput `json:"hasCollectionsWith,omitempty"`

	// "object_info" edge predicates.
	HasObjectInfo     *bool               `json:"hasObjectInfo,omitempty"`
	HasObjectInfoWith []*ObjectWhereInput `json:"hasObjectInfoWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Login != nil {
		predicates = append(predicates, user.LoginEQ(*i.Login))
	}
	if i.LoginNEQ != nil {
		predicates = append(predicates, user.LoginNEQ(*i.LoginNEQ))
	}
	if len(i.LoginIn) > 0 {
		predicates = append(predicates, user.LoginIn(i.LoginIn...))
	}
	if len(i.LoginNotIn) > 0 {
		predicates = append(predicates, user.LoginNotIn(i.LoginNotIn...))
	}
	if i.LoginGT != nil {
		predicates = append(predicates, user.LoginGT(*i.LoginGT))
	}
	if i.LoginGTE != nil {
		predicates = append(predicates, user.LoginGTE(*i.LoginGTE))
	}
	if i.LoginLT != nil {
		predicates = append(predicates, user.LoginLT(*i.LoginLT))
	}
	if i.LoginLTE != nil {
		predicates = append(predicates, user.LoginLTE(*i.LoginLTE))
	}
	if i.LoginContains != nil {
		predicates = append(predicates, user.LoginContains(*i.LoginContains))
	}
	if i.LoginHasPrefix != nil {
		predicates = append(predicates, user.LoginHasPrefix(*i.LoginHasPrefix))
	}
	if i.LoginHasSuffix != nil {
		predicates = append(predicates, user.LoginHasSuffix(*i.LoginHasSuffix))
	}
	if i.LoginEqualFold != nil {
		predicates = append(predicates, user.LoginEqualFold(*i.LoginEqualFold))
	}
	if i.LoginContainsFold != nil {
		predicates = append(predicates, user.LoginContainsFold(*i.LoginContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, user.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, user.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, user.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, user.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, user.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, user.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, user.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, user.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, user.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, user.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, user.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, user.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, user.RoleContainsFold(*i.RoleContainsFold))
	}
	if i.LastLogin != nil {
		predicates = append(predicates, user.LastLoginEQ(*i.LastLogin))
	}
	if i.LastLoginNEQ != nil {
		predicates = append(predicates, user.LastLoginNEQ(*i.LastLoginNEQ))
	}
	if len(i.LastLoginIn) > 0 {
		predicates = append(predicates, user.LastLoginIn(i.LastLoginIn...))
	}
	if len(i.LastLoginNotIn) > 0 {
		predicates = append(predicates, user.LastLoginNotIn(i.LastLoginNotIn...))
	}
	if i.LastLoginGT != nil {
		predicates = append(predicates, user.LastLoginGT(*i.LastLoginGT))
	}
	if i.LastLoginGTE != nil {
		predicates = append(predicates, user.LastLoginGTE(*i.LastLoginGTE))
	}
	if i.LastLoginLT != nil {
		predicates = append(predicates, user.LastLoginLT(*i.LastLoginLT))
	}
	if i.LastLoginLTE != nil {
		predicates = append(predicates, user.LastLoginLTE(*i.LastLoginLTE))
	}
	if i.LastLoginIsNil {
		predicates = append(predicates, user.LastLoginIsNil())
	}
	if i.LastLoginNotNil {
		predicates = append(predicates, user.LastLoginNotNil())
	}
	if i.IsActive != nil {
		predicates = append(predicates, user.IsActiveEQ(*i.IsActive))
	}
	if i.IsActiveNEQ != nil {
		predicates = append(predicates, user.IsActiveNEQ(*i.IsActiveNEQ))
	}
	if i.NotionID != nil {
		predicates = append(predicates, user.NotionIDEQ(*i.NotionID))
	}
	if i.NotionIDNEQ != nil {
		predicates = append(predicates, user.NotionIDNEQ(*i.NotionIDNEQ))
	}
	if len(i.NotionIDIn) > 0 {
		predicates = append(predicates, user.NotionIDIn(i.NotionIDIn...))
	}
	if len(i.NotionIDNotIn) > 0 {
		predicates = append(predicates, user.NotionIDNotIn(i.NotionIDNotIn...))
	}
	if i.NotionIDGT != nil {
		predicates = append(predicates, user.NotionIDGT(*i.NotionIDGT))
	}
	if i.NotionIDGTE != nil {
		predicates = append(predicates, user.NotionIDGTE(*i.NotionIDGTE))
	}
	if i.NotionIDLT != nil {
		predicates = append(predicates, user.NotionIDLT(*i.NotionIDLT))
	}
	if i.NotionIDLTE != nil {
		predicates = append(predicates, user.NotionIDLTE(*i.NotionIDLTE))
	}
	if i.NotionIDContains != nil {
		predicates = append(predicates, user.NotionIDContains(*i.NotionIDContains))
	}
	if i.NotionIDHasPrefix != nil {
		predicates = append(predicates, user.NotionIDHasPrefix(*i.NotionIDHasPrefix))
	}
	if i.NotionIDHasSuffix != nil {
		predicates = append(predicates, user.NotionIDHasSuffix(*i.NotionIDHasSuffix))
	}
	if i.NotionIDIsNil {
		predicates = append(predicates, user.NotionIDIsNil())
	}
	if i.NotionIDNotNil {
		predicates = append(predicates, user.NotionIDNotNil())
	}
	if i.NotionIDEqualFold != nil {
		predicates = append(predicates, user.NotionIDEqualFold(*i.NotionIDEqualFold))
	}
	if i.NotionIDContainsFold != nil {
		predicates = append(predicates, user.NotionIDContainsFold(*i.NotionIDContainsFold))
	}
	if i.IsNotionSubject != nil {
		predicates = append(predicates, user.IsNotionSubjectEQ(*i.IsNotionSubject))
	}
	if i.IsNotionSubjectNEQ != nil {
		predicates = append(predicates, user.IsNotionSubjectNEQ(*i.IsNotionSubjectNEQ))
	}

	if i.HasCreatedObjects != nil {
		p := user.HasCreatedObjects()
		if !*i.HasCreatedObjects {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedObjectsWith) > 0 {
		with := make([]predicate.Object, 0, len(i.HasCreatedObjectsWith))
		for _, w := range i.HasCreatedObjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedObjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCreatedObjectsWith(with...))
	}
	if i.HasUpdatedObjects != nil {
		p := user.HasUpdatedObjects()
		if !*i.HasUpdatedObjects {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUpdatedObjectsWith) > 0 {
		with := make([]predicate.Object, 0, len(i.HasUpdatedObjectsWith))
		for _, w := range i.HasUpdatedObjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUpdatedObjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasUpdatedObjectsWith(with...))
	}
	if i.HasDeletedObjects != nil {
		p := user.HasDeletedObjects()
		if !*i.HasDeletedObjects {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDeletedObjectsWith) > 0 {
		with := make([]predicate.Object, 0, len(i.HasDeletedObjectsWith))
		for _, w := range i.HasDeletedObjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDeletedObjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasDeletedObjectsWith(with...))
	}
	if i.HasCreatedCollections != nil {
		p := user.HasCreatedCollections()
		if !*i.HasCreatedCollections {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedCollectionsWith) > 0 {
		with := make([]predicate.Collection, 0, len(i.HasCreatedCollectionsWith))
		for _, w := range i.HasCreatedCollectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedCollectionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCreatedCollectionsWith(with...))
	}
	if i.HasUpdatedCollections != nil {
		p := user.HasUpdatedCollections()
		if !*i.HasUpdatedCollections {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUpdatedCollectionsWith) > 0 {
		with := make([]predicate.Collection, 0, len(i.HasUpdatedCollectionsWith))
		for _, w := range i.HasUpdatedCollectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUpdatedCollectionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasUpdatedCollectionsWith(with...))
	}
	if i.HasCollections != nil {
		p := user.HasCollections()
		if !*i.HasCollections {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCollectionsWith) > 0 {
		with := make([]predicate.Collection, 0, len(i.HasCollectionsWith))
		for _, w := range i.HasCollectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCollectionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCollectionsWith(with...))
	}
	if i.HasObjectInfo != nil {
		p := user.HasObjectInfo()
		if !*i.HasObjectInfo {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasObjectInfoWith) > 0 {
		with := make([]predicate.Object, 0, len(i.HasObjectInfoWith))
		for _, w := range i.HasObjectInfoWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasObjectInfoWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasObjectInfoWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
