// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/city"
	"radioatelier/ent/collection"
	"radioatelier/ent/object"
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ObjectUpdate is the builder for updating Object entities.
type ObjectUpdate struct {
	config
	hooks    []Hook
	mutation *ObjectMutation
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ou *ObjectUpdate) Where(ps ...predicate.Object) *ObjectUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *ObjectUpdate) SetName(s string) *ObjectUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetAddress sets the "address" field.
func (ou *ObjectUpdate) SetAddress(s string) *ObjectUpdate {
	ou.mutation.SetAddress(s)
	return ou
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableAddress(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetAddress(*s)
	}
	return ou
}

// ClearAddress clears the value of the "address" field.
func (ou *ObjectUpdate) ClearAddress() *ObjectUpdate {
	ou.mutation.ClearAddress()
	return ou
}

// SetDescription sets the "description" field.
func (ou *ObjectUpdate) SetDescription(s string) *ObjectUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableDescription(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *ObjectUpdate) ClearDescription() *ObjectUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// SetLat sets the "lat" field.
func (ou *ObjectUpdate) SetLat(f float64) *ObjectUpdate {
	ou.mutation.ResetLat()
	ou.mutation.SetLat(f)
	return ou
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableLat(f *float64) *ObjectUpdate {
	if f != nil {
		ou.SetLat(*f)
	}
	return ou
}

// AddLat adds f to the "lat" field.
func (ou *ObjectUpdate) AddLat(f float64) *ObjectUpdate {
	ou.mutation.AddLat(f)
	return ou
}

// ClearLat clears the value of the "lat" field.
func (ou *ObjectUpdate) ClearLat() *ObjectUpdate {
	ou.mutation.ClearLat()
	return ou
}

// SetLng sets the "lng" field.
func (ou *ObjectUpdate) SetLng(f float64) *ObjectUpdate {
	ou.mutation.ResetLng()
	ou.mutation.SetLng(f)
	return ou
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableLng(f *float64) *ObjectUpdate {
	if f != nil {
		ou.SetLng(*f)
	}
	return ou
}

// AddLng adds f to the "lng" field.
func (ou *ObjectUpdate) AddLng(f float64) *ObjectUpdate {
	ou.mutation.AddLng(f)
	return ou
}

// ClearLng clears the value of the "lng" field.
func (ou *ObjectUpdate) ClearLng() *ObjectUpdate {
	ou.mutation.ClearLng()
	return ou
}

// SetInstalledPeriod sets the "installed_period" field.
func (ou *ObjectUpdate) SetInstalledPeriod(s string) *ObjectUpdate {
	ou.mutation.SetInstalledPeriod(s)
	return ou
}

// SetNillableInstalledPeriod sets the "installed_period" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableInstalledPeriod(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetInstalledPeriod(*s)
	}
	return ou
}

// ClearInstalledPeriod clears the value of the "installed_period" field.
func (ou *ObjectUpdate) ClearInstalledPeriod() *ObjectUpdate {
	ou.mutation.ClearInstalledPeriod()
	return ou
}

// SetIsRemoved sets the "is_removed" field.
func (ou *ObjectUpdate) SetIsRemoved(b bool) *ObjectUpdate {
	ou.mutation.SetIsRemoved(b)
	return ou
}

// SetNillableIsRemoved sets the "is_removed" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableIsRemoved(b *bool) *ObjectUpdate {
	if b != nil {
		ou.SetIsRemoved(*b)
	}
	return ou
}

// SetRemovedPeriod sets the "removed_period" field.
func (ou *ObjectUpdate) SetRemovedPeriod(s string) *ObjectUpdate {
	ou.mutation.SetRemovedPeriod(s)
	return ou
}

// SetNillableRemovedPeriod sets the "removed_period" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableRemovedPeriod(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetRemovedPeriod(*s)
	}
	return ou
}

// ClearRemovedPeriod clears the value of the "removed_period" field.
func (ou *ObjectUpdate) ClearRemovedPeriod() *ObjectUpdate {
	ou.mutation.ClearRemovedPeriod()
	return ou
}

// SetSource sets the "source" field.
func (ou *ObjectUpdate) SetSource(s string) *ObjectUpdate {
	ou.mutation.SetSource(s)
	return ou
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableSource(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetSource(*s)
	}
	return ou
}

// ClearSource clears the value of the "source" field.
func (ou *ObjectUpdate) ClearSource() *ObjectUpdate {
	ou.mutation.ClearSource()
	return ou
}

// SetType sets the "type" field.
func (ou *ObjectUpdate) SetType(s string) *ObjectUpdate {
	ou.mutation.SetType(s)
	return ou
}

// SetTags sets the "tags" field.
func (ou *ObjectUpdate) SetTags(s string) *ObjectUpdate {
	ou.mutation.SetTags(s)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *ObjectUpdate) SetUpdatedAt(t time.Time) *ObjectUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *ObjectUpdate) SetDeletedAt(t time.Time) *ObjectUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableDeletedAt(t *time.Time) *ObjectUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *ObjectUpdate) ClearDeletedAt() *ObjectUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetLastSync sets the "last_sync" field.
func (ou *ObjectUpdate) SetLastSync(t time.Time) *ObjectUpdate {
	ou.mutation.SetLastSync(t)
	return ou
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableLastSync(t *time.Time) *ObjectUpdate {
	if t != nil {
		ou.SetLastSync(*t)
	}
	return ou
}

// ClearLastSync clears the value of the "last_sync" field.
func (ou *ObjectUpdate) ClearLastSync() *ObjectUpdate {
	ou.mutation.ClearLastSync()
	return ou
}

// SetNotionID sets the "notion_id" field.
func (ou *ObjectUpdate) SetNotionID(s string) *ObjectUpdate {
	ou.mutation.SetNotionID(s)
	return ou
}

// SetNillableNotionID sets the "notion_id" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableNotionID(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetNotionID(*s)
	}
	return ou
}

// ClearNotionID clears the value of the "notion_id" field.
func (ou *ObjectUpdate) ClearNotionID() *ObjectUpdate {
	ou.mutation.ClearNotionID()
	return ou
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (ou *ObjectUpdate) SetCreatedByID(id puuid.ID) *ObjectUpdate {
	ou.mutation.SetCreatedByID(id)
	return ou
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (ou *ObjectUpdate) SetCreatedBy(u *User) *ObjectUpdate {
	return ou.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (ou *ObjectUpdate) SetUpdatedByID(id puuid.ID) *ObjectUpdate {
	ou.mutation.SetUpdatedByID(id)
	return ou
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (ou *ObjectUpdate) SetUpdatedBy(u *User) *ObjectUpdate {
	return ou.SetUpdatedByID(u.ID)
}

// SetDeletedByID sets the "deleted_by" edge to the User entity by ID.
func (ou *ObjectUpdate) SetDeletedByID(id puuid.ID) *ObjectUpdate {
	ou.mutation.SetDeletedByID(id)
	return ou
}

// SetNillableDeletedByID sets the "deleted_by" edge to the User entity by ID if the given value is not nil.
func (ou *ObjectUpdate) SetNillableDeletedByID(id *puuid.ID) *ObjectUpdate {
	if id != nil {
		ou = ou.SetDeletedByID(*id)
	}
	return ou
}

// SetDeletedBy sets the "deleted_by" edge to the User entity.
func (ou *ObjectUpdate) SetDeletedBy(u *User) *ObjectUpdate {
	return ou.SetDeletedByID(u.ID)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (ou *ObjectUpdate) AddCollectionIDs(ids ...puuid.ID) *ObjectUpdate {
	ou.mutation.AddCollectionIDs(ids...)
	return ou
}

// AddCollections adds the "collections" edges to the Collection entity.
func (ou *ObjectUpdate) AddCollections(c ...*Collection) *ObjectUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddCollectionIDs(ids...)
}

// AddUserInfoIDs adds the "user_info" edge to the User entity by IDs.
func (ou *ObjectUpdate) AddUserInfoIDs(ids ...puuid.ID) *ObjectUpdate {
	ou.mutation.AddUserInfoIDs(ids...)
	return ou
}

// AddUserInfo adds the "user_info" edges to the User entity.
func (ou *ObjectUpdate) AddUserInfo(u ...*User) *ObjectUpdate {
	ids := make([]puuid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserInfoIDs(ids...)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (ou *ObjectUpdate) SetCityID(id puuid.ID) *ObjectUpdate {
	ou.mutation.SetCityID(id)
	return ou
}

// SetCity sets the "city" edge to the City entity.
func (ou *ObjectUpdate) SetCity(c *City) *ObjectUpdate {
	return ou.SetCityID(c.ID)
}

// Mutation returns the ObjectMutation object of the builder.
func (ou *ObjectUpdate) Mutation() *ObjectMutation {
	return ou.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (ou *ObjectUpdate) ClearCreatedBy() *ObjectUpdate {
	ou.mutation.ClearCreatedBy()
	return ou
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (ou *ObjectUpdate) ClearUpdatedBy() *ObjectUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// ClearDeletedBy clears the "deleted_by" edge to the User entity.
func (ou *ObjectUpdate) ClearDeletedBy() *ObjectUpdate {
	ou.mutation.ClearDeletedBy()
	return ou
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (ou *ObjectUpdate) ClearCollections() *ObjectUpdate {
	ou.mutation.ClearCollections()
	return ou
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (ou *ObjectUpdate) RemoveCollectionIDs(ids ...puuid.ID) *ObjectUpdate {
	ou.mutation.RemoveCollectionIDs(ids...)
	return ou
}

// RemoveCollections removes "collections" edges to Collection entities.
func (ou *ObjectUpdate) RemoveCollections(c ...*Collection) *ObjectUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveCollectionIDs(ids...)
}

// ClearUserInfo clears all "user_info" edges to the User entity.
func (ou *ObjectUpdate) ClearUserInfo() *ObjectUpdate {
	ou.mutation.ClearUserInfo()
	return ou
}

// RemoveUserInfoIDs removes the "user_info" edge to User entities by IDs.
func (ou *ObjectUpdate) RemoveUserInfoIDs(ids ...puuid.ID) *ObjectUpdate {
	ou.mutation.RemoveUserInfoIDs(ids...)
	return ou
}

// RemoveUserInfo removes "user_info" edges to User entities.
func (ou *ObjectUpdate) RemoveUserInfo(u ...*User) *ObjectUpdate {
	ids := make([]puuid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserInfoIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (ou *ObjectUpdate) ClearCity() *ObjectUpdate {
	ou.mutation.ClearCity()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *ObjectUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks[int, ObjectMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *ObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *ObjectUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *ObjectUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *ObjectUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := object.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *ObjectUpdate) check() error {
	if _, ok := ou.mutation.CreatedByID(); ou.mutation.CreatedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Object.created_by"`)
	}
	if _, ok := ou.mutation.UpdatedByID(); ou.mutation.UpdatedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Object.updated_by"`)
	}
	if _, ok := ou.mutation.CityID(); ou.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Object.city"`)
	}
	return nil
}

func (ou *ObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Address(); ok {
		_spec.SetField(object.FieldAddress, field.TypeString, value)
	}
	if ou.mutation.AddressCleared() {
		_spec.ClearField(object.FieldAddress, field.TypeString)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(object.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(object.FieldDescription, field.TypeString)
	}
	if value, ok := ou.mutation.Lat(); ok {
		_spec.SetField(object.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedLat(); ok {
		_spec.AddField(object.FieldLat, field.TypeFloat64, value)
	}
	if ou.mutation.LatCleared() {
		_spec.ClearField(object.FieldLat, field.TypeFloat64)
	}
	if value, ok := ou.mutation.Lng(); ok {
		_spec.SetField(object.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedLng(); ok {
		_spec.AddField(object.FieldLng, field.TypeFloat64, value)
	}
	if ou.mutation.LngCleared() {
		_spec.ClearField(object.FieldLng, field.TypeFloat64)
	}
	if value, ok := ou.mutation.InstalledPeriod(); ok {
		_spec.SetField(object.FieldInstalledPeriod, field.TypeString, value)
	}
	if ou.mutation.InstalledPeriodCleared() {
		_spec.ClearField(object.FieldInstalledPeriod, field.TypeString)
	}
	if value, ok := ou.mutation.IsRemoved(); ok {
		_spec.SetField(object.FieldIsRemoved, field.TypeBool, value)
	}
	if value, ok := ou.mutation.RemovedPeriod(); ok {
		_spec.SetField(object.FieldRemovedPeriod, field.TypeString, value)
	}
	if ou.mutation.RemovedPeriodCleared() {
		_spec.ClearField(object.FieldRemovedPeriod, field.TypeString)
	}
	if value, ok := ou.mutation.Source(); ok {
		_spec.SetField(object.FieldSource, field.TypeString, value)
	}
	if ou.mutation.SourceCleared() {
		_spec.ClearField(object.FieldSource, field.TypeString)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(object.FieldType, field.TypeString, value)
	}
	if value, ok := ou.mutation.Tags(); ok {
		_spec.SetField(object.FieldTags, field.TypeString, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(object.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(object.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(object.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.LastSync(); ok {
		_spec.SetField(object.FieldLastSync, field.TypeTime, value)
	}
	if ou.mutation.LastSyncCleared() {
		_spec.ClearField(object.FieldLastSync, field.TypeTime)
	}
	if value, ok := ou.mutation.NotionID(); ok {
		_spec.SetField(object.FieldNotionID, field.TypeString, value)
	}
	if ou.mutation.NotionIDCleared() {
		_spec.ClearField(object.FieldNotionID, field.TypeString)
	}
	if ou.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CreatedByTable,
			Columns: []string{object.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CreatedByTable,
			Columns: []string{object.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.UpdatedByTable,
			Columns: []string{object.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.UpdatedByTable,
			Columns: []string{object.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DeletedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.DeletedByTable,
			Columns: []string{object.DeletedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DeletedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.DeletedByTable,
			Columns: []string{object.DeletedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !ou.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UserInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &ObjectUserCreate{config: ou.config, mutation: newObjectUserMutation(ou.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUserInfoIDs(); len(nodes) > 0 && !ou.mutation.UserInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: ou.config, mutation: newObjectUserMutation(ou.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: ou.config, mutation: newObjectUserMutation(ou.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CityTable,
			Columns: []string{object.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CityTable,
			Columns: []string{object.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// ObjectUpdateOne is the builder for updating a single Object entity.
type ObjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ObjectMutation
}

// SetName sets the "name" field.
func (ouo *ObjectUpdateOne) SetName(s string) *ObjectUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetAddress sets the "address" field.
func (ouo *ObjectUpdateOne) SetAddress(s string) *ObjectUpdateOne {
	ouo.mutation.SetAddress(s)
	return ouo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableAddress(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetAddress(*s)
	}
	return ouo
}

// ClearAddress clears the value of the "address" field.
func (ouo *ObjectUpdateOne) ClearAddress() *ObjectUpdateOne {
	ouo.mutation.ClearAddress()
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *ObjectUpdateOne) SetDescription(s string) *ObjectUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableDescription(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *ObjectUpdateOne) ClearDescription() *ObjectUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// SetLat sets the "lat" field.
func (ouo *ObjectUpdateOne) SetLat(f float64) *ObjectUpdateOne {
	ouo.mutation.ResetLat()
	ouo.mutation.SetLat(f)
	return ouo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableLat(f *float64) *ObjectUpdateOne {
	if f != nil {
		ouo.SetLat(*f)
	}
	return ouo
}

// AddLat adds f to the "lat" field.
func (ouo *ObjectUpdateOne) AddLat(f float64) *ObjectUpdateOne {
	ouo.mutation.AddLat(f)
	return ouo
}

// ClearLat clears the value of the "lat" field.
func (ouo *ObjectUpdateOne) ClearLat() *ObjectUpdateOne {
	ouo.mutation.ClearLat()
	return ouo
}

// SetLng sets the "lng" field.
func (ouo *ObjectUpdateOne) SetLng(f float64) *ObjectUpdateOne {
	ouo.mutation.ResetLng()
	ouo.mutation.SetLng(f)
	return ouo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableLng(f *float64) *ObjectUpdateOne {
	if f != nil {
		ouo.SetLng(*f)
	}
	return ouo
}

// AddLng adds f to the "lng" field.
func (ouo *ObjectUpdateOne) AddLng(f float64) *ObjectUpdateOne {
	ouo.mutation.AddLng(f)
	return ouo
}

// ClearLng clears the value of the "lng" field.
func (ouo *ObjectUpdateOne) ClearLng() *ObjectUpdateOne {
	ouo.mutation.ClearLng()
	return ouo
}

// SetInstalledPeriod sets the "installed_period" field.
func (ouo *ObjectUpdateOne) SetInstalledPeriod(s string) *ObjectUpdateOne {
	ouo.mutation.SetInstalledPeriod(s)
	return ouo
}

// SetNillableInstalledPeriod sets the "installed_period" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableInstalledPeriod(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetInstalledPeriod(*s)
	}
	return ouo
}

// ClearInstalledPeriod clears the value of the "installed_period" field.
func (ouo *ObjectUpdateOne) ClearInstalledPeriod() *ObjectUpdateOne {
	ouo.mutation.ClearInstalledPeriod()
	return ouo
}

// SetIsRemoved sets the "is_removed" field.
func (ouo *ObjectUpdateOne) SetIsRemoved(b bool) *ObjectUpdateOne {
	ouo.mutation.SetIsRemoved(b)
	return ouo
}

// SetNillableIsRemoved sets the "is_removed" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableIsRemoved(b *bool) *ObjectUpdateOne {
	if b != nil {
		ouo.SetIsRemoved(*b)
	}
	return ouo
}

// SetRemovedPeriod sets the "removed_period" field.
func (ouo *ObjectUpdateOne) SetRemovedPeriod(s string) *ObjectUpdateOne {
	ouo.mutation.SetRemovedPeriod(s)
	return ouo
}

// SetNillableRemovedPeriod sets the "removed_period" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableRemovedPeriod(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetRemovedPeriod(*s)
	}
	return ouo
}

// ClearRemovedPeriod clears the value of the "removed_period" field.
func (ouo *ObjectUpdateOne) ClearRemovedPeriod() *ObjectUpdateOne {
	ouo.mutation.ClearRemovedPeriod()
	return ouo
}

// SetSource sets the "source" field.
func (ouo *ObjectUpdateOne) SetSource(s string) *ObjectUpdateOne {
	ouo.mutation.SetSource(s)
	return ouo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableSource(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetSource(*s)
	}
	return ouo
}

// ClearSource clears the value of the "source" field.
func (ouo *ObjectUpdateOne) ClearSource() *ObjectUpdateOne {
	ouo.mutation.ClearSource()
	return ouo
}

// SetType sets the "type" field.
func (ouo *ObjectUpdateOne) SetType(s string) *ObjectUpdateOne {
	ouo.mutation.SetType(s)
	return ouo
}

// SetTags sets the "tags" field.
func (ouo *ObjectUpdateOne) SetTags(s string) *ObjectUpdateOne {
	ouo.mutation.SetTags(s)
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *ObjectUpdateOne) SetUpdatedAt(t time.Time) *ObjectUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *ObjectUpdateOne) SetDeletedAt(t time.Time) *ObjectUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableDeletedAt(t *time.Time) *ObjectUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *ObjectUpdateOne) ClearDeletedAt() *ObjectUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetLastSync sets the "last_sync" field.
func (ouo *ObjectUpdateOne) SetLastSync(t time.Time) *ObjectUpdateOne {
	ouo.mutation.SetLastSync(t)
	return ouo
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableLastSync(t *time.Time) *ObjectUpdateOne {
	if t != nil {
		ouo.SetLastSync(*t)
	}
	return ouo
}

// ClearLastSync clears the value of the "last_sync" field.
func (ouo *ObjectUpdateOne) ClearLastSync() *ObjectUpdateOne {
	ouo.mutation.ClearLastSync()
	return ouo
}

// SetNotionID sets the "notion_id" field.
func (ouo *ObjectUpdateOne) SetNotionID(s string) *ObjectUpdateOne {
	ouo.mutation.SetNotionID(s)
	return ouo
}

// SetNillableNotionID sets the "notion_id" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableNotionID(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetNotionID(*s)
	}
	return ouo
}

// ClearNotionID clears the value of the "notion_id" field.
func (ouo *ObjectUpdateOne) ClearNotionID() *ObjectUpdateOne {
	ouo.mutation.ClearNotionID()
	return ouo
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (ouo *ObjectUpdateOne) SetCreatedByID(id puuid.ID) *ObjectUpdateOne {
	ouo.mutation.SetCreatedByID(id)
	return ouo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (ouo *ObjectUpdateOne) SetCreatedBy(u *User) *ObjectUpdateOne {
	return ouo.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (ouo *ObjectUpdateOne) SetUpdatedByID(id puuid.ID) *ObjectUpdateOne {
	ouo.mutation.SetUpdatedByID(id)
	return ouo
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (ouo *ObjectUpdateOne) SetUpdatedBy(u *User) *ObjectUpdateOne {
	return ouo.SetUpdatedByID(u.ID)
}

// SetDeletedByID sets the "deleted_by" edge to the User entity by ID.
func (ouo *ObjectUpdateOne) SetDeletedByID(id puuid.ID) *ObjectUpdateOne {
	ouo.mutation.SetDeletedByID(id)
	return ouo
}

// SetNillableDeletedByID sets the "deleted_by" edge to the User entity by ID if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableDeletedByID(id *puuid.ID) *ObjectUpdateOne {
	if id != nil {
		ouo = ouo.SetDeletedByID(*id)
	}
	return ouo
}

// SetDeletedBy sets the "deleted_by" edge to the User entity.
func (ouo *ObjectUpdateOne) SetDeletedBy(u *User) *ObjectUpdateOne {
	return ouo.SetDeletedByID(u.ID)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (ouo *ObjectUpdateOne) AddCollectionIDs(ids ...puuid.ID) *ObjectUpdateOne {
	ouo.mutation.AddCollectionIDs(ids...)
	return ouo
}

// AddCollections adds the "collections" edges to the Collection entity.
func (ouo *ObjectUpdateOne) AddCollections(c ...*Collection) *ObjectUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddCollectionIDs(ids...)
}

// AddUserInfoIDs adds the "user_info" edge to the User entity by IDs.
func (ouo *ObjectUpdateOne) AddUserInfoIDs(ids ...puuid.ID) *ObjectUpdateOne {
	ouo.mutation.AddUserInfoIDs(ids...)
	return ouo
}

// AddUserInfo adds the "user_info" edges to the User entity.
func (ouo *ObjectUpdateOne) AddUserInfo(u ...*User) *ObjectUpdateOne {
	ids := make([]puuid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserInfoIDs(ids...)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (ouo *ObjectUpdateOne) SetCityID(id puuid.ID) *ObjectUpdateOne {
	ouo.mutation.SetCityID(id)
	return ouo
}

// SetCity sets the "city" edge to the City entity.
func (ouo *ObjectUpdateOne) SetCity(c *City) *ObjectUpdateOne {
	return ouo.SetCityID(c.ID)
}

// Mutation returns the ObjectMutation object of the builder.
func (ouo *ObjectUpdateOne) Mutation() *ObjectMutation {
	return ouo.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (ouo *ObjectUpdateOne) ClearCreatedBy() *ObjectUpdateOne {
	ouo.mutation.ClearCreatedBy()
	return ouo
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (ouo *ObjectUpdateOne) ClearUpdatedBy() *ObjectUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// ClearDeletedBy clears the "deleted_by" edge to the User entity.
func (ouo *ObjectUpdateOne) ClearDeletedBy() *ObjectUpdateOne {
	ouo.mutation.ClearDeletedBy()
	return ouo
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (ouo *ObjectUpdateOne) ClearCollections() *ObjectUpdateOne {
	ouo.mutation.ClearCollections()
	return ouo
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (ouo *ObjectUpdateOne) RemoveCollectionIDs(ids ...puuid.ID) *ObjectUpdateOne {
	ouo.mutation.RemoveCollectionIDs(ids...)
	return ouo
}

// RemoveCollections removes "collections" edges to Collection entities.
func (ouo *ObjectUpdateOne) RemoveCollections(c ...*Collection) *ObjectUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveCollectionIDs(ids...)
}

// ClearUserInfo clears all "user_info" edges to the User entity.
func (ouo *ObjectUpdateOne) ClearUserInfo() *ObjectUpdateOne {
	ouo.mutation.ClearUserInfo()
	return ouo
}

// RemoveUserInfoIDs removes the "user_info" edge to User entities by IDs.
func (ouo *ObjectUpdateOne) RemoveUserInfoIDs(ids ...puuid.ID) *ObjectUpdateOne {
	ouo.mutation.RemoveUserInfoIDs(ids...)
	return ouo
}

// RemoveUserInfo removes "user_info" edges to User entities.
func (ouo *ObjectUpdateOne) RemoveUserInfo(u ...*User) *ObjectUpdateOne {
	ids := make([]puuid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserInfoIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (ouo *ObjectUpdateOne) ClearCity() *ObjectUpdateOne {
	ouo.mutation.ClearCity()
	return ouo
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ouo *ObjectUpdateOne) Where(ps ...predicate.Object) *ObjectUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *ObjectUpdateOne) Select(field string, fields ...string) *ObjectUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Object entity.
func (ouo *ObjectUpdateOne) Save(ctx context.Context) (*Object, error) {
	ouo.defaults()
	return withHooks[*Object, ObjectMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *ObjectUpdateOne) SaveX(ctx context.Context) *Object {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *ObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *ObjectUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *ObjectUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := object.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *ObjectUpdateOne) check() error {
	if _, ok := ouo.mutation.CreatedByID(); ouo.mutation.CreatedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Object.created_by"`)
	}
	if _, ok := ouo.mutation.UpdatedByID(); ouo.mutation.UpdatedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Object.updated_by"`)
	}
	if _, ok := ouo.mutation.CityID(); ouo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Object.city"`)
	}
	return nil
}

func (ouo *ObjectUpdateOne) sqlSave(ctx context.Context) (_node *Object, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Object.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, object.FieldID)
		for _, f := range fields {
			if !object.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != object.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Address(); ok {
		_spec.SetField(object.FieldAddress, field.TypeString, value)
	}
	if ouo.mutation.AddressCleared() {
		_spec.ClearField(object.FieldAddress, field.TypeString)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(object.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(object.FieldDescription, field.TypeString)
	}
	if value, ok := ouo.mutation.Lat(); ok {
		_spec.SetField(object.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedLat(); ok {
		_spec.AddField(object.FieldLat, field.TypeFloat64, value)
	}
	if ouo.mutation.LatCleared() {
		_spec.ClearField(object.FieldLat, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.Lng(); ok {
		_spec.SetField(object.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedLng(); ok {
		_spec.AddField(object.FieldLng, field.TypeFloat64, value)
	}
	if ouo.mutation.LngCleared() {
		_spec.ClearField(object.FieldLng, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.InstalledPeriod(); ok {
		_spec.SetField(object.FieldInstalledPeriod, field.TypeString, value)
	}
	if ouo.mutation.InstalledPeriodCleared() {
		_spec.ClearField(object.FieldInstalledPeriod, field.TypeString)
	}
	if value, ok := ouo.mutation.IsRemoved(); ok {
		_spec.SetField(object.FieldIsRemoved, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.RemovedPeriod(); ok {
		_spec.SetField(object.FieldRemovedPeriod, field.TypeString, value)
	}
	if ouo.mutation.RemovedPeriodCleared() {
		_spec.ClearField(object.FieldRemovedPeriod, field.TypeString)
	}
	if value, ok := ouo.mutation.Source(); ok {
		_spec.SetField(object.FieldSource, field.TypeString, value)
	}
	if ouo.mutation.SourceCleared() {
		_spec.ClearField(object.FieldSource, field.TypeString)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(object.FieldType, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Tags(); ok {
		_spec.SetField(object.FieldTags, field.TypeString, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(object.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(object.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(object.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.LastSync(); ok {
		_spec.SetField(object.FieldLastSync, field.TypeTime, value)
	}
	if ouo.mutation.LastSyncCleared() {
		_spec.ClearField(object.FieldLastSync, field.TypeTime)
	}
	if value, ok := ouo.mutation.NotionID(); ok {
		_spec.SetField(object.FieldNotionID, field.TypeString, value)
	}
	if ouo.mutation.NotionIDCleared() {
		_spec.ClearField(object.FieldNotionID, field.TypeString)
	}
	if ouo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CreatedByTable,
			Columns: []string{object.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CreatedByTable,
			Columns: []string{object.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.UpdatedByTable,
			Columns: []string{object.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.UpdatedByTable,
			Columns: []string{object.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DeletedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.DeletedByTable,
			Columns: []string{object.DeletedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DeletedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.DeletedByTable,
			Columns: []string{object.DeletedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !ouo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   object.CollectionsTable,
			Columns: object.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UserInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &ObjectUserCreate{config: ouo.config, mutation: newObjectUserMutation(ouo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUserInfoIDs(); len(nodes) > 0 && !ouo.mutation.UserInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: ouo.config, mutation: newObjectUserMutation(ouo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.UserInfoTable,
			Columns: object.UserInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: ouo.config, mutation: newObjectUserMutation(ouo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CityTable,
			Columns: []string{object.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   object.CityTable,
			Columns: []string{object.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Object{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
