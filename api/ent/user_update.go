// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"radioatelier/ent/collection"
	"radioatelier/ent/object"
	"radioatelier/ent/predicate"
	"radioatelier/ent/schema/puuid"
	"radioatelier/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetLogin sets the "login" field.
func (uu *UserUpdate) SetLogin(s string) *UserUpdate {
	uu.mutation.SetLogin(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.mutation.SetRole(s)
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "last_login" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UserUpdate) SetIsActive(b bool) *UserUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// SetNotionID sets the "notion_id" field.
func (uu *UserUpdate) SetNotionID(s string) *UserUpdate {
	uu.mutation.SetNotionID(s)
	return uu
}

// SetNillableNotionID sets the "notion_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNotionID(s *string) *UserUpdate {
	if s != nil {
		uu.SetNotionID(*s)
	}
	return uu
}

// ClearNotionID clears the value of the "notion_id" field.
func (uu *UserUpdate) ClearNotionID() *UserUpdate {
	uu.mutation.ClearNotionID()
	return uu
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (uu *UserUpdate) SetIsNotionSubject(b bool) *UserUpdate {
	uu.mutation.SetIsNotionSubject(b)
	return uu
}

// SetNillableIsNotionSubject sets the "is_notion_subject" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsNotionSubject(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsNotionSubject(*b)
	}
	return uu
}

// AddCreatedObjectIDs adds the "created_objects" edge to the Object entity by IDs.
func (uu *UserUpdate) AddCreatedObjectIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddCreatedObjectIDs(ids...)
	return uu
}

// AddCreatedObjects adds the "created_objects" edges to the Object entity.
func (uu *UserUpdate) AddCreatedObjects(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddCreatedObjectIDs(ids...)
}

// AddUpdatedObjectIDs adds the "updated_objects" edge to the Object entity by IDs.
func (uu *UserUpdate) AddUpdatedObjectIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddUpdatedObjectIDs(ids...)
	return uu
}

// AddUpdatedObjects adds the "updated_objects" edges to the Object entity.
func (uu *UserUpdate) AddUpdatedObjects(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddUpdatedObjectIDs(ids...)
}

// AddDeletedObjectIDs adds the "deleted_objects" edge to the Object entity by IDs.
func (uu *UserUpdate) AddDeletedObjectIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddDeletedObjectIDs(ids...)
	return uu
}

// AddDeletedObjects adds the "deleted_objects" edges to the Object entity.
func (uu *UserUpdate) AddDeletedObjects(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddDeletedObjectIDs(ids...)
}

// AddCreatedCollectionIDs adds the "created_collections" edge to the Collection entity by IDs.
func (uu *UserUpdate) AddCreatedCollectionIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddCreatedCollectionIDs(ids...)
	return uu
}

// AddCreatedCollections adds the "created_collections" edges to the Collection entity.
func (uu *UserUpdate) AddCreatedCollections(c ...*Collection) *UserUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCreatedCollectionIDs(ids...)
}

// AddUpdatedCollectionIDs adds the "updated_collections" edge to the Collection entity by IDs.
func (uu *UserUpdate) AddUpdatedCollectionIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddUpdatedCollectionIDs(ids...)
	return uu
}

// AddUpdatedCollections adds the "updated_collections" edges to the Collection entity.
func (uu *UserUpdate) AddUpdatedCollections(c ...*Collection) *UserUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddUpdatedCollectionIDs(ids...)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (uu *UserUpdate) AddCollectionIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddCollectionIDs(ids...)
	return uu
}

// AddCollections adds the "collections" edges to the Collection entity.
func (uu *UserUpdate) AddCollections(c ...*Collection) *UserUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCollectionIDs(ids...)
}

// AddObjectInfoIDs adds the "object_info" edge to the Object entity by IDs.
func (uu *UserUpdate) AddObjectInfoIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.AddObjectInfoIDs(ids...)
	return uu
}

// AddObjectInfo adds the "object_info" edges to the Object entity.
func (uu *UserUpdate) AddObjectInfo(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddObjectInfoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCreatedObjects clears all "created_objects" edges to the Object entity.
func (uu *UserUpdate) ClearCreatedObjects() *UserUpdate {
	uu.mutation.ClearCreatedObjects()
	return uu
}

// RemoveCreatedObjectIDs removes the "created_objects" edge to Object entities by IDs.
func (uu *UserUpdate) RemoveCreatedObjectIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveCreatedObjectIDs(ids...)
	return uu
}

// RemoveCreatedObjects removes "created_objects" edges to Object entities.
func (uu *UserUpdate) RemoveCreatedObjects(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveCreatedObjectIDs(ids...)
}

// ClearUpdatedObjects clears all "updated_objects" edges to the Object entity.
func (uu *UserUpdate) ClearUpdatedObjects() *UserUpdate {
	uu.mutation.ClearUpdatedObjects()
	return uu
}

// RemoveUpdatedObjectIDs removes the "updated_objects" edge to Object entities by IDs.
func (uu *UserUpdate) RemoveUpdatedObjectIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveUpdatedObjectIDs(ids...)
	return uu
}

// RemoveUpdatedObjects removes "updated_objects" edges to Object entities.
func (uu *UserUpdate) RemoveUpdatedObjects(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveUpdatedObjectIDs(ids...)
}

// ClearDeletedObjects clears all "deleted_objects" edges to the Object entity.
func (uu *UserUpdate) ClearDeletedObjects() *UserUpdate {
	uu.mutation.ClearDeletedObjects()
	return uu
}

// RemoveDeletedObjectIDs removes the "deleted_objects" edge to Object entities by IDs.
func (uu *UserUpdate) RemoveDeletedObjectIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveDeletedObjectIDs(ids...)
	return uu
}

// RemoveDeletedObjects removes "deleted_objects" edges to Object entities.
func (uu *UserUpdate) RemoveDeletedObjects(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveDeletedObjectIDs(ids...)
}

// ClearCreatedCollections clears all "created_collections" edges to the Collection entity.
func (uu *UserUpdate) ClearCreatedCollections() *UserUpdate {
	uu.mutation.ClearCreatedCollections()
	return uu
}

// RemoveCreatedCollectionIDs removes the "created_collections" edge to Collection entities by IDs.
func (uu *UserUpdate) RemoveCreatedCollectionIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveCreatedCollectionIDs(ids...)
	return uu
}

// RemoveCreatedCollections removes "created_collections" edges to Collection entities.
func (uu *UserUpdate) RemoveCreatedCollections(c ...*Collection) *UserUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCreatedCollectionIDs(ids...)
}

// ClearUpdatedCollections clears all "updated_collections" edges to the Collection entity.
func (uu *UserUpdate) ClearUpdatedCollections() *UserUpdate {
	uu.mutation.ClearUpdatedCollections()
	return uu
}

// RemoveUpdatedCollectionIDs removes the "updated_collections" edge to Collection entities by IDs.
func (uu *UserUpdate) RemoveUpdatedCollectionIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveUpdatedCollectionIDs(ids...)
	return uu
}

// RemoveUpdatedCollections removes "updated_collections" edges to Collection entities.
func (uu *UserUpdate) RemoveUpdatedCollections(c ...*Collection) *UserUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveUpdatedCollectionIDs(ids...)
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (uu *UserUpdate) ClearCollections() *UserUpdate {
	uu.mutation.ClearCollections()
	return uu
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (uu *UserUpdate) RemoveCollectionIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveCollectionIDs(ids...)
	return uu
}

// RemoveCollections removes "collections" edges to Collection entities.
func (uu *UserUpdate) RemoveCollections(c ...*Collection) *UserUpdate {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCollectionIDs(ids...)
}

// ClearObjectInfo clears all "object_info" edges to the Object entity.
func (uu *UserUpdate) ClearObjectInfo() *UserUpdate {
	uu.mutation.ClearObjectInfo()
	return uu
}

// RemoveObjectInfoIDs removes the "object_info" edge to Object entities by IDs.
func (uu *UserUpdate) RemoveObjectInfoIDs(ids ...puuid.ID) *UserUpdate {
	uu.mutation.RemoveObjectInfoIDs(ids...)
	return uu
}

// RemoveObjectInfo removes "object_info" edges to Object entities.
func (uu *UserUpdate) RemoveObjectInfo(o ...*Object) *UserUpdate {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveObjectInfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Login(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLogin,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastLogin,
		})
	}
	if uu.mutation.LastLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldLastLogin,
		})
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsActive,
		})
	}
	if value, ok := uu.mutation.NotionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNotionID,
		})
	}
	if uu.mutation.NotionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldNotionID,
		})
	}
	if value, ok := uu.mutation.IsNotionSubject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsNotionSubject,
		})
	}
	if uu.mutation.CreatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedObjectsIDs(); len(nodes) > 0 && !uu.mutation.CreatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpdatedObjectsIDs(); len(nodes) > 0 && !uu.mutation.UpdatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DeletedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDeletedObjectsIDs(); len(nodes) > 0 && !uu.mutation.DeletedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DeletedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedCollectionsIDs(); len(nodes) > 0 && !uu.mutation.CreatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpdatedCollectionsIDs(); len(nodes) > 0 && !uu.mutation.UpdatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !uu.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ObjectInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		createE := &ObjectUserCreate{config: uu.config, mutation: newObjectUserMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedObjectInfoIDs(); len(nodes) > 0 && !uu.mutation.ObjectInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: uu.config, mutation: newObjectUserMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ObjectInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: uu.config, mutation: newObjectUserMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetLogin sets the "login" field.
func (uuo *UserUpdateOne) SetLogin(s string) *UserUpdateOne {
	uuo.mutation.SetLogin(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.mutation.SetRole(s)
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetIsActive sets the "is_active" field.
func (uuo *UserUpdateOne) SetIsActive(b bool) *UserUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// SetNotionID sets the "notion_id" field.
func (uuo *UserUpdateOne) SetNotionID(s string) *UserUpdateOne {
	uuo.mutation.SetNotionID(s)
	return uuo
}

// SetNillableNotionID sets the "notion_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNotionID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNotionID(*s)
	}
	return uuo
}

// ClearNotionID clears the value of the "notion_id" field.
func (uuo *UserUpdateOne) ClearNotionID() *UserUpdateOne {
	uuo.mutation.ClearNotionID()
	return uuo
}

// SetIsNotionSubject sets the "is_notion_subject" field.
func (uuo *UserUpdateOne) SetIsNotionSubject(b bool) *UserUpdateOne {
	uuo.mutation.SetIsNotionSubject(b)
	return uuo
}

// SetNillableIsNotionSubject sets the "is_notion_subject" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsNotionSubject(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsNotionSubject(*b)
	}
	return uuo
}

// AddCreatedObjectIDs adds the "created_objects" edge to the Object entity by IDs.
func (uuo *UserUpdateOne) AddCreatedObjectIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddCreatedObjectIDs(ids...)
	return uuo
}

// AddCreatedObjects adds the "created_objects" edges to the Object entity.
func (uuo *UserUpdateOne) AddCreatedObjects(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddCreatedObjectIDs(ids...)
}

// AddUpdatedObjectIDs adds the "updated_objects" edge to the Object entity by IDs.
func (uuo *UserUpdateOne) AddUpdatedObjectIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddUpdatedObjectIDs(ids...)
	return uuo
}

// AddUpdatedObjects adds the "updated_objects" edges to the Object entity.
func (uuo *UserUpdateOne) AddUpdatedObjects(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddUpdatedObjectIDs(ids...)
}

// AddDeletedObjectIDs adds the "deleted_objects" edge to the Object entity by IDs.
func (uuo *UserUpdateOne) AddDeletedObjectIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddDeletedObjectIDs(ids...)
	return uuo
}

// AddDeletedObjects adds the "deleted_objects" edges to the Object entity.
func (uuo *UserUpdateOne) AddDeletedObjects(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddDeletedObjectIDs(ids...)
}

// AddCreatedCollectionIDs adds the "created_collections" edge to the Collection entity by IDs.
func (uuo *UserUpdateOne) AddCreatedCollectionIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddCreatedCollectionIDs(ids...)
	return uuo
}

// AddCreatedCollections adds the "created_collections" edges to the Collection entity.
func (uuo *UserUpdateOne) AddCreatedCollections(c ...*Collection) *UserUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCreatedCollectionIDs(ids...)
}

// AddUpdatedCollectionIDs adds the "updated_collections" edge to the Collection entity by IDs.
func (uuo *UserUpdateOne) AddUpdatedCollectionIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddUpdatedCollectionIDs(ids...)
	return uuo
}

// AddUpdatedCollections adds the "updated_collections" edges to the Collection entity.
func (uuo *UserUpdateOne) AddUpdatedCollections(c ...*Collection) *UserUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddUpdatedCollectionIDs(ids...)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (uuo *UserUpdateOne) AddCollectionIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddCollectionIDs(ids...)
	return uuo
}

// AddCollections adds the "collections" edges to the Collection entity.
func (uuo *UserUpdateOne) AddCollections(c ...*Collection) *UserUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCollectionIDs(ids...)
}

// AddObjectInfoIDs adds the "object_info" edge to the Object entity by IDs.
func (uuo *UserUpdateOne) AddObjectInfoIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.AddObjectInfoIDs(ids...)
	return uuo
}

// AddObjectInfo adds the "object_info" edges to the Object entity.
func (uuo *UserUpdateOne) AddObjectInfo(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddObjectInfoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCreatedObjects clears all "created_objects" edges to the Object entity.
func (uuo *UserUpdateOne) ClearCreatedObjects() *UserUpdateOne {
	uuo.mutation.ClearCreatedObjects()
	return uuo
}

// RemoveCreatedObjectIDs removes the "created_objects" edge to Object entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedObjectIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveCreatedObjectIDs(ids...)
	return uuo
}

// RemoveCreatedObjects removes "created_objects" edges to Object entities.
func (uuo *UserUpdateOne) RemoveCreatedObjects(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveCreatedObjectIDs(ids...)
}

// ClearUpdatedObjects clears all "updated_objects" edges to the Object entity.
func (uuo *UserUpdateOne) ClearUpdatedObjects() *UserUpdateOne {
	uuo.mutation.ClearUpdatedObjects()
	return uuo
}

// RemoveUpdatedObjectIDs removes the "updated_objects" edge to Object entities by IDs.
func (uuo *UserUpdateOne) RemoveUpdatedObjectIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveUpdatedObjectIDs(ids...)
	return uuo
}

// RemoveUpdatedObjects removes "updated_objects" edges to Object entities.
func (uuo *UserUpdateOne) RemoveUpdatedObjects(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveUpdatedObjectIDs(ids...)
}

// ClearDeletedObjects clears all "deleted_objects" edges to the Object entity.
func (uuo *UserUpdateOne) ClearDeletedObjects() *UserUpdateOne {
	uuo.mutation.ClearDeletedObjects()
	return uuo
}

// RemoveDeletedObjectIDs removes the "deleted_objects" edge to Object entities by IDs.
func (uuo *UserUpdateOne) RemoveDeletedObjectIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveDeletedObjectIDs(ids...)
	return uuo
}

// RemoveDeletedObjects removes "deleted_objects" edges to Object entities.
func (uuo *UserUpdateOne) RemoveDeletedObjects(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveDeletedObjectIDs(ids...)
}

// ClearCreatedCollections clears all "created_collections" edges to the Collection entity.
func (uuo *UserUpdateOne) ClearCreatedCollections() *UserUpdateOne {
	uuo.mutation.ClearCreatedCollections()
	return uuo
}

// RemoveCreatedCollectionIDs removes the "created_collections" edge to Collection entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedCollectionIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveCreatedCollectionIDs(ids...)
	return uuo
}

// RemoveCreatedCollections removes "created_collections" edges to Collection entities.
func (uuo *UserUpdateOne) RemoveCreatedCollections(c ...*Collection) *UserUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCreatedCollectionIDs(ids...)
}

// ClearUpdatedCollections clears all "updated_collections" edges to the Collection entity.
func (uuo *UserUpdateOne) ClearUpdatedCollections() *UserUpdateOne {
	uuo.mutation.ClearUpdatedCollections()
	return uuo
}

// RemoveUpdatedCollectionIDs removes the "updated_collections" edge to Collection entities by IDs.
func (uuo *UserUpdateOne) RemoveUpdatedCollectionIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveUpdatedCollectionIDs(ids...)
	return uuo
}

// RemoveUpdatedCollections removes "updated_collections" edges to Collection entities.
func (uuo *UserUpdateOne) RemoveUpdatedCollections(c ...*Collection) *UserUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveUpdatedCollectionIDs(ids...)
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (uuo *UserUpdateOne) ClearCollections() *UserUpdateOne {
	uuo.mutation.ClearCollections()
	return uuo
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (uuo *UserUpdateOne) RemoveCollectionIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveCollectionIDs(ids...)
	return uuo
}

// RemoveCollections removes "collections" edges to Collection entities.
func (uuo *UserUpdateOne) RemoveCollections(c ...*Collection) *UserUpdateOne {
	ids := make([]puuid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCollectionIDs(ids...)
}

// ClearObjectInfo clears all "object_info" edges to the Object entity.
func (uuo *UserUpdateOne) ClearObjectInfo() *UserUpdateOne {
	uuo.mutation.ClearObjectInfo()
	return uuo
}

// RemoveObjectInfoIDs removes the "object_info" edge to Object entities by IDs.
func (uuo *UserUpdateOne) RemoveObjectInfoIDs(ids ...puuid.ID) *UserUpdateOne {
	uuo.mutation.RemoveObjectInfoIDs(ids...)
	return uuo
}

// RemoveObjectInfo removes "object_info" edges to Object entities.
func (uuo *UserUpdateOne) RemoveObjectInfo(o ...*Object) *UserUpdateOne {
	ids := make([]puuid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveObjectInfoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Login(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLogin,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastLogin,
		})
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldLastLogin,
		})
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsActive,
		})
	}
	if value, ok := uuo.mutation.NotionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNotionID,
		})
	}
	if uuo.mutation.NotionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldNotionID,
		})
	}
	if value, ok := uuo.mutation.IsNotionSubject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsNotionSubject,
		})
	}
	if uuo.mutation.CreatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedObjectsIDs(); len(nodes) > 0 && !uuo.mutation.CreatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedObjectsTable,
			Columns: []string{user.CreatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpdatedObjectsIDs(); len(nodes) > 0 && !uuo.mutation.UpdatedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedObjectsTable,
			Columns: []string{user.UpdatedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DeletedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDeletedObjectsIDs(); len(nodes) > 0 && !uuo.mutation.DeletedObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DeletedObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeletedObjectsTable,
			Columns: []string{user.DeletedObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedCollectionsIDs(); len(nodes) > 0 && !uuo.mutation.CreatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedCollectionsTable,
			Columns: []string{user.CreatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpdatedCollectionsIDs(); len(nodes) > 0 && !uuo.mutation.UpdatedCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedCollectionsTable,
			Columns: []string{user.UpdatedCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !uuo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CollectionsTable,
			Columns: user.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ObjectInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		createE := &ObjectUserCreate{config: uuo.config, mutation: newObjectUserMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedObjectInfoIDs(); len(nodes) > 0 && !uuo.mutation.ObjectInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: uuo.config, mutation: newObjectUserMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ObjectInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ObjectInfoTable,
			Columns: user.ObjectInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ObjectUserCreate{config: uuo.config, mutation: newObjectUserMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
