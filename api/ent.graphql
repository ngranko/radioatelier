directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type City implements Node {
  id: ID!
  name: String!
  country: String!
  objects: [Object!]
}
"""A connection to a list of items."""
type CityConnection {
  """A list of edges."""
  edges: [CityEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CityEdge {
  """The item at the end of the edge."""
  node: City
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
CityWhereInput is used for filtering City objects.
Input was generated by ent.
"""
input CityWhereInput {
  not: CityWhereInput
  and: [CityWhereInput!]
  or: [CityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """objects edge predicates"""
  hasObjects: Boolean
  hasObjectsWith: [ObjectWhereInput!]
}
type Collection implements Node {
  id: ID!
  name: String!
  description: String
  createdAt: Time!
  updatedAt: Time!
  createdBy: User!
  updatedBy: User!
  objects: [Object!]
  users: [User!]
}
"""A connection to a list of items."""
type CollectionConnection {
  """A list of edges."""
  edges: [CollectionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CollectionEdge {
  """The item at the end of the edge."""
  node: Collection
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Collection connections"""
input CollectionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Collections."""
  field: CollectionOrderField!
}
"""Properties by which Collection connections can be ordered."""
enum CollectionOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}
"""
CollectionWhereInput is used for filtering Collection objects.
Input was generated by ent.
"""
input CollectionWhereInput {
  not: CollectionWhereInput
  and: [CollectionWhereInput!]
  or: [CollectionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by edge predicates"""
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """updated_by edge predicates"""
  hasUpdatedBy: Boolean
  hasUpdatedByWith: [UserWhereInput!]
  """objects edge predicates"""
  hasObjects: Boolean
  hasObjectsWith: [ObjectWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
CreateCityInput is used for create City object.
Input was generated by ent.
"""
input CreateCityInput {
  name: String!
  country: String!
  objectIDs: [ID!]
}
"""
CreateCollectionInput is used for create Collection object.
Input was generated by ent.
"""
input CreateCollectionInput {
  name: String!
  description: String
  createdAt: Time
  updatedAt: Time
  createdByID: ID!
  updatedByID: ID!
  objectIDs: [ID!]
  userIDs: [ID!]
}
"""
CreateObjectInput is used for create Object object.
Input was generated by ent.
"""
input CreateObjectInput {
  name: String!
  description: String
  lat: Float
  lng: Float
  installedPeriod: String
  isRemoved: Boolean
  removedPeriod: String
  source: String
  type: String!
  tags: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  lastSync: Time
  notionID: String
  createdByID: ID!
  updatedByID: ID!
  deletedByID: ID
  collectionIDs: [ID!]
  userInfoIDs: [ID!]
  cityID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  email: String!
  login: String!
  password: String!
  role: String!
  lastLogin: Time
  isActive: Boolean
  notionID: String
  createdObjectIDs: [ID!]
  updatedObjectIDs: [ID!]
  deletedObjectIDs: [ID!]
  createdCollectionIDs: [ID!]
  updatedCollectionIDs: [ID!]
  collectionIDs: [ID!]
  objectInfoIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "radioatelier/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Object implements Node {
  id: ID!
  name: String!
  description: String
  lat: Float
  lng: Float
  installedPeriod: String
  isRemoved: Boolean!
  removedPeriod: String
  source: String
  type: String!
  tags: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  lastSync: Time
  notionID: String
  createdBy: User!
  updatedBy: User!
  deletedBy: User
  collections: [Collection!]
  userInfo: [User!]
  city: City!
}
"""A connection to a list of items."""
type ObjectConnection {
  """A list of edges."""
  edges: [ObjectEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ObjectEdge {
  """The item at the end of the edge."""
  node: Object
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
ObjectWhereInput is used for filtering Object objects.
Input was generated by ent.
"""
input ObjectWhereInput {
  not: ObjectWhereInput
  and: [ObjectWhereInput!]
  or: [ObjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """lat field predicates"""
  lat: Float
  latNEQ: Float
  latIn: [Float!]
  latNotIn: [Float!]
  latGT: Float
  latGTE: Float
  latLT: Float
  latLTE: Float
  latIsNil: Boolean
  latNotNil: Boolean
  """lng field predicates"""
  lng: Float
  lngNEQ: Float
  lngIn: [Float!]
  lngNotIn: [Float!]
  lngGT: Float
  lngGTE: Float
  lngLT: Float
  lngLTE: Float
  lngIsNil: Boolean
  lngNotNil: Boolean
  """installed_period field predicates"""
  installedPeriod: String
  installedPeriodNEQ: String
  installedPeriodIn: [String!]
  installedPeriodNotIn: [String!]
  installedPeriodGT: String
  installedPeriodGTE: String
  installedPeriodLT: String
  installedPeriodLTE: String
  installedPeriodContains: String
  installedPeriodHasPrefix: String
  installedPeriodHasSuffix: String
  installedPeriodIsNil: Boolean
  installedPeriodNotNil: Boolean
  installedPeriodEqualFold: String
  installedPeriodContainsFold: String
  """is_removed field predicates"""
  isRemoved: Boolean
  isRemovedNEQ: Boolean
  """removed_period field predicates"""
  removedPeriod: String
  removedPeriodNEQ: String
  removedPeriodIn: [String!]
  removedPeriodNotIn: [String!]
  removedPeriodGT: String
  removedPeriodGTE: String
  removedPeriodLT: String
  removedPeriodLTE: String
  removedPeriodContains: String
  removedPeriodHasPrefix: String
  removedPeriodHasSuffix: String
  removedPeriodIsNil: Boolean
  removedPeriodNotNil: Boolean
  removedPeriodEqualFold: String
  removedPeriodContainsFold: String
  """source field predicates"""
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """tags field predicates"""
  tags: String
  tagsNEQ: String
  tagsIn: [String!]
  tagsNotIn: [String!]
  tagsGT: String
  tagsGTE: String
  tagsLT: String
  tagsLTE: String
  tagsContains: String
  tagsHasPrefix: String
  tagsHasSuffix: String
  tagsEqualFold: String
  tagsContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """last_sync field predicates"""
  lastSync: Time
  lastSyncNEQ: Time
  lastSyncIn: [Time!]
  lastSyncNotIn: [Time!]
  lastSyncGT: Time
  lastSyncGTE: Time
  lastSyncLT: Time
  lastSyncLTE: Time
  lastSyncIsNil: Boolean
  lastSyncNotNil: Boolean
  """notion_id field predicates"""
  notionID: String
  notionIDNEQ: String
  notionIDIn: [String!]
  notionIDNotIn: [String!]
  notionIDGT: String
  notionIDGTE: String
  notionIDLT: String
  notionIDLTE: String
  notionIDContains: String
  notionIDHasPrefix: String
  notionIDHasSuffix: String
  notionIDIsNil: Boolean
  notionIDNotNil: Boolean
  notionIDEqualFold: String
  notionIDContainsFold: String
  """created_by edge predicates"""
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """updated_by edge predicates"""
  hasUpdatedBy: Boolean
  hasUpdatedByWith: [UserWhereInput!]
  """deleted_by edge predicates"""
  hasDeletedBy: Boolean
  hasDeletedByWith: [UserWhereInput!]
  """collections edge predicates"""
  hasCollections: Boolean
  hasCollectionsWith: [CollectionWhereInput!]
  """user_info edge predicates"""
  hasUserInfo: Boolean
  hasUserInfoWith: [UserWhereInput!]
  """city edge predicates"""
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  cities(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Cities returned from the connection."""
    where: CityWhereInput
  ): CityConnection!
  collections(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Collections returned from the connection."""
    orderBy: CollectionOrder

    """Filtering options for Collections returned from the connection."""
    where: CollectionWhereInput
  ): CollectionConnection!
  objects(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Objects returned from the connection."""
    where: ObjectWhereInput
  ): ObjectConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""
UpdateCityInput is used for update City object.
Input was generated by ent.
"""
input UpdateCityInput {
  name: String
  country: String
  addObjectIDs: [ID!]
  removeObjectIDs: [ID!]
}
"""
UpdateCollectionInput is used for update Collection object.
Input was generated by ent.
"""
input UpdateCollectionInput {
  name: String
  clearDescription: Boolean
  description: String
  updatedAt: Time
  clearCreatedBy: Boolean
  createdByID: ID
  clearUpdatedBy: Boolean
  updatedByID: ID
  addObjectIDs: [ID!]
  removeObjectIDs: [ID!]
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
}
"""
UpdateObjectInput is used for update Object object.
Input was generated by ent.
"""
input UpdateObjectInput {
  name: String
  clearDescription: Boolean
  description: String
  clearLat: Boolean
  lat: Float
  clearLng: Boolean
  lng: Float
  clearInstalledPeriod: Boolean
  installedPeriod: String
  isRemoved: Boolean
  clearRemovedPeriod: Boolean
  removedPeriod: String
  clearSource: Boolean
  source: String
  type: String
  tags: String
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  clearLastSync: Boolean
  lastSync: Time
  clearNotionID: Boolean
  notionID: String
  clearCreatedBy: Boolean
  createdByID: ID
  clearUpdatedBy: Boolean
  updatedByID: ID
  clearDeletedBy: Boolean
  deletedByID: ID
  addCollectionIDs: [ID!]
  removeCollectionIDs: [ID!]
  addUserInfoIDs: [ID!]
  removeUserInfoIDs: [ID!]
  clearCity: Boolean
  cityID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  email: String
  login: String
  password: String
  role: String
  clearLastLogin: Boolean
  lastLogin: Time
  isActive: Boolean
  clearNotionID: Boolean
  notionID: String
  addCreatedObjectIDs: [ID!]
  removeCreatedObjectIDs: [ID!]
  addUpdatedObjectIDs: [ID!]
  removeUpdatedObjectIDs: [ID!]
  addDeletedObjectIDs: [ID!]
  removeDeletedObjectIDs: [ID!]
  addCreatedCollectionIDs: [ID!]
  removeCreatedCollectionIDs: [ID!]
  addUpdatedCollectionIDs: [ID!]
  removeUpdatedCollectionIDs: [ID!]
  addCollectionIDs: [ID!]
  removeCollectionIDs: [ID!]
  addObjectInfoIDs: [ID!]
  removeObjectInfoIDs: [ID!]
}
type User implements Node {
  id: ID!
  name: String!
  email: String!
  login: String!
  role: String!
  lastLogin: Time
  isActive: Boolean!
  notionID: String
  createdObjects: [Object!]
  updatedObjects: [Object!]
  deletedObjects: [Object!]
  createdCollections: [Collection!]
  updatedCollections: [Collection!]
  collections: [Collection!]
  objectInfo: [Object!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  NAME
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """login field predicates"""
  login: String
  loginNEQ: String
  loginIn: [String!]
  loginNotIn: [String!]
  loginGT: String
  loginGTE: String
  loginLT: String
  loginLTE: String
  loginContains: String
  loginHasPrefix: String
  loginHasSuffix: String
  loginEqualFold: String
  loginContainsFold: String
  """role field predicates"""
  role: String
  roleNEQ: String
  roleIn: [String!]
  roleNotIn: [String!]
  roleGT: String
  roleGTE: String
  roleLT: String
  roleLTE: String
  roleContains: String
  roleHasPrefix: String
  roleHasSuffix: String
  roleEqualFold: String
  roleContainsFold: String
  """last_login field predicates"""
  lastLogin: Time
  lastLoginNEQ: Time
  lastLoginIn: [Time!]
  lastLoginNotIn: [Time!]
  lastLoginGT: Time
  lastLoginGTE: Time
  lastLoginLT: Time
  lastLoginLTE: Time
  lastLoginIsNil: Boolean
  lastLoginNotNil: Boolean
  """is_active field predicates"""
  isActive: Boolean
  isActiveNEQ: Boolean
  """notion_id field predicates"""
  notionID: String
  notionIDNEQ: String
  notionIDIn: [String!]
  notionIDNotIn: [String!]
  notionIDGT: String
  notionIDGTE: String
  notionIDLT: String
  notionIDLTE: String
  notionIDContains: String
  notionIDHasPrefix: String
  notionIDHasSuffix: String
  notionIDIsNil: Boolean
  notionIDNotNil: Boolean
  notionIDEqualFold: String
  notionIDContainsFold: String
  """created_objects edge predicates"""
  hasCreatedObjects: Boolean
  hasCreatedObjectsWith: [ObjectWhereInput!]
  """updated_objects edge predicates"""
  hasUpdatedObjects: Boolean
  hasUpdatedObjectsWith: [ObjectWhereInput!]
  """deleted_objects edge predicates"""
  hasDeletedObjects: Boolean
  hasDeletedObjectsWith: [ObjectWhereInput!]
  """created_collections edge predicates"""
  hasCreatedCollections: Boolean
  hasCreatedCollectionsWith: [CollectionWhereInput!]
  """updated_collections edge predicates"""
  hasUpdatedCollections: Boolean
  hasUpdatedCollectionsWith: [CollectionWhereInput!]
  """collections edge predicates"""
  hasCollections: Boolean
  hasCollectionsWith: [CollectionWhereInput!]
  """object_info edge predicates"""
  hasObjectInfo: Boolean
  hasObjectInfoWith: [ObjectWhereInput!]
}
