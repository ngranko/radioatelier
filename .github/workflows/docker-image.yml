name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to Docker
      uses: docker/login-action@v3
      with:
        registry: registry.radioatelier.one
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Calculate version
      id: calculate-version
      uses: paulhatch/semantic-version@v5.3.0
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "csv"
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        enable_prerelease_mode: true
        # If enabled, diagnostic information will be added to the action output.
        debug: false
        # If true, the branch will be used to select the maximum version.
        version_from_branch: false


    - name: Build the api docker image
      run: |
        cd api
        docker build --compress --file docker/go/Dockerfile -t registry.radioatelier.one/radioatelier/go:${{ steps.calculate-version.outputs.version }} -t registry.radioatelier.one/radioatelier/go:latest --target prod .
        docker push registry.radioatelier.one/radioatelier/go:${{ steps.calculate-version.outputs.version }}
        docker push registry.radioatelier.one/radioatelier/go:latest

    - name: Build the web docker image
      run: |
        cd web
        docker build --compress --file docker/app/Dockerfile -t registry.radioatelier.one/radioatelier/web:${{ steps.calculate-version.outputs.version }} -t registry.radioatelier.one/radioatelier/web:latest --target prod .
        docker push registry.radioatelier.one/radioatelier/web:${{ steps.calculate-version.outputs.version }}
        docker push registry.radioatelier.one/radioatelier/web:latest

    - name: Tag the current commit
      run: |
        git tag v${{ steps.calculate-version.outputs.version }}
        git push origin v${{ steps.calculate-version.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.SSH_WORKDIR }} && docker compose pull && docker compose up -d && exit"

      - name: cleanup
        run: rm -rf ~/.ssh
